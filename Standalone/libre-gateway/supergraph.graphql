schema
  @core(feature: "https://specs.apollo.dev/core/v0.1"),
  @core(feature: "https://specs.apollo.dev/join/v0.1")
{
  query: Query
  mutation: Mutation
}

directive @core(feature: String!) repeatable on SCHEMA

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @cascade(fields: [String]) on FIELD

directive @cacheControl(maxAge: Int!) on QUERY

enum AccessLevel {
  VIEWER
  MODERATOR
  OWNER
}

type AccessRight {
  id: ID!
  name: AccessRights
  forRole(filter: RoleFilter): Role
  isActive: Boolean
}

type AccessRightAggregateResult {
  count: Int
}

input AccessRightFilter {
  id: [ID!]
  name: AccessRights_hash
  has: [AccessRightHasFilter]
  and: [AccessRightFilter]
  or: [AccessRightFilter]
  not: AccessRightFilter
}

enum AccessRightHasFilter {
  name
  forRole
  isActive
}

input AccessRightPatch {
  name: AccessRights
  forRole: RoleRef
  isActive: Boolean
}

input AccessRightRef {
  id: ID
  name: AccessRights
  forRole: RoleRef
  isActive: Boolean
}

enum AccessRights {
  isAdmin
  getUser
  queryUser
  aggregateUser
  getUserRole
  queryUserRole
  aggregateUserRole
  getRole
  queryRole
  aggregateRole
  getAccessRight
  queryAccessRight
  aggregateAccessRight
  getACL
  queryACL
  aggregateACL
  getMenu
  queryMenu
  aggregateMenu
  getOperationsRequest
  queryOperationsRequest
  aggregateOperationsRequest
  getRequestState
  queryRequestState
  aggregateRequestState
  getOperationsDefinition
  queryOperationsDefinition
  aggregateOperationsDefinition
  getBillOfMaterial
  queryBillOfMaterial
  aggregateBillOfMaterial
  getOperationsSegment
  queryOperationsSegment
  aggregateOperationsSegment
  getTransitionEventRuleset
  queryTransitionEventRuleset
  aggregateTransitionEventRuleset
  getStateEventRuleset
  queryStateEventRuleset
  aggregateStateEventRuleset
  getMaterialEventRuleset
  queryMaterialEventRuleset
  aggregateMaterialEventRuleset
  getOrderStartRuleset
  queryOrderStartRuleset
  aggregateOrderStartRuleset
  getSegmentInvoiceSetting
  querySegmentInvoiceSetting
  aggregateSegmentInvoiceSetting
  getSegmentDependency
  querySegmentDependency
  aggregateSegmentDependency
  getWorkMaster
  queryWorkMaster
  aggregateWorkMaster
  getWorkDirective
  queryWorkDirective
  aggregateWorkDirective
  getJobOrder
  queryJobOrder
  aggregateJobOrder
  getJobResponse
  queryJobResponse
  aggregateJobResponse
  getEventLog
  queryEventLog
  aggregateEventLog
  getQuantityLog
  queryQuantityLog
  aggregateQuantityLog
  getEquipmentSpecification
  queryEquipmentSpecification
  aggregateEquipmentSpecification
  getMaterialSpecification
  queryMaterialSpecification
  aggregateMaterialSpecification
  getPersonnelSpecification
  queryPersonnelSpecification
  aggregatePersonnelSpecification
  getEquipment
  queryEquipment
  aggregateEquipment
  getEquipmentNameAlias
  queryEquipmentNameAlias
  aggregateEquipmentNameAlias
  getPropertyNameAlias
  queryPropertyNameAlias
  aggregatePropertyNameAlias
  getPropertyValueAlias
  queryPropertyValueAlias
  aggregatePropertyValueAlias
  getEquipmentReasonOverride
  queryEquipmentReasonOverride
  aggregateEquipmentReasonOverride
  getEquipmentClass
  queryEquipmentClass
  aggregateEquipmentClass
  getProperty
  queryProperty
  aggregateProperty
  getEquipmentPropertyOverride
  queryEquipmentPropertyOverride
  aggregateEquipmentPropertyOverride
  getEventDefinition
  queryEventDefinition
  aggregateEventDefinition
  getPayloadFieldDefinition
  queryPayloadFieldDefinition
  aggregatePayloadFieldDefinition
  getReason
  queryReason
  aggregateReason
  getReasonCategory
  queryReasonCategory
  aggregateReasonCategory
  getMaterialClass
  queryMaterialClass
  aggregateMaterialClass
  getMaterialDefinition
  queryMaterialDefinition
  aggregateMaterialDefinition
  getMaterialAlternate
  queryMaterialAlternate
  aggregateMaterialAlternate
  getCarrier
  queryCarrier
  aggregateCarrier
  getMaterialLot
  queryMaterialLot
  aggregateMaterialLot
  getMaterialSubLot
  queryMaterialSubLot
  aggregateMaterialSubLot
  getMaterialUnit
  queryMaterialUnit
  aggregateMaterialUnit
  getInventoryTransaction
  queryInventoryTransaction
  aggregateInventoryTransaction
  getMaterialEquipment
  queryMaterialEquipment
  aggregateMaterialEquipment
  getUnitOfMeasure
  queryUnitOfMeasure
  aggregateUnitOfMeasure
  getUnitOfMeasureConversion
  queryUnitOfMeasureConversion
  aggregateUnitOfMeasureConversion
  getMaterialStatus
  queryMaterialStatus
  aggregateMaterialStatus
  getMaterialStateModel
  queryMaterialStateModel
  aggregateMaterialStateModel
  getMaterialStateTransition
  queryMaterialStateTransition
  aggregateMaterialStateTransition
  getPersonnelClass
  queryPersonnelClass
  aggregatePersonnelClass
  getPerson
  queryPerson
  aggregatePerson
  getTestSpecification
  queryTestSpecification
  aggregateTestSpecification
  getTestResult
  queryTestResult
  aggregateTestResult
  getWorkCalendarDefinitionEntry
  queryWorkCalendarDefinitionEntry
  aggregateWorkCalendarDefinitionEntry
  getWorkCalendarEntry
  queryWorkCalendarEntry
  aggregateWorkCalendarEntry
  getWorkCalendar
  queryWorkCalendar
  aggregateWorkCalendar
  getWorkflowSpecification
  queryWorkflowSpecification
  aggregateWorkflowSpecification
  getWorkflowInstance
  queryWorkflowInstance
  aggregateWorkflowInstance
  getWorkflowNode
  queryWorkflowNode
  aggregateWorkflowNode
  getWorkflowNodeInstance
  queryWorkflowNodeInstance
  aggregateWorkflowNodeInstance
  getWorkflowNodeEvent
  queryWorkflowNodeEvent
  aggregateWorkflowNodeEvent
  getWorkflowNodeType
  queryWorkflowNodeType
  aggregateWorkflowNodeType
  getWorkflowConnection
  queryWorkflowConnection
  aggregateWorkflowConnection
  getWorkflowConnectionType
  queryWorkflowConnectionType
  aggregateWorkflowConnectionType
  getWorkflowProperty
  queryWorkflowProperty
  aggregateWorkflowProperty
  getWorkflowPropertyInstance
  queryWorkflowPropertyInstance
  aggregateWorkflowPropertyInstance
  getWorkflowPropertyValue
  queryWorkflowPropertyValue
  aggregateWorkflowPropertyValue
  getForm
  queryForm
  aggregateForm
  getASNStaging
  queryASNStaging
  aggregateASNStaging
  getPartner
  queryPartner
  aggregatePartner
  getInventoryHandlingPolicy
  queryInventoryHandlingPolicy
  aggregateInventoryHandlingPolicy
  getInventoryHandlingRule
  queryInventoryHandlingRule
  aggregateInventoryHandlingRule
  getAddress
  queryAddress
  aggregateAddress
  getOrder
  queryOrder
  aggregateOrder
  getOrderLine
  queryOrderLine
  aggregateOrderLine
  getShipment
  queryShipment
  aggregateShipment
  getShipmentItem
  queryShipmentItem
  aggregateShipmentItem
  getBox
  queryBox
  aggregateBox
  getGeneralLedgerAccount
  queryGeneralLedgerAccount
  aggregateGeneralLedgerAccount
  addUser
  updateUser
  deleteUser
  addUserRole
  updateUserRole
  deleteUserRole
  addRole
  updateRole
  deleteRole
  addAccessRight
  updateAccessRight
  deleteAccessRight
  addACL
  updateACL
  deleteACL
  addMenu
  updateMenu
  deleteMenu
  addOperationsRequest
  updateOperationsRequest
  deleteOperationsRequest
  addRequestState
  updateRequestState
  deleteRequestState
  addOperationsDefinition
  updateOperationsDefinition
  deleteOperationsDefinition
  addBillOfMaterial
  updateBillOfMaterial
  deleteBillOfMaterial
  addOperationsSegment
  updateOperationsSegment
  deleteOperationsSegment
  addTransitionEventRuleset
  updateTransitionEventRuleset
  deleteTransitionEventRuleset
  addStateEventRuleset
  updateStateEventRuleset
  deleteStateEventRuleset
  addMaterialEventRuleset
  updateMaterialEventRuleset
  deleteMaterialEventRuleset
  addOrderStartRuleset
  updateOrderStartRuleset
  deleteOrderStartRuleset
  addSegmentInvoiceSetting
  updateSegmentInvoiceSetting
  deleteSegmentInvoiceSetting
  addSegmentDependency
  updateSegmentDependency
  deleteSegmentDependency
  addWorkMaster
  updateWorkMaster
  deleteWorkMaster
  addWorkDirective
  updateWorkDirective
  deleteWorkDirective
  addJobOrder
  updateJobOrder
  deleteJobOrder
  addJobResponse
  updateJobResponse
  deleteJobResponse
  addEventLog
  updateEventLog
  deleteEventLog
  addQuantityLog
  updateQuantityLog
  deleteQuantityLog
  addEquipmentSpecification
  updateEquipmentSpecification
  deleteEquipmentSpecification
  addMaterialSpecification
  updateMaterialSpecification
  deleteMaterialSpecification
  addPersonnelSpecification
  updatePersonnelSpecification
  deletePersonnelSpecification
  addEquipment
  updateEquipment
  deleteEquipment
  addEquipmentNameAlias
  updateEquipmentNameAlias
  deleteEquipmentNameAlias
  addPropertyNameAlias
  updatePropertyNameAlias
  deletePropertyNameAlias
  addPropertyValueAlias
  updatePropertyValueAlias
  deletePropertyValueAlias
  addEquipmentReasonOverride
  updateEquipmentReasonOverride
  deleteEquipmentReasonOverride
  addEquipmentClass
  updateEquipmentClass
  deleteEquipmentClass
  addProperty
  updateProperty
  deleteProperty
  addEquipmentPropertyOverride
  updateEquipmentPropertyOverride
  deleteEquipmentPropertyOverride
  addEventDefinition
  updateEventDefinition
  deleteEventDefinition
  addPayloadFieldDefinition
  updatePayloadFieldDefinition
  deletePayloadFieldDefinition
  addReason
  updateReason
  deleteReason
  addReasonCategory
  updateReasonCategory
  deleteReasonCategory
  addMaterialClass
  updateMaterialClass
  deleteMaterialClass
  addMaterialDefinition
  updateMaterialDefinition
  deleteMaterialDefinition
  addMaterialAlternate
  updateMaterialAlternate
  deleteMaterialAlternate
  addCarrier
  updateCarrier
  deleteCarrier
  addMaterialLot
  updateMaterialLot
  deleteMaterialLot
  addMaterialSubLot
  updateMaterialSubLot
  deleteMaterialSubLot
  addMaterialUnit
  updateMaterialUnit
  deleteMaterialUnit
  addInventoryTransaction
  updateInventoryTransaction
  deleteInventoryTransaction
  addMaterialEquipment
  updateMaterialEquipment
  deleteMaterialEquipment
  addUnitOfMeasure
  updateUnitOfMeasure
  deleteUnitOfMeasure
  addUnitOfMeasureConversion
  updateUnitOfMeasureConversion
  deleteUnitOfMeasureConversion
  addMaterialStatus
  updateMaterialStatus
  deleteMaterialStatus
  addMaterialStateModel
  updateMaterialStateModel
  deleteMaterialStateModel
  addMaterialStateTransition
  updateMaterialStateTransition
  deleteMaterialStateTransition
  addPersonnelClass
  updatePersonnelClass
  deletePersonnelClass
  addPerson
  updatePerson
  deletePerson
  addTestSpecification
  updateTestSpecification
  deleteTestSpecification
  addTestResult
  updateTestResult
  deleteTestResult
  addWorkCalendarDefinitionEntry
  updateWorkCalendarDefinitionEntry
  deleteWorkCalendarDefinitionEntry
  addWorkCalendarEntry
  updateWorkCalendarEntry
  deleteWorkCalendarEntry
  addWorkCalendar
  updateWorkCalendar
  deleteWorkCalendar
  addWorkflowSpecification
  updateWorkflowSpecification
  deleteWorkflowSpecification
  addWorkflowInstance
  updateWorkflowInstance
  deleteWorkflowInstance
  addWorkflowNode
  updateWorkflowNode
  deleteWorkflowNode
  addWorkflowNodeInstance
  updateWorkflowNodeInstance
  deleteWorkflowNodeInstance
  addWorkflowNodeEvent
  updateWorkflowNodeEvent
  deleteWorkflowNodeEvent
  addWorkflowNodeType
  updateWorkflowNodeType
  deleteWorkflowNodeType
  addWorkflowConnection
  updateWorkflowConnection
  deleteWorkflowConnection
  addWorkflowConnectionType
  updateWorkflowConnectionType
  deleteWorkflowConnectionType
  addWorkflowProperty
  updateWorkflowProperty
  deleteWorkflowProperty
  addWorkflowPropertyInstance
  updateWorkflowPropertyInstance
  deleteWorkflowPropertyInstance
  addWorkflowPropertyValue
  updateWorkflowPropertyValue
  deleteWorkflowPropertyValue
  addForm
  updateForm
  deleteForm
  addASNStaging
  updateASNStaging
  deleteASNStaging
  addPartner
  updatePartner
  deletePartner
  addInventoryHandlingPolicy
  updateInventoryHandlingPolicy
  deleteInventoryHandlingPolicy
  addInventoryHandlingRule
  updateInventoryHandlingRule
  deleteInventoryHandlingRule
  addAddress
  updateAddress
  deleteAddress
  addOrder
  updateOrder
  deleteOrder
  addOrderLine
  updateOrderLine
  deleteOrderLine
  addShipment
  updateShipment
  deleteShipment
  addShipmentItem
  updateShipmentItem
  deleteShipmentItem
  addBox
  updateBox
  deleteBox
  addGeneralLedgerAccount
  updateGeneralLedgerAccount
  deleteGeneralLedgerAccount
}

input AccessRights_hash {
  eq: AccessRights
  in: [AccessRights]
}

type ACL {
  id: ID!
  isActive: Boolean
  level: AccessLevel
  grants(filter: RoleFilter): Role
}

type ACLAggregateResult {
  count: Int
}

input ACLFilter {
  id: [ID!]
  isActive: Boolean
  has: [ACLHasFilter]
  and: [ACLFilter]
  or: [ACLFilter]
  not: ACLFilter
}

enum ACLHasFilter {
  isActive
  level
  grants
}

input ACLPatch {
  isActive: Boolean
  level: AccessLevel
  grants: RoleRef
}

input ACLRef {
  id: ID
  isActive: Boolean
  level: AccessLevel
  grants: RoleRef
}

input AddAccessRightInput {
  name: AccessRights
  forRole: RoleRef
  isActive: Boolean
}

type AddAccessRightPayload {
  accessRight(filter: AccessRightFilter, first: Int, offset: Int): [AccessRight]
  numUids: Int
}

input AddACLInput {
  isActive: Boolean
  level: AccessLevel
  grants: RoleRef
}

type AddACLPayload {
  aCL(filter: ACLFilter, first: Int, offset: Int): [ACL]
  numUids: Int
}

input AddAddressInput {
  isActive: Boolean
  name: String
  street1: String
  street2: String
  number: String
  city: String
  state: String
  postCode: String
  countryCode: String
}

type AddAddressPayload {
  address(filter: AddressFilter, order: AddressOrder, first: Int, offset: Int): [Address]
  numUids: Int
}

input AddASNStagingInput {
  orderNumber: String!
  materialCode: String!
  serialNumber: String
  quantity: Int!
  isValid: Boolean
  errorDescription: String
  workflowInstanceId: String!
}

type AddASNStagingPayload {
  aSNStaging(filter: ASNStagingFilter, order: ASNStagingOrder, first: Int, offset: Int): [ASNStaging]
  numUids: Int
}

input AddBillOfMaterialInput {
  isActive: Boolean
  name: String!
  version: String!
  description: String
  materialSpecifications: [MaterialSpecificationRef]
  operationsDefinition: OperationsDefinitionRef
}

type AddBillOfMaterialPayload {
  billOfMaterial(filter: BillOfMaterialFilter, order: BillOfMaterialOrder, first: Int, offset: Int): [BillOfMaterial]
  numUids: Int
}

input AddBoxInput {
  name: String
  sizeHeightCm: Int
  sizeWidthCm: Int
  sizeDepthCm: Int
}

type AddBoxPayload {
  box(filter: BoxFilter, order: BoxOrder, first: Int, offset: Int): [Box]
  numUids: Int
}

input AddCarrierInput {
  code: String!
  isActive: Boolean
  storageLocation: EquipmentRef!
  status: MaterialStatusRef!
  barcodeImage: String
  owner: PartnerRef
  subLots: [MaterialSubLotRef]
  events: [InventoryTransactionRef]
}

type AddCarrierPayload {
  carrier(filter: CarrierFilter, order: CarrierOrder, first: Int, offset: Int): [Carrier]
  numUids: Int
}

input AddDashboardConfigInput {
  name: String!
  isActive: Boolean
  panels: [DashboardPanelConfigRef]
}

type AddDashboardConfigPayload {
  dashboardConfig(filter: DashboardConfigFilter, order: DashboardConfigOrder, first: Int, offset: Int): [DashboardConfig]
  numUids: Int
}

input AddDashboardPanelConfigInput {
  widgetName: String
  x: Int
  y: Int
  w: Int
  h: Int
}

type AddDashboardPanelConfigPayload {
  dashboardPanelConfig(filter: DashboardPanelConfigFilter, order: DashboardPanelConfigOrder, first: Int, offset: Int): [DashboardPanelConfig]
  numUids: Int
}

input AddDeliveryInput {
  dateTime: DateTime!
  shipments: [ShipmentRef]
  location: EquipmentRef
  operator: UserRef
  transportCompany: TransportCompany
}

type AddDeliveryPayload {
  delivery(filter: DeliveryFilter, order: DeliveryOrder, first: Int, offset: Int): [Delivery]
  numUids: Int
}

input AddEquipmentClassInput {
  isActive: Boolean
  name: String!
  label: String
  displayName: String
  description: String
  parent: EquipmentClassRef
  children: [EquipmentClassRef]
  properties: [PropertyRef]
  eventDefinitions: [EventDefinitionRef]
  reasons: [ReasonRef]
  equipmentLevel: EquipmentElementLevel
  addressTemplate: String
  image: String
  dashboardConfig: DashboardConfigRef
}

type AddEquipmentClassPayload {
  equipmentClass(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass]
  numUids: Int
}

input AddEquipmentInput {
  isActive: Boolean
  name: String!
  label: String
  displayName: String
  description: String
  erpAssetID: String
  parent: EquipmentRef
  children: [EquipmentRef]
  equipmentClass: EquipmentClassRef
  equipmentLevel: EquipmentElementLevel
  materialEquipment: [MaterialEquipmentRef]
  properties: [PropertyRef]
  propertyNameAliases: [PropertyNameAliasRef]
  carriers: [CarrierRef]
  materialSubLots: [MaterialSubLotRef]
  transactions: [InventoryTransactionRef]
  inventoryHandlingRules: [InventoryHandlingRuleRef]
  dataProvider: DataProvider
  dataProviderConnection: String
  addressTemplate: String
  timeZoneName: String
  workSpecifications: [EquipmentSpecificationRef]
  workflowInstances: [WorkflowInstanceRef]
  workCalendar: WorkCalendarRef
  jobResponses: [JobResponseRef]
  jobOrders: [JobOrderRef]
  shipments: [ShipmentRef]
  shipmentItems: [ShipmentItemRef]
  Orders: [OrderRef]
  events: [EventLogRef]
  quantities: [QuantityLogRef]
  allowAdhocWorklog: Boolean
  reasons: [ReasonRef]
  reasonOverrides: [EquipmentReasonOverrideRef]
  propertyOverrides: [EquipmentPropertyOverrideRef]
  mpmEnableJobInterlock: Boolean
  mpmPermissiveOutputName: String
  mpmEnableAutoIdentMatching: Boolean
  mpmAutoIdentMatchSource: String
  mpmEnableSetupStartDetection: Boolean
  mpmEnableSetupCloseDetection: Boolean
  mpmEnableORCWarning: Boolean
  mpmORCWarnTrigger: mpmORCWarnTriggers
  mpmEnableORCRevokePermissive: Boolean
  mpmORCRevokePermissiveTrigger: mpmORCRevokeTriggers
  mpmEnableORCBlockNextOrder: Boolean
  mpmEnableCallMaintenanceEvent: Boolean
  mpmEnableMaintenanceHandover: Boolean
  mpmEnableManualShiftStart: Boolean
  mpmEnableManualShiftEnd: Boolean
  mpmEnableManualBreak: Boolean
  mpmEnableManualPlannedMaint: Boolean
  ocsEnabled: Boolean
  ocsPageState: String
  ocsWorkflowSelector: String
  ocsChosenStopTime: DateTime
}

input AddEquipmentNameAliasInput {
  equipment: EquipmentRef!
  alias: String!
  system: String!
}

type AddEquipmentNameAliasPayload {
  equipmentNameAlias(filter: EquipmentNameAliasFilter, order: EquipmentNameAliasOrder, first: Int, offset: Int): [EquipmentNameAlias]
  numUids: Int
}

type AddEquipmentPayload {
  equipment(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment]
  numUids: Int
}

input AddEquipmentPropertyOverrideInput {
  isActive: Boolean
  equipment: EquipmentRef!
  property: PropertyRef!
  address: String
  expression: String
  value: String
  storeHistory: Boolean
  ignore: Boolean
}

type AddEquipmentPropertyOverridePayload {
  equipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride]
  numUids: Int
}

input AddEquipmentReasonOverrideInput {
  isActive: Boolean
  equipment: EquipmentRef
  reason: ReasonRef
  ignore: Boolean
  standardValue: Float
}

type AddEquipmentReasonOverridePayload {
  equipmentReasonOverride(filter: EquipmentReasonOverrideFilter, order: EquipmentReasonOverrideOrder, first: Int, offset: Int): [EquipmentReasonOverride]
  numUids: Int
}

input AddEquipmentSpecificationInput {
  isActive: Boolean
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  jobOrder: JobOrderRef
  operationsSegment: OperationsSegmentRef
  equipment: EquipmentRef
  equipmentClass: EquipmentClassRef
  description: String
  quantity: Float
  uom: UnitOfMeasureRef
}

type AddEquipmentSpecificationPayload {
  equipmentSpecification(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification]
  numUids: Int
}

input AddEventDefinitionInput {
  isActive: Boolean
  name: String!
  messageClass: MessageClass!
  triggerProperties: [PropertyRef]
  triggerExpression: String!
  delayOption: Boolean
  delayTime: Int
  payloadProperties: [PropertyRef]
  payloadFields: [PayloadFieldDefinitionRef]
  orderStartRuleset: OrderStartRulesetRef
  stateEventRuleset: StateEventRulesetRef
  materialEventRuleset: MaterialEventRulesetRef
  transitionEventRuleset: TransitionEventRulesetRef
  equipmentClass: EquipmentClassRef
}

type AddEventDefinitionPayload {
  eventDefinition(filter: EventDefinitionFilter, order: EventDefinitionOrder, first: Int, offset: Int): [EventDefinition]
  numUids: Int
}

input AddEventLogInput {
  isActive: Boolean
  jobResponse: JobResponseRef!
  equipment: EquipmentRef
  startDateTime: DateTime
  endDateTime: DateTime
  duration: Float
  reasonCode: String
  reasonText: String
  reasonCategoryCode: String
  reasonValue: Float
  reasonValueUoM: UnitOfMeasureRef
  comments: String
}

type AddEventLogPayload {
  eventLog(filter: EventLogFilter, order: EventLogOrder, first: Int, offset: Int): [EventLog]
  numUids: Int
}

input AddFormInput {
  isActive: Boolean
  name: String!
  workflowNodes: [WorkflowNodeRef]
  jsonSchema: String
  uiSchema: String
}

type AddFormPayload {
  form(filter: FormFilter, order: FormOrder, first: Int, offset: Int): [Form]
  numUids: Int
}

input AddGeneralLedgerAccountInput {
  code: String!
  name: String
  type: String
}

type AddGeneralLedgerAccountPayload {
  generalLedgerAccount(filter: GeneralLedgerAccountFilter, order: GeneralLedgerAccountOrder, first: Int, offset: Int): [GeneralLedgerAccount]
  numUids: Int
}

input AddInventoryHandlingPolicyInput {
  isActive: Boolean
  name: String!
  materialClass: [MaterialClassRef]
  verifySerialNumberOnReceipt: Boolean
  verifySerialNumberOnPacking: Boolean
  trackBySerialNumber: Boolean
  trackByCarrier: Boolean
  rules: [InventoryHandlingRuleRef]
}

type AddInventoryHandlingPolicyPayload {
  inventoryHandlingPolicy(filter: InventoryHandlingPolicyFilter, order: InventoryHandlingPolicyOrder, first: Int, offset: Int): [InventoryHandlingPolicy]
  numUids: Int
}

input AddInventoryHandlingRuleInput {
  isActive: Boolean
  customer: PartnerRef!
  stockType: StockType!
  warehouse: [EquipmentRef!]!
  stateModel: MaterialStateModelRef!
  inventoryHandlingPolicy: InventoryHandlingPolicyRef!
}

type AddInventoryHandlingRulePayload {
  inventoryHandlingRule(filter: InventoryHandlingRuleFilter, first: Int, offset: Int): [InventoryHandlingRule]
  numUids: Int
}

input AddInventoryTransactionInput {
  transactionId: String!
  user: UserRef
  owner: PartnerRef
  previous: InventoryTransactionRef
  next: InventoryTransactionRef
  timestamp: DateTime!
  effectiveTimestamp: DateTime!
  materialSubLot: MaterialSubLotRef
  materialUnit: MaterialUnitRef
  carrier: CarrierRef
  status: MaterialStatusRef!
  storageLocation: EquipmentRef
  material: MaterialDefinitionRef!
  materialUse: MaterialUse!
  shipmentItem: ShipmentItemRef
  quantity: Float!
}

type AddInventoryTransactionPayload {
  inventoryTransaction(filter: InventoryTransactionFilter, order: InventoryTransactionOrder, first: Int, offset: Int): [InventoryTransaction]
  numUids: Int
}

input AddJobOrderInput {
  isActive: Boolean
  createdDateTime: DateTime
  name: String!
  version: String
  description: String
  parent: JobOrderRef
  children: [JobOrderRef]
  workType: WorkType
  workDefinitionType: String
  duration: Float
  durationUoM: UnitOfMeasureRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  materialSpecifications: [MaterialSpecificationRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  scheduledStartDateTime: DateTime
  scheduledEndDateTime: DateTime
  scheduledDuration: Float
  equipment: EquipmentRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  priority: Int
  hierarchyScope: String
  dispatchStatus: DispatchStatus
  operationsRequest: OperationsRequestRef
  operationsSegment: OperationsSegmentRef
  jobResponses: [JobResponseRef]
  jobOrderNotes: [JobOrderNoteRef]
}

input AddJobOrderNoteInput {
  comment: String
  createdDateTime: DateTime
  editedDateTime: DateTime
  createdBy: UserRef
  modifiedBy: UserRef
  isActive: Boolean
  jobOrder: JobOrderRef
}

type AddJobOrderNotePayload {
  jobOrderNote(filter: JobOrderNoteFilter, order: JobOrderNoteOrder, first: Int, offset: Int): [JobOrderNote]
  numUids: Int
}

type AddJobOrderPayload {
  jobOrder(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder]
  numUids: Int
}

input AddJobResponseInput {
  isActive: Boolean
  createdDateTime: DateTime
  modifiedDateTime: DateTime
  workDirective: WorkDirectiveRef
  operator: UserRef
  equipment: EquipmentRef
  startDateTime: DateTime
  endDateTime: DateTime
  productionDate: String
  actualDuration: Float
  jobOrder: JobOrderRef
  events: [EventLogRef]
  quantities: [QuantityLogRef]
}

type AddJobResponsePayload {
  jobResponse(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse]
  numUids: Int
}

input AddLibreServiceInput {
  name: String!
  heartbeat: DateTime
}

type AddLibreServicePayload {
  libreService(filter: LibreServiceFilter, order: LibreServiceOrder, first: Int, offset: Int): [LibreService]
  numUids: Int
}

input AddMaterialAlternateInput {
  isActive: Boolean
  material: MaterialDefinitionRef!
  alternateMaterial: MaterialDefinitionRef!
  effectiveDateTime: DateTime!
  priorityOrder: Int!
}

type AddMaterialAlternatePayload {
  materialAlternate(filter: MaterialAlternateFilter, order: MaterialAlternateOrder, first: Int, offset: Int): [MaterialAlternate]
  numUids: Int
}

input AddMaterialClassInput {
  isActive: Boolean
  code: String!
  description: String
  properties: [PropertyRef]
  scheduleSortOrder: Int
  parent: MaterialClassRef
  children: [MaterialClassRef]
  inventoryHandlingPolicy: InventoryHandlingPolicyRef
}

type AddMaterialClassPayload {
  materialClass(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass]
  numUids: Int
}

input AddMaterialDefinitionInput {
  isActive: Boolean
  code: String!
  name: String
  materialClass: MaterialClassRef
  description: String
  properties: [PropertyRef]
  scheduleSortOrder: Int
  baseUnitOfMeasure: UnitOfMeasureRef!
  uomConversions: [UnitOfMeasureConversionRef]
  workSpecifications: [MaterialSpecificationRef]
  operationsDefinitions: [OperationsDefinitionRef]
  sublots: [MaterialSubLotRef]
  units: [MaterialUnitRef]
  events: [InventoryTransactionRef]
  value: Float
  valueCurrency: String
  weightKG: Float
  supplier: String
  serialMask: String
  inventoryHandlingPolicy: InventoryHandlingPolicyRef
  alternates: [MaterialAlternateRef]
  materialEquipment: [MaterialEquipmentRef]
  shipmentItems: [ShipmentItemRef]
  OrderLines: [OrderLineRef]
  transferrableMaterials: [MaterialDefinitionRef]
  customerMaterialCode: String
}

type AddMaterialDefinitionPayload {
  materialDefinition(filter: MaterialDefinitionFilter, order: MaterialDefinitionOrder, first: Int, offset: Int): [MaterialDefinition]
  numUids: Int
}

input AddMaterialEquipmentInput {
  key: String!
  isActive: Boolean
  material: MaterialDefinitionRef!
  equipment: EquipmentRef!
  inventoryMax: Int
  inventoryMin: Int
  sortOrder: Int
}

type AddMaterialEquipmentPayload {
  materialEquipment(filter: MaterialEquipmentFilter, order: MaterialEquipmentOrder, first: Int, offset: Int): [MaterialEquipment]
  numUids: Int
}

input AddMaterialEventRulesetInput {
  name: String!
  triggerWhen: [RulesetTriggerOption]
  segment: OperationsSegmentRef
  targetMaterial: String!
  targetMaterialOp: String!
  eventDefs: [EventDefinitionRef]
}

type AddMaterialEventRulesetPayload {
  materialEventRuleset(filter: MaterialEventRulesetFilter, order: MaterialEventRulesetOrder, first: Int, offset: Int): [MaterialEventRuleset]
  numUids: Int
}

input AddMaterialLotInput {
  isActive: Boolean
  code: String!
  description: String
}

type AddMaterialLotPayload {
  materialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot]
  numUids: Int
}

input AddMaterialSpecificationInput {
  isActive: Boolean
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  jobOrder: JobOrderRef
  operationsSegment: OperationsSegmentRef
  billOfMaterial: BillOfMaterialRef
  material: MaterialDefinitionRef
  materialClass: MaterialClassRef
  description: String
  materialUse: MaterialUse!
  isTracked: Boolean
  quantity: Float
  uom: UnitOfMeasureRef
}

type AddMaterialSpecificationPayload {
  materialSpecification(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
  numUids: Int
}

input AddMaterialStateModelInput {
  isActive: Boolean
  name: String!
  states: [MaterialStateTransitionRef!]!
  inventoryHandlingRules: [InventoryHandlingRuleRef]
}

type AddMaterialStateModelPayload {
  materialStateModel(filter: MaterialStateModelFilter, order: MaterialStateModelOrder, first: Int, offset: Int): [MaterialStateModel]
  numUids: Int
}

input AddMaterialStateTransitionInput {
  status: MaterialStatusRef!
  to: [MaterialStatusRef]
  canReceive: Boolean
  canPack: Boolean
}

type AddMaterialStateTransitionPayload {
  materialStateTransition(filter: MaterialStateTransitionFilter, first: Int, offset: Int): [MaterialStateTransition]
  numUids: Int
}

input AddMaterialStatusInput {
  isActive: Boolean
  code: String!
}

type AddMaterialStatusPayload {
  materialStatus(filter: MaterialStatusFilter, order: MaterialStatusOrder, first: Int, offset: Int): [MaterialStatus]
  numUids: Int
}

input AddMaterialSubLotInput {
  isActive: Boolean
  code: String!
  material: MaterialDefinitionRef!
  description: String
  status: MaterialStatusRef!
  carrier: CarrierRef
  storageLocation: EquipmentRef
  quantity: String
  dataType: DataType
  unitOfMeasure: UnitOfMeasureRef
  properties: [PropertyRef]
  events: [InventoryTransactionRef]
}

type AddMaterialSubLotPayload {
  materialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
  numUids: Int
}

input AddMaterialUnitInput {
  isActive: Boolean
  serialNumber: String!
  material: MaterialDefinitionRef!
  properties: [PropertyRef]
  events: [InventoryTransactionRef]
}

type AddMaterialUnitPayload {
  materialUnit(filter: MaterialUnitFilter, order: MaterialUnitOrder, first: Int, offset: Int): [MaterialUnit]
  numUids: Int
}

input AddMenuInput {
  label: String!
  access: [RoleRef!]!
  parent: MenuRef
  children: [MenuRef!]
  menuPage: String
  icon: String
  isSection: Boolean!
  isPage: Boolean!
  orderNumber: Int
}

type AddMenuPayload {
  menu(filter: MenuFilter, order: MenuOrder, first: Int, offset: Int): [Menu]
  numUids: Int
}

input AddOperationsDefinitionInput {
  isActive: Boolean
  name: String!
  material: MaterialDefinitionRef
  version: String
  description: String
  operationsType: WorkType!
  hierarchyScope: String
  billOfMaterial: BillOfMaterialRef
  segments: [OperationsSegmentRef]
}

type AddOperationsDefinitionPayload {
  operationsDefinition(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition]
  numUids: Int
}

input AddOperationsRequestInput {
  isActive: Boolean
  code: String!
  operationsType: WorkType!
  plannedStartDateTime: DateTime
  plannedEndDateTime: DateTime
  priority: String
  operationsDefinition: OperationsDefinitionRef!
  requestState: RequestStateRef!
  quantity: Float!
  quantityUoM: UnitOfMeasureRef!
  jobOrders: [JobOrderRef]
}

type AddOperationsRequestPayload {
  operationsRequest(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest]
  numUids: Int
}

input AddOperationsSegmentInput {
  isActive: Boolean
  name: String!
  version: String
  type: SegmentType
  uiComponent: String
  description: String
  parent: OperationsSegmentRef
  children: [OperationsSegmentRef]
  workType: WorkType
  workDefinitionType: String
  duration: Float
  glAccountWIP: String
  glAccountWIPInvoice: String
  glAccountFixedOverhead: String
  glAccountVariableOverhead: String
  glAccountDirectLabour: String
  invoiceSettings: [SegmentInvoiceSettingRef]
  costAmountFixedOverhead: Float
  costDriverFixedOverhead: CostDriver
  costAmountVariableOverhead: Float
  costAmountDirectLabourRate: Float
  durationUoM: UnitOfMeasureRef
  orderStartRuleset: OrderStartRulesetRef
  materialSpecifications: [MaterialSpecificationRef]
  materialEventRuleset: MaterialEventRulesetRef
  equipmentSpecifications: [EquipmentSpecificationRef]
  stateEventRuleset: StateEventRulesetRef
  personnelSpecifications: [PersonnelSpecificationRef]
  hierarchyScope: String
  inflows: [SegmentDependencyRef]
  outflows: [SegmentDependencyRef]
  operationsDefinition: OperationsDefinitionRef
  jobOrders: [JobOrderRef]
  mpmPlanRate: Float
  mpmIdealSetupTime: Float
  mpmIdealChangeoverTime: Float
  mpmEnableSmartChangeover: Boolean
  mpmChangeoverFamily: String
  mpmThresholdRunRate: Float
  mpmThresholdRunDuration: Float
  mpmThresholdSlowRate: Float
  mpmThresholdSlowDuration: Float
  mpmThresholdMicrostopDuration: Float
  mpmEnableAutoIdent: Boolean
  mpmAutoIdentMatchCode: PropertyRef
  positionX: Int
  positionY: Int
}

type AddOperationsSegmentPayload {
  operationsSegment(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment]
  numUids: Int
}

input AddOrderInput {
  isActive: Boolean
  orderType: OrderType!
  customerOrderNumber: String
  customerReference: String
  deliveryTerms: IncoTerms
  status: OrderStatus!
  shipFromPartner: PartnerRef
  shipToPartner: PartnerRef
  invoiceFromPartner: PartnerRef
  invoiceToPartner: PartnerRef
  warehouse: EquipmentRef
  lines: [OrderLineRef]
  shipments: [ShipmentRef]
  notes: String
  createdDateTime: DateTime
}

input AddOrderLineInput {
  isActive: Boolean
  order: OrderRef
  orderLineNumber: Int!
  material: MaterialDefinitionRef!
  quantity: Int!
  defectiveSerialNumbers: String
  isReturn: Boolean
  workflowInstance: WorkflowInstanceRef
}

type AddOrderLinePayload {
  orderLine(filter: OrderLineFilter, order: OrderLineOrder, first: Int, offset: Int): [OrderLine]
  numUids: Int
}

type AddOrderPayload {
  order(filter: OrderFilter, order: OrderOrder, first: Int, offset: Int): [Order]
  numUids: Int
}

input AddOrderStartRulesetInput {
  name: String!
  segment: OperationsSegmentRef
  eventDefs: [EventDefinitionRef]
}

type AddOrderStartRulesetPayload {
  orderStartRuleset(filter: OrderStartRulesetFilter, order: OrderStartRulesetOrder, first: Int, offset: Int): [OrderStartRuleset]
  numUids: Int
}

input AddPartnerInput {
  isActive: Boolean
  companyCode: String!
  name: String
  vatNumber: String
  registrationNumber: String
  contactName: String
  contactEmail: String
  contactPhone: String
  shippingAddress: AddressRef
  billingAddress: AddressRef
  isMerchant: Boolean
  isRepairer: Boolean
  isSupplier: Boolean
  isTransport: Boolean
  isCustomer: Boolean
  isInventoryOwner: Boolean
  carriers: [CarrierRef]
  fromOrders: [OrderRef]
  toOrders: [OrderRef]
}

type AddPartnerPayload {
  partner(filter: PartnerFilter, order: PartnerOrder, first: Int, offset: Int): [Partner]
  numUids: Int
}

input AddPayloadFieldDefinitionInput {
  isActive: Boolean
  name: String!
  expression: String!
  fieldType: PayloadFieldType
}

type AddPayloadFieldDefinitionPayload {
  payloadFieldDefinition(filter: PayloadFieldDefinitionFilter, order: PayloadFieldDefinitionOrder, first: Int, offset: Int): [PayloadFieldDefinition]
  numUids: Int
}

input AddPersonInput {
  isActive: Boolean
  name: String!
  description: String
  properties: [PropertyRef]
  memberOf: [PersonnelClassRef]
}

input AddPersonnelClassInput {
  isActive: Boolean
  name: String!
  description: String
  properties: [PropertyRef]
  persons: [PersonRef]
  isTestedBy: [TestSpecificationRef]
}

type AddPersonnelClassPayload {
  personnelClass(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass]
  numUids: Int
}

input AddPersonnelSpecificationInput {
  isActive: Boolean
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  jobOrder: JobOrderRef
  operationsSegment: OperationsSegmentRef
  person: PersonRef
  personnelClass: PersonnelClassRef
  description: String
  personnelUse: String
  quantity: Float
  uom: UnitOfMeasureRef
}

type AddPersonnelSpecificationPayload {
  personnelSpecification(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification]
  numUids: Int
}

type AddPersonPayload {
  person(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
  numUids: Int
}

input AddPropertyInput {
  isActive: Boolean
  type: PropertyType
  name: String!
  description: String!
  dataType: DataType
  definedBy: PropertyRef
  address: String
  expression: String
  value: String
  unitOfMeasure: UnitOfMeasureRef
  storeHistory: Boolean
  isTestedBy: [TestSpecificationRef]
  equipment: EquipmentRef
  equipmentClass: EquipmentClassRef
  propertyOverrides: [EquipmentPropertyOverrideRef]
  propertyNameAliases: [PropertyNameAliasRef]
}

input AddPropertyNameAliasInput {
  property: PropertyRef!
  equipment: EquipmentRef!
  alias: String!
  system: String!
}

type AddPropertyNameAliasPayload {
  propertyNameAlias(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias]
  numUids: Int
}

type AddPropertyPayload {
  property(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property]
  numUids: Int
}

input AddPropertyValueAliasInput {
  property: PropertyRef!
  value: String!
  alias: String!
  system: String!
}

type AddPropertyValueAliasPayload {
  propertyValueAlias(filter: PropertyValueAliasFilter, order: PropertyValueAliasOrder, first: Int, offset: Int): [PropertyValueAlias]
  numUids: Int
}

input AddQuantityLogInput {
  isActive: Boolean
  jobResponse: JobResponseRef!
  equipment: EquipmentRef
  type: MaterialUse!
  timestamp: DateTime
  quantity: Float!
  reasonCode: String
  reasonText: String
  comments: String
}

type AddQuantityLogPayload {
  quantityLog(filter: QuantityLogFilter, order: QuantityLogOrder, first: Int, offset: Int): [QuantityLog]
  numUids: Int
}

input AddReasonCategoryInput {
  isActive: Boolean
  reason: [ReasonRef]
  code: String!
  timeCategory: TimeCategory!
}

type AddReasonCategoryPayload {
  reasonCategory(filter: ReasonCategoryFilter, order: ReasonCategoryOrder, first: Int, offset: Int): [ReasonCategory]
  numUids: Int
}

input AddReasonInput {
  isActive: Boolean
  class: ReasonClass!
  category: ReasonCategoryRef
  label: String!
  text: String!
  erpCode: String!
  standardValue: Float
  valueUoM: UnitOfMeasureRef
  parent: ReasonRef
  children: [ReasonRef]
  equipmentClass: EquipmentClassRef
  equipment: EquipmentRef
  equipmentOverrides: [EquipmentReasonOverrideRef]
}

type AddReasonPayload {
  reason(filter: ReasonFilter, order: ReasonOrder, first: Int, offset: Int): [Reason]
  numUids: Int
}

input AddRequestStateInput {
  isActive: Boolean
  name: String!
  description: String
}

type AddRequestStatePayload {
  requestState(filter: RequestStateFilter, order: RequestStateOrder, first: Int, offset: Int): [RequestState]
  numUids: Int
}

type Address
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  name: String @join__field(graph: CORE)
  street1: String @join__field(graph: CORE)
  street2: String @join__field(graph: CORE)
  number: String @join__field(graph: CORE)
  city: String @join__field(graph: CORE)
  state: String @join__field(graph: CORE)
  postCode: String @join__field(graph: CORE)
  countryCode: String @join__field(graph: CORE)
}

type AddressAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  street1Min: String
  street1Max: String
  street2Min: String
  street2Max: String
  numberMin: String
  numberMax: String
  cityMin: String
  cityMax: String
  stateMin: String
  stateMax: String
  postCodeMin: String
  postCodeMax: String
  countryCodeMin: String
  countryCodeMax: String
}

input AddressFilter {
  id: [ID!]
  isActive: Boolean
  name: StringHashFilter
  has: [AddressHasFilter]
  and: [AddressFilter]
  or: [AddressFilter]
  not: AddressFilter
}

enum AddressHasFilter {
  isActive
  name
  street1
  street2
  number
  city
  state
  postCode
  countryCode
}

input AddressOrder {
  asc: AddressOrderable
  desc: AddressOrderable
  then: AddressOrder
}

enum AddressOrderable {
  name
  street1
  street2
  number
  city
  state
  postCode
  countryCode
}

input AddressPatch {
  isActive: Boolean
  name: String
  street1: String
  street2: String
  number: String
  city: String
  state: String
  postCode: String
  countryCode: String
}

input AddressRef {
  id: ID
  isActive: Boolean
  name: String
  street1: String
  street2: String
  number: String
  city: String
  state: String
  postCode: String
  countryCode: String
}

input AddRoleInput {
  name: String!
  hasMembers: [UserRoleRef]
  hasGrantedRights: [AccessRightRef]
  isActive: Boolean
  workflowNodes: [WorkflowNodeRef]
}

type AddRolePayload {
  role(filter: RoleFilter, order: RoleOrder, first: Int, offset: Int): [Role]
  numUids: Int
}

input AddSegmentDependencyInput {
  isActive: Boolean
  description: String
  from: OperationsSegmentRef!
  to: OperationsSegmentRef!
  dependencyType: DependencyType
  dependencyFactor: Float
  factorUoM: UnitOfMeasureRef
  condition: String
  transitionEventRuleset: TransitionEventRulesetRef
}

type AddSegmentDependencyPayload {
  segmentDependency(filter: SegmentDependencyFilter, order: SegmentDependencyOrder, first: Int, offset: Int): [SegmentDependency]
  numUids: Int
}

input AddSegmentInvoiceSettingInput {
  partner: PartnerRef
  costPerHour: Float
  costPerUnit: Float
}

type AddSegmentInvoiceSettingPayload {
  segmentInvoiceSetting(filter: SegmentInvoiceSettingFilter, order: SegmentInvoiceSettingOrder, first: Int, offset: Int): [SegmentInvoiceSetting]
  numUids: Int
}

input AddShipmentInput {
  isActive: Boolean
  type: ShipmentType!
  transportCompany: TransportCompany
  transportCompanyShipmentId: String
  transportCompanyProductCode: String
  reference: String
  items: [ShipmentItemRef]
  customerReference: String
  emailTrackingEnabled: Boolean
  from: AddressRef
  to: AddressRef
  order: OrderRef!
  warehouse: EquipmentRef!
  consignmentNumber: String
  properties: [PropertyRef]
  dateTimeReceivedUTC: DateTime
  dateTimeDeliveredUTC: DateTime
  dateTimePackedUTC: DateTime
  dateTimeCreatedUTC: DateTime
  delivered: DeliveryRef
}

input AddShipmentItemInput {
  isActive: Boolean
  transportCompanyItemReference: String
  transportCompanyItemId: String
  trackingDetailsArticleId: String
  trackingDetailsBarcodeId: String
  trackingDetailsConsignmentId: String
  shipment: ShipmentRef
  status: ShipmentItemStatus!
  material: MaterialDefinitionRef
  transactions: [InventoryTransactionRef]
  plannedQuantity: Int
  isParcel: Boolean
  bin: EquipmentRef
  box: BoxRef
  weightKg: Float
}

type AddShipmentItemPayload {
  shipmentItem(filter: ShipmentItemFilter, order: ShipmentItemOrder, first: Int, offset: Int): [ShipmentItem]
  numUids: Int
}

type AddShipmentPayload {
  shipment(filter: ShipmentFilter, order: ShipmentOrder, first: Int, offset: Int): [Shipment]
  numUids: Int
}

input AddStateEventRulesetInput {
  name: String!
  triggerWhen: [RulesetTriggerOption]
  segment: OperationsSegmentRef
  targetState: String!
  eventDefs: [EventDefinitionRef]
}

type AddStateEventRulesetPayload {
  stateEventRuleset(filter: StateEventRulesetFilter, order: StateEventRulesetOrder, first: Int, offset: Int): [StateEventRuleset]
  numUids: Int
}

input AddTestResultInput {
  isActive: Boolean
  description: String
  result: String
  uom: UnitOfMeasureRef
  testDateTime: DateTime
}

type AddTestResultPayload {
  testResult(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
  numUids: Int
}

input AddTestSpecificationInput {
  isActive: Boolean
  description: String
  version: String
}

type AddTestSpecificationPayload {
  testSpecification(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  numUids: Int
}

input AddTransitionEventRulesetInput {
  name: String!
  segmentDependency: SegmentDependencyRef
  eventDefs: [EventDefinitionRef]
}

type AddTransitionEventRulesetPayload {
  transitionEventRuleset(filter: TransitionEventRulesetFilter, order: TransitionEventRulesetOrder, first: Int, offset: Int): [TransitionEventRuleset]
  numUids: Int
}

input AddUnitOfMeasureConversionInput {
  isActive: Boolean
  fromUoM: UnitOfMeasureRef!
  toUoM: UnitOfMeasureRef!
  numerator: Float!
  denominator: Float!
  material: MaterialDefinitionRef!
}

type AddUnitOfMeasureConversionPayload {
  unitOfMeasureConversion(filter: UnitOfMeasureConversionFilter, order: UnitOfMeasureConversionOrder, first: Int, offset: Int): [UnitOfMeasureConversion]
  numUids: Int
}

input AddUnitOfMeasureInput {
  isActive: Boolean
  code: String!
  dataType: DataType
}

type AddUnitOfMeasurePayload {
  unitOfMeasure(filter: UnitOfMeasureFilter, order: UnitOfMeasureOrder, first: Int, offset: Int): [UnitOfMeasure]
  numUids: Int
}

input AddUserInput {
  username: String!
  name: String
  isType: UserType!
  hasRole: [UserRoleRef]
  tasks: [WorkflowNodeInstanceRef]
  isActive: Boolean
}

type AddUserPayload {
  user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  numUids: Int
}

input AddUserRoleInput {
  role: RoleRef!
  user: UserRef!
  responsibilities: [EquipmentRef]!
  isActive: Boolean
}

type AddUserRolePayload {
  userRole(filter: UserRoleFilter, first: Int, offset: Int): [UserRole]
  numUids: Int
}

input AddWorkCalendarDefinitionEntryInput {
  isActive: Boolean
  description: String
  hierarchyScope: EquipmentRef
  freq: Frequency!
  startDateTime: DateTime!
  endDateTime: DateTime
  count: Int
  interval: Int
  wkst: Weekday
  byWeekDay: [Weekday]
  byMonth: [Int]
  bySetPos: [Int]
  byMonthDay: [Int]
  byYearDay: [Int]
  byWeekNo: [Int]
  byHour: [Int]
  byMinute: [Int]
  bySecond: [Int]
  duration: String
  entryType: WorkCalendarEntryType!
  properties: [PropertyRef]
  calendarEntries: [WorkCalendarEntryRef]
  workCalendar: WorkCalendarRef
}

type AddWorkCalendarDefinitionEntryPayload {
  workCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter, order: WorkCalendarDefinitionEntryOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntry]
  numUids: Int
}

input AddWorkCalendarEntryInput {
  isActive: Boolean
  description: String
  definition: WorkCalendarDefinitionEntryRef
  hierarchyScope: EquipmentRef
  startDateTime: DateTime!
  finishDateTime: DateTime!
  entryType: WorkCalendarEntryType!
  properties: [PropertyRef]
  workCalendar: WorkCalendarRef
}

type AddWorkCalendarEntryPayload {
  workCalendarEntry(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry]
  numUids: Int
}

input AddWorkCalendarInput {
  isActive: Boolean
  name: String!
  description: String
  definition: [WorkCalendarDefinitionEntryRef]
  entries: [WorkCalendarEntryRef]
  equipment: [EquipmentRef]
}

type AddWorkCalendarPayload {
  workCalendar(filter: WorkCalendarFilter, order: WorkCalendarOrder, first: Int, offset: Int): [WorkCalendar]
  numUids: Int
}

input AddWorkDirectiveInput {
  name: String!
  version: String
  description: String
  parent: WorkDirectiveRef
  children: [WorkDirectiveRef]
  workType: WorkType
  workDefinitionType: String
  duration: Float
  durationUoM: UnitOfMeasureRef
  materialSpecifications: [MaterialSpecificationRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  isActive: Boolean
  jobOrders: [JobOrderRef]
  jobResponses: [JobResponseRef]
  workMaster: WorkMasterRef
}

type AddWorkDirectivePayload {
  workDirective(filter: WorkDirectiveFilter, order: WorkDirectiveOrder, first: Int, offset: Int): [WorkDirective]
  numUids: Int
}

input AddWorkflowConnectionInput {
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  connectionType: WorkflowConnectionTypeRef!
  workflowSpecification: WorkflowSpecificationRef!
  from: WorkflowNodeRef!
  to: WorkflowNodeRef!
  condition: String
  properties: [WorkflowPropertyRef]
}

type AddWorkflowConnectionPayload {
  workflowConnection(filter: WorkflowConnectionFilter, order: WorkflowConnectionOrder, first: Int, offset: Int): [WorkflowConnection]
  numUids: Int
}

input AddWorkflowConnectionTypeInput {
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  name: String!
  description: String!
  connections: [WorkflowConnectionRef]
  properties: [WorkflowPropertyRef]
}

type AddWorkflowConnectionTypePayload {
  workflowConnectionType(filter: WorkflowConnectionTypeFilter, order: WorkflowConnectionTypeOrder, first: Int, offset: Int): [WorkflowConnectionType]
  numUids: Int
}

input AddWorkflowInstanceInput {
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  status: WorkflowNodeStatus
  workflowSpecification: WorkflowSpecificationRef
  equipment: EquipmentRef
  parent: WorkflowInstanceRef
  children: [WorkflowInstanceRef]
  nodeInstances: [WorkflowNodeInstanceRef]
  propertyInstances: [WorkflowPropertyInstanceRef]
  properties: [WorkflowInstancePropertyRef]
  orderLines: [OrderLineRef]
}

type AddWorkflowInstancePayload {
  workflowInstance(filter: WorkflowInstanceFilter, order: WorkflowInstanceOrder, first: Int, offset: Int): [WorkflowInstance]
  numUids: Int
}

input AddWorkflowInstancePropertyInput {
  key: String!
  workflowInstance: WorkflowInstanceRef
  name: String!
  values: [WorkflowPropertyValueRef]
}

type AddWorkflowInstancePropertyPayload {
  workflowInstanceProperty(filter: WorkflowInstancePropertyFilter, order: WorkflowInstancePropertyOrder, first: Int, offset: Int): [WorkflowInstanceProperty]
  numUids: Int
}

input AddWorkflowNodeEventInput {
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  nodeInstance: WorkflowNodeInstanceRef
  previous: WorkflowNodeEventRef
  next: WorkflowNodeEventRef
  status: WorkflowNodeStatus
  isProcessed: Boolean
  value: String
}

type AddWorkflowNodeEventPayload {
  workflowNodeEvent(filter: WorkflowNodeEventFilter, order: WorkflowNodeEventOrder, first: Int, offset: Int): [WorkflowNodeEvent]
  numUids: Int
}

input AddWorkflowNodeInput {
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  name: String!
  description: String!
  uiComponent: String
  form: FormRef
  role: RoleRef
  nodeType: WorkflowNodeTypeRef!
  inflows: [WorkflowConnectionRef]
  outflows: [WorkflowConnectionRef]
  workflowSpecification: WorkflowSpecificationRef!
  properties: [WorkflowPropertyRef]
  nodeInstances: [WorkflowNodeInstanceRef]
  positionX: Int
  positionY: Int
  width: Int
  height: Int
}

input AddWorkflowNodeInstanceInput {
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  status: WorkflowNodeStatus
  assignedUser: UserRef
  workflowInstance: WorkflowInstanceRef!
  node: WorkflowNodeRef!
  events: [WorkflowNodeEventRef]
}

type AddWorkflowNodeInstancePayload {
  workflowNodeInstance(filter: WorkflowNodeInstanceFilter, order: WorkflowNodeInstanceOrder, first: Int, offset: Int): [WorkflowNodeInstance]
  numUids: Int
}

type AddWorkflowNodePayload {
  workflowNode(filter: WorkflowNodeFilter, order: WorkflowNodeOrder, first: Int, offset: Int): [WorkflowNode]
  numUids: Int
}

input AddWorkflowNodeTypeInput {
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  name: String!
  description: String!
  nodeClass: WorkflowNodeClass!
  nodes: [WorkflowNodeRef]
  properties: [WorkflowPropertyRef]
}

type AddWorkflowNodeTypePayload {
  workflowNodeType(filter: WorkflowNodeTypeFilter, order: WorkflowNodeTypeOrder, first: Int, offset: Int): [WorkflowNodeType]
  numUids: Int
}

input AddWorkflowPropertyInput {
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  propertyType: WorkflowPropertyType!
  name: String!
  description: String!
  definedBy: WorkflowPropertyRef
  dataType: DataType
  unitOfMeasure: UnitOfMeasureRef
  value: String
  nodeType: WorkflowNodeTypeRef
  node: WorkflowNodeRef
  connectionType: WorkflowConnectionTypeRef
  connection: WorkflowConnectionRef
  instances: [WorkflowPropertyInstanceRef]
}

input AddWorkflowPropertyInstanceInput {
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  workflowInstance: WorkflowInstanceRef
  workflowProperty: WorkflowPropertyRef
  values: [WorkflowPropertyValueRef]
}

type AddWorkflowPropertyInstancePayload {
  workflowPropertyInstance(filter: WorkflowPropertyInstanceFilter, order: WorkflowPropertyInstanceOrder, first: Int, offset: Int): [WorkflowPropertyInstance]
  numUids: Int
}

type AddWorkflowPropertyPayload {
  workflowProperty(filter: WorkflowPropertyFilter, order: WorkflowPropertyOrder, first: Int, offset: Int): [WorkflowProperty]
  numUids: Int
}

input AddWorkflowPropertyValueInput {
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  propertyInstance: WorkflowPropertyInstanceRef!
  value: String
  previous: WorkflowPropertyValueRef
  next: WorkflowPropertyValueRef
}

type AddWorkflowPropertyValuePayload {
  workflowPropertyValue(filter: WorkflowPropertyValueFilter, order: WorkflowPropertyValueOrder, first: Int, offset: Int): [WorkflowPropertyValue]
  numUids: Int
}

input AddWorkflowSpecificationInput {
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  name: String!
  description: String!
  nodes: [WorkflowNodeRef]
  connections: [WorkflowConnectionRef]
  instances: [WorkflowInstanceRef]
}

type AddWorkflowSpecificationPayload {
  workflowSpecification(filter: WorkflowSpecificationFilter, order: WorkflowSpecificationOrder, first: Int, offset: Int): [WorkflowSpecification]
  numUids: Int
}

input AddWorkMasterInput {
  isActive: Boolean
  name: String!
  version: String
  description: String
  parent: WorkMasterRef
  children: [WorkMasterRef]
  workType: WorkType
  workDefinitionType: String
  materialSpecifications: [MaterialSpecificationRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  duration: Float
  durationUoM: UnitOfMeasureRef
  jobOrders: [JobOrderRef]
  workDirectives: [WorkDirectiveRef]
}

type AddWorkMasterPayload {
  workMaster(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster]
  numUids: Int
}

input AllEventsInTimeRangeFilter {
  From: DateTime!
  To: DateTime
}

type ASNStaging
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
  @join__type(graph: PROFILES, key: "id")
{
  id: ID! @join__field(graph: CORE)
  orderNumber: String! @join__field(graph: CORE)
  materialCode: String! @join__field(graph: CORE)
  serialNumber: String @join__field(graph: CORE)
  quantity: Int! @join__field(graph: CORE)
  isValid: Boolean @join__field(graph: CORE)
  errorDescription: String @join__field(graph: CORE)
  workflowInstanceId: String! @join__field(graph: CORE)
}

type ASNStagingAggregateResult {
  count: Int
  orderNumberMin: String
  orderNumberMax: String
  materialCodeMin: String
  materialCodeMax: String
  serialNumberMin: String
  serialNumberMax: String
  quantityMin: Int
  quantityMax: Int
  quantitySum: Int
  quantityAvg: Float
  errorDescriptionMin: String
  errorDescriptionMax: String
  workflowInstanceIdMin: String
  workflowInstanceIdMax: String
}

input ASNStagingFilter {
  id: [ID!]
  orderNumber: StringFullTextFilter
  materialCode: StringFullTextFilter
  serialNumber: StringFullTextFilter
  workflowInstanceId: StringHashFilter
  has: [ASNStagingHasFilter]
  and: [ASNStagingFilter]
  or: [ASNStagingFilter]
  not: ASNStagingFilter
}

enum ASNStagingHasFilter {
  orderNumber
  materialCode
  serialNumber
  quantity
  isValid
  errorDescription
  workflowInstanceId
}

input ASNStagingOrder {
  asc: ASNStagingOrderable
  desc: ASNStagingOrderable
  then: ASNStagingOrder
}

enum ASNStagingOrderable {
  orderNumber
  materialCode
  serialNumber
  quantity
  errorDescription
  workflowInstanceId
}

input ASNStagingPatch {
  orderNumber: String
  materialCode: String
  serialNumber: String
  quantity: Int
  isValid: Boolean
  errorDescription: String
  workflowInstanceId: String
}

input ASNStagingRef {
  id: ID
  orderNumber: String
  materialCode: String
  serialNumber: String
  quantity: Int
  isValid: Boolean
  errorDescription: String
  workflowInstanceId: String
}

input AuthRule {
  and: [AuthRule]
  or: [AuthRule]
  not: AuthRule
  rule: String
}

type BillOfMaterial
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  version: String! @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
  materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @join__field(graph: CORE)
  operationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinition @join__field(graph: CORE)
  materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult @join__field(graph: CORE)
}

type BillOfMaterialAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  versionMin: String
  versionMax: String
  descriptionMin: String
  descriptionMax: String
}

input BillOfMaterialFilter {
  id: [ID!]
  isActive: Boolean
  name: StringHashFilter
  has: [BillOfMaterialHasFilter]
  and: [BillOfMaterialFilter]
  or: [BillOfMaterialFilter]
  not: BillOfMaterialFilter
}

enum BillOfMaterialHasFilter {
  isActive
  name
  version
  description
  materialSpecifications
  operationsDefinition
}

input BillOfMaterialOrder {
  asc: BillOfMaterialOrderable
  desc: BillOfMaterialOrderable
  then: BillOfMaterialOrder
}

enum BillOfMaterialOrderable {
  name
  version
  description
}

input BillOfMaterialPatch {
  isActive: Boolean
  version: String
  description: String
  materialSpecifications: [MaterialSpecificationRef]
  operationsDefinition: OperationsDefinitionRef
}

input BillOfMaterialRef {
  id: ID
  isActive: Boolean
  name: String
  version: String
  description: String
  materialSpecifications: [MaterialSpecificationRef]
  operationsDefinition: OperationsDefinitionRef
}

type Box {
  id: ID!
  name: String
  sizeHeightCm: Int
  sizeWidthCm: Int
  sizeDepthCm: Int
}

type BoxAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  sizeHeightCmMin: Int
  sizeHeightCmMax: Int
  sizeHeightCmSum: Int
  sizeHeightCmAvg: Float
  sizeWidthCmMin: Int
  sizeWidthCmMax: Int
  sizeWidthCmSum: Int
  sizeWidthCmAvg: Float
  sizeDepthCmMin: Int
  sizeDepthCmMax: Int
  sizeDepthCmSum: Int
  sizeDepthCmAvg: Float
}

input BoxFilter {
  id: [ID!]
  has: [BoxHasFilter]
  and: [BoxFilter]
  or: [BoxFilter]
  not: BoxFilter
}

enum BoxHasFilter {
  name
  sizeHeightCm
  sizeWidthCm
  sizeDepthCm
}

input BoxOrder {
  asc: BoxOrderable
  desc: BoxOrderable
  then: BoxOrder
}

enum BoxOrderable {
  name
  sizeHeightCm
  sizeWidthCm
  sizeDepthCm
}

input BoxPatch {
  name: String
  sizeHeightCm: Int
  sizeWidthCm: Int
  sizeDepthCm: Int
}

input BoxRef {
  id: ID
  name: String
  sizeHeightCm: Int
  sizeWidthCm: Int
  sizeDepthCm: Int
}

type Carrier
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
  @join__type(graph: PROFILES, key: "id")
{
  id: ID! @join__field(graph: CORE)
  code: String! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  storageLocation(filter: EquipmentFilter): Equipment! @join__field(graph: CORE)
  status(filter: MaterialStatusFilter): MaterialStatus! @join__field(graph: CORE)
  barcodeImage: String @join__field(graph: CORE)
  owner(filter: PartnerFilter): Partner @join__field(graph: CORE)
  subLots(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @join__field(graph: CORE)
  events(filter: InventoryTransactionFilter, order: InventoryTransactionOrder, first: Int, offset: Int): [InventoryTransaction] @join__field(graph: CORE)
  subLotsAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult @join__field(graph: CORE)
  eventsAggregate(filter: InventoryTransactionFilter): InventoryTransactionAggregateResult @join__field(graph: CORE)
  contents: [CarrierContents] @join__field(graph: PROFILES)
  units: [CarrierUnits] @join__field(graph: PROFILES)
}

type CarrierAggregateResult {
  count: Int
  codeMin: String
  codeMax: String
  barcodeImageMin: String
  barcodeImageMax: String
}

type CarrierContents {
  material: MaterialDefinition!
  owner: Partner
  quantity: Float
}

input CarrierFilter {
  id: [ID!]
  code: StringHashFilter
  isActive: Boolean
  has: [CarrierHasFilter]
  and: [CarrierFilter]
  or: [CarrierFilter]
  not: CarrierFilter
}

enum CarrierHasFilter {
  code
  isActive
  storageLocation
  status
  barcodeImage
  owner
  subLots
  events
}

input CarrierOrder {
  asc: CarrierOrderable
  desc: CarrierOrderable
  then: CarrierOrder
}

enum CarrierOrderable {
  code
  barcodeImage
}

input CarrierPatch {
  isActive: Boolean
  storageLocation: EquipmentRef
  status: MaterialStatusRef
  barcodeImage: String
  owner: PartnerRef
  subLots: [MaterialSubLotRef]
  events: [InventoryTransactionRef]
}

input CarrierRef {
  id: ID
  code: String
  isActive: Boolean
  storageLocation: EquipmentRef
  status: MaterialStatusRef
  barcodeImage: String
  owner: PartnerRef
  subLots: [MaterialSubLotRef]
  events: [InventoryTransactionRef]
}

type CarrierUnits {
  material: MaterialDefinition!
  materialUnit: MaterialUnit
  owner: Partner
}

input ConfirmASNInput {
  id: ID!
  orderNumber: String!
  materialCode: String!
  serialNumber: String
  quantity: Int!
  isValid: Boolean
  errorDescription: String
  workflowInstanceId: String!
}

input ContainsFilter {
  point: PointRef
  polygon: PolygonRef
}

enum CostDriver {
  PER_HOUR
  PER_UNIT
}

input CustomHTTP {
  url: String!
  method: HTTPMethod!
  body: String
  graphql: String
  mode: Mode
  forwardHeaders: [String!]
  secretHeaders: [String!]
  introspectionHeaders: [String!]
  skipIntrospection: Boolean
}

type DashboardConfig {
  id: ID!
  name: String!
  isActive: Boolean
  panels(filter: DashboardPanelConfigFilter, order: DashboardPanelConfigOrder, first: Int, offset: Int): [DashboardPanelConfig]
  panelsAggregate(filter: DashboardPanelConfigFilter): DashboardPanelConfigAggregateResult
}

type DashboardConfigAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
}

input DashboardConfigFilter {
  id: [ID!]
  name: StringHashFilter
  isActive: Boolean
  has: [DashboardConfigHasFilter]
  and: [DashboardConfigFilter]
  or: [DashboardConfigFilter]
  not: DashboardConfigFilter
}

enum DashboardConfigHasFilter {
  name
  isActive
  panels
}

input DashboardConfigOrder {
  asc: DashboardConfigOrderable
  desc: DashboardConfigOrderable
  then: DashboardConfigOrder
}

enum DashboardConfigOrderable {
  name
}

input DashboardConfigPatch {
  isActive: Boolean
  panels: [DashboardPanelConfigRef]
}

input DashboardConfigRef {
  id: ID
  name: String
  isActive: Boolean
  panels: [DashboardPanelConfigRef]
}

type DashboardPanelConfig {
  id: ID!
  widgetName: String
  x: Int
  y: Int
  w: Int
  h: Int
}

type DashboardPanelConfigAggregateResult {
  count: Int
  widgetNameMin: String
  widgetNameMax: String
  xMin: Int
  xMax: Int
  xSum: Int
  xAvg: Float
  yMin: Int
  yMax: Int
  ySum: Int
  yAvg: Float
  wMin: Int
  wMax: Int
  wSum: Int
  wAvg: Float
  hMin: Int
  hMax: Int
  hSum: Int
  hAvg: Float
}

input DashboardPanelConfigFilter {
  id: [ID!]
  widgetName: StringHashFilter
  has: [DashboardPanelConfigHasFilter]
  and: [DashboardPanelConfigFilter]
  or: [DashboardPanelConfigFilter]
  not: DashboardPanelConfigFilter
}

enum DashboardPanelConfigHasFilter {
  widgetName
  x
  y
  w
  h
}

input DashboardPanelConfigOrder {
  asc: DashboardPanelConfigOrderable
  desc: DashboardPanelConfigOrderable
  then: DashboardPanelConfigOrder
}

enum DashboardPanelConfigOrderable {
  widgetName
  x
  y
  w
  h
}

input DashboardPanelConfigPatch {
  widgetName: String
  x: Int
  y: Int
  w: Int
  h: Int
}

input DashboardPanelConfigRef {
  id: ID
  widgetName: String
  x: Int
  y: Int
  w: Int
  h: Int
}

type DataError {
  message: String
}

"""
Data Providers are the client libraries that have been implemented in the edge agent.
We need to make these plugins that that the library can be extended easily.
At the moment, MQTT is all we have. We will add OPC-UA next
"""
enum DataProvider {
  MQTT
  OPCUA
}

enum DataType {
  BOOL
  INT
  INT32
  FLOAT64
  FLOAT
  STRING
}

scalar DateTime

input DateTimeFilter {
  eq: DateTime
  in: [DateTime]
  le: DateTime
  lt: DateTime
  ge: DateTime
  gt: DateTime
  between: DateTimeRange
}

input DateTimeRange {
  min: DateTime!
  max: DateTime!
}

type DeleteAccessRightPayload {
  accessRight(filter: AccessRightFilter, first: Int, offset: Int): [AccessRight]
  msg: String
  numUids: Int
}

type DeleteACLPayload {
  aCL(filter: ACLFilter, first: Int, offset: Int): [ACL]
  msg: String
  numUids: Int
}

type DeleteAddressPayload {
  address(filter: AddressFilter, order: AddressOrder, first: Int, offset: Int): [Address]
  msg: String
  numUids: Int
}

type DeleteASNStagingPayload {
  aSNStaging(filter: ASNStagingFilter, order: ASNStagingOrder, first: Int, offset: Int): [ASNStaging]
  msg: String
  numUids: Int
}

type DeleteBillOfMaterialPayload {
  billOfMaterial(filter: BillOfMaterialFilter, order: BillOfMaterialOrder, first: Int, offset: Int): [BillOfMaterial]
  msg: String
  numUids: Int
}

type DeleteBoxPayload {
  box(filter: BoxFilter, order: BoxOrder, first: Int, offset: Int): [Box]
  msg: String
  numUids: Int
}

type DeleteCarrierPayload {
  carrier(filter: CarrierFilter, order: CarrierOrder, first: Int, offset: Int): [Carrier]
  msg: String
  numUids: Int
}

type DeleteDashboardConfigPayload {
  dashboardConfig(filter: DashboardConfigFilter, order: DashboardConfigOrder, first: Int, offset: Int): [DashboardConfig]
  msg: String
  numUids: Int
}

type DeleteDashboardPanelConfigPayload {
  dashboardPanelConfig(filter: DashboardPanelConfigFilter, order: DashboardPanelConfigOrder, first: Int, offset: Int): [DashboardPanelConfig]
  msg: String
  numUids: Int
}

type DeleteDeliveryPayload {
  delivery(filter: DeliveryFilter, order: DeliveryOrder, first: Int, offset: Int): [Delivery]
  msg: String
  numUids: Int
}

type DeleteEquipmentClassPayload {
  equipmentClass(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass]
  msg: String
  numUids: Int
}

type DeleteEquipmentNameAliasPayload {
  equipmentNameAlias(filter: EquipmentNameAliasFilter, order: EquipmentNameAliasOrder, first: Int, offset: Int): [EquipmentNameAlias]
  msg: String
  numUids: Int
}

type DeleteEquipmentPayload {
  equipment(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment]
  msg: String
  numUids: Int
}

type DeleteEquipmentPropertyOverridePayload {
  equipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride]
  msg: String
  numUids: Int
}

type DeleteEquipmentReasonOverridePayload {
  equipmentReasonOverride(filter: EquipmentReasonOverrideFilter, order: EquipmentReasonOverrideOrder, first: Int, offset: Int): [EquipmentReasonOverride]
  msg: String
  numUids: Int
}

type DeleteEquipmentSpecificationPayload {
  equipmentSpecification(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification]
  msg: String
  numUids: Int
}

type DeleteEventDefinitionPayload {
  eventDefinition(filter: EventDefinitionFilter, order: EventDefinitionOrder, first: Int, offset: Int): [EventDefinition]
  msg: String
  numUids: Int
}

type DeleteEventLogPayload {
  eventLog(filter: EventLogFilter, order: EventLogOrder, first: Int, offset: Int): [EventLog]
  msg: String
  numUids: Int
}

type DeleteFormPayload {
  form(filter: FormFilter, order: FormOrder, first: Int, offset: Int): [Form]
  msg: String
  numUids: Int
}

type DeleteGeneralLedgerAccountPayload {
  generalLedgerAccount(filter: GeneralLedgerAccountFilter, order: GeneralLedgerAccountOrder, first: Int, offset: Int): [GeneralLedgerAccount]
  msg: String
  numUids: Int
}

type DeleteInventoryHandlingPolicyPayload {
  inventoryHandlingPolicy(filter: InventoryHandlingPolicyFilter, order: InventoryHandlingPolicyOrder, first: Int, offset: Int): [InventoryHandlingPolicy]
  msg: String
  numUids: Int
}

type DeleteInventoryHandlingRulePayload {
  inventoryHandlingRule(filter: InventoryHandlingRuleFilter, first: Int, offset: Int): [InventoryHandlingRule]
  msg: String
  numUids: Int
}

type DeleteInventoryTransactionPayload {
  inventoryTransaction(filter: InventoryTransactionFilter, order: InventoryTransactionOrder, first: Int, offset: Int): [InventoryTransaction]
  msg: String
  numUids: Int
}

type DeleteJobOrderNotePayload {
  jobOrderNote(filter: JobOrderNoteFilter, order: JobOrderNoteOrder, first: Int, offset: Int): [JobOrderNote]
  msg: String
  numUids: Int
}

type DeleteJobOrderPayload {
  jobOrder(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder]
  msg: String
  numUids: Int
}

type DeleteJobResponsePayload {
  jobResponse(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse]
  msg: String
  numUids: Int
}

type DeleteLibreServicePayload {
  libreService(filter: LibreServiceFilter, order: LibreServiceOrder, first: Int, offset: Int): [LibreService]
  msg: String
  numUids: Int
}

type DeleteMaterialAlternatePayload {
  materialAlternate(filter: MaterialAlternateFilter, order: MaterialAlternateOrder, first: Int, offset: Int): [MaterialAlternate]
  msg: String
  numUids: Int
}

type DeleteMaterialClassPayload {
  materialClass(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass]
  msg: String
  numUids: Int
}

type DeleteMaterialDefinitionPayload {
  materialDefinition(filter: MaterialDefinitionFilter, order: MaterialDefinitionOrder, first: Int, offset: Int): [MaterialDefinition]
  msg: String
  numUids: Int
}

type DeleteMaterialEquipmentPayload {
  materialEquipment(filter: MaterialEquipmentFilter, order: MaterialEquipmentOrder, first: Int, offset: Int): [MaterialEquipment]
  msg: String
  numUids: Int
}

type DeleteMaterialEventRulesetPayload {
  materialEventRuleset(filter: MaterialEventRulesetFilter, order: MaterialEventRulesetOrder, first: Int, offset: Int): [MaterialEventRuleset]
  msg: String
  numUids: Int
}

type DeleteMaterialLotPayload {
  materialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot]
  msg: String
  numUids: Int
}

type DeleteMaterialSpecificationPayload {
  materialSpecification(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
  msg: String
  numUids: Int
}

type DeleteMaterialStateModelPayload {
  materialStateModel(filter: MaterialStateModelFilter, order: MaterialStateModelOrder, first: Int, offset: Int): [MaterialStateModel]
  msg: String
  numUids: Int
}

type DeleteMaterialStateTransitionPayload {
  materialStateTransition(filter: MaterialStateTransitionFilter, first: Int, offset: Int): [MaterialStateTransition]
  msg: String
  numUids: Int
}

type DeleteMaterialStatusPayload {
  materialStatus(filter: MaterialStatusFilter, order: MaterialStatusOrder, first: Int, offset: Int): [MaterialStatus]
  msg: String
  numUids: Int
}

type DeleteMaterialSubLotPayload {
  materialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
  msg: String
  numUids: Int
}

type DeleteMaterialUnitPayload {
  materialUnit(filter: MaterialUnitFilter, order: MaterialUnitOrder, first: Int, offset: Int): [MaterialUnit]
  msg: String
  numUids: Int
}

type DeleteMenuPayload {
  menu(filter: MenuFilter, order: MenuOrder, first: Int, offset: Int): [Menu]
  msg: String
  numUids: Int
}

type DeleteOperationsDefinitionPayload {
  operationsDefinition(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition]
  msg: String
  numUids: Int
}

type DeleteOperationsRequestPayload {
  operationsRequest(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest]
  msg: String
  numUids: Int
}

type DeleteOperationsSegmentPayload {
  operationsSegment(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment]
  msg: String
  numUids: Int
}

type DeleteOrderLinePayload {
  orderLine(filter: OrderLineFilter, order: OrderLineOrder, first: Int, offset: Int): [OrderLine]
  msg: String
  numUids: Int
}

type DeleteOrderPayload {
  order(filter: OrderFilter, order: OrderOrder, first: Int, offset: Int): [Order]
  msg: String
  numUids: Int
}

type DeleteOrderStartRulesetPayload {
  orderStartRuleset(filter: OrderStartRulesetFilter, order: OrderStartRulesetOrder, first: Int, offset: Int): [OrderStartRuleset]
  msg: String
  numUids: Int
}

type DeletePartnerPayload {
  partner(filter: PartnerFilter, order: PartnerOrder, first: Int, offset: Int): [Partner]
  msg: String
  numUids: Int
}

type DeletePayloadFieldDefinitionPayload {
  payloadFieldDefinition(filter: PayloadFieldDefinitionFilter, order: PayloadFieldDefinitionOrder, first: Int, offset: Int): [PayloadFieldDefinition]
  msg: String
  numUids: Int
}

type DeletePersonnelClassPayload {
  personnelClass(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass]
  msg: String
  numUids: Int
}

type DeletePersonnelSpecificationPayload {
  personnelSpecification(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification]
  msg: String
  numUids: Int
}

type DeletePersonPayload {
  person(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
  msg: String
  numUids: Int
}

type DeletePropertyNameAliasPayload {
  propertyNameAlias(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias]
  msg: String
  numUids: Int
}

type DeletePropertyPayload {
  property(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property]
  msg: String
  numUids: Int
}

type DeletePropertyValueAliasPayload {
  propertyValueAlias(filter: PropertyValueAliasFilter, order: PropertyValueAliasOrder, first: Int, offset: Int): [PropertyValueAlias]
  msg: String
  numUids: Int
}

type DeleteQuantityLogPayload {
  quantityLog(filter: QuantityLogFilter, order: QuantityLogOrder, first: Int, offset: Int): [QuantityLog]
  msg: String
  numUids: Int
}

type DeleteReasonCategoryPayload {
  reasonCategory(filter: ReasonCategoryFilter, order: ReasonCategoryOrder, first: Int, offset: Int): [ReasonCategory]
  msg: String
  numUids: Int
}

type DeleteReasonPayload {
  reason(filter: ReasonFilter, order: ReasonOrder, first: Int, offset: Int): [Reason]
  msg: String
  numUids: Int
}

type DeleteRequestStatePayload {
  requestState(filter: RequestStateFilter, order: RequestStateOrder, first: Int, offset: Int): [RequestState]
  msg: String
  numUids: Int
}

type DeleteRolePayload {
  role(filter: RoleFilter, order: RoleOrder, first: Int, offset: Int): [Role]
  msg: String
  numUids: Int
}

type DeleteSegmentDependencyPayload {
  segmentDependency(filter: SegmentDependencyFilter, order: SegmentDependencyOrder, first: Int, offset: Int): [SegmentDependency]
  msg: String
  numUids: Int
}

type DeleteSegmentInvoiceSettingPayload {
  segmentInvoiceSetting(filter: SegmentInvoiceSettingFilter, order: SegmentInvoiceSettingOrder, first: Int, offset: Int): [SegmentInvoiceSetting]
  msg: String
  numUids: Int
}

type DeleteShipmentItemPayload {
  shipmentItem(filter: ShipmentItemFilter, order: ShipmentItemOrder, first: Int, offset: Int): [ShipmentItem]
  msg: String
  numUids: Int
}

type DeleteShipmentPayload {
  shipment(filter: ShipmentFilter, order: ShipmentOrder, first: Int, offset: Int): [Shipment]
  msg: String
  numUids: Int
}

type DeleteStateEventRulesetPayload {
  stateEventRuleset(filter: StateEventRulesetFilter, order: StateEventRulesetOrder, first: Int, offset: Int): [StateEventRuleset]
  msg: String
  numUids: Int
}

type DeleteTestResultPayload {
  testResult(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
  msg: String
  numUids: Int
}

type DeleteTestSpecificationPayload {
  testSpecification(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  msg: String
  numUids: Int
}

type DeleteTransitionEventRulesetPayload {
  transitionEventRuleset(filter: TransitionEventRulesetFilter, order: TransitionEventRulesetOrder, first: Int, offset: Int): [TransitionEventRuleset]
  msg: String
  numUids: Int
}

type DeleteUnitOfMeasureConversionPayload {
  unitOfMeasureConversion(filter: UnitOfMeasureConversionFilter, order: UnitOfMeasureConversionOrder, first: Int, offset: Int): [UnitOfMeasureConversion]
  msg: String
  numUids: Int
}

type DeleteUnitOfMeasurePayload {
  unitOfMeasure(filter: UnitOfMeasureFilter, order: UnitOfMeasureOrder, first: Int, offset: Int): [UnitOfMeasure]
  msg: String
  numUids: Int
}

type DeleteUserPayload {
  user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  msg: String
  numUids: Int
}

type DeleteUserRolePayload {
  userRole(filter: UserRoleFilter, first: Int, offset: Int): [UserRole]
  msg: String
  numUids: Int
}

type DeleteWorkCalendarDefinitionEntryPayload {
  workCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter, order: WorkCalendarDefinitionEntryOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntry]
  msg: String
  numUids: Int
}

type DeleteWorkCalendarEntryPayload {
  workCalendarEntry(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry]
  msg: String
  numUids: Int
}

type DeleteWorkCalendarPayload {
  workCalendar(filter: WorkCalendarFilter, order: WorkCalendarOrder, first: Int, offset: Int): [WorkCalendar]
  msg: String
  numUids: Int
}

type DeleteWorkDirectivePayload {
  workDirective(filter: WorkDirectiveFilter, order: WorkDirectiveOrder, first: Int, offset: Int): [WorkDirective]
  msg: String
  numUids: Int
}

type DeleteWorkflowConnectionPayload {
  workflowConnection(filter: WorkflowConnectionFilter, order: WorkflowConnectionOrder, first: Int, offset: Int): [WorkflowConnection]
  msg: String
  numUids: Int
}

type DeleteWorkflowConnectionTypePayload {
  workflowConnectionType(filter: WorkflowConnectionTypeFilter, order: WorkflowConnectionTypeOrder, first: Int, offset: Int): [WorkflowConnectionType]
  msg: String
  numUids: Int
}

type DeleteWorkflowInstancePayload {
  workflowInstance(filter: WorkflowInstanceFilter, order: WorkflowInstanceOrder, first: Int, offset: Int): [WorkflowInstance]
  msg: String
  numUids: Int
}

type DeleteWorkflowInstancePropertyPayload {
  workflowInstanceProperty(filter: WorkflowInstancePropertyFilter, order: WorkflowInstancePropertyOrder, first: Int, offset: Int): [WorkflowInstanceProperty]
  msg: String
  numUids: Int
}

type DeleteWorkflowNodeEventPayload {
  workflowNodeEvent(filter: WorkflowNodeEventFilter, order: WorkflowNodeEventOrder, first: Int, offset: Int): [WorkflowNodeEvent]
  msg: String
  numUids: Int
}

type DeleteWorkflowNodeInstancePayload {
  workflowNodeInstance(filter: WorkflowNodeInstanceFilter, order: WorkflowNodeInstanceOrder, first: Int, offset: Int): [WorkflowNodeInstance]
  msg: String
  numUids: Int
}

type DeleteWorkflowNodePayload {
  workflowNode(filter: WorkflowNodeFilter, order: WorkflowNodeOrder, first: Int, offset: Int): [WorkflowNode]
  msg: String
  numUids: Int
}

type DeleteWorkflowNodeTypePayload {
  workflowNodeType(filter: WorkflowNodeTypeFilter, order: WorkflowNodeTypeOrder, first: Int, offset: Int): [WorkflowNodeType]
  msg: String
  numUids: Int
}

type DeleteWorkflowPropertyInstancePayload {
  workflowPropertyInstance(filter: WorkflowPropertyInstanceFilter, order: WorkflowPropertyInstanceOrder, first: Int, offset: Int): [WorkflowPropertyInstance]
  msg: String
  numUids: Int
}

type DeleteWorkflowPropertyPayload {
  workflowProperty(filter: WorkflowPropertyFilter, order: WorkflowPropertyOrder, first: Int, offset: Int): [WorkflowProperty]
  msg: String
  numUids: Int
}

type DeleteWorkflowPropertyValuePayload {
  workflowPropertyValue(filter: WorkflowPropertyValueFilter, order: WorkflowPropertyValueOrder, first: Int, offset: Int): [WorkflowPropertyValue]
  msg: String
  numUids: Int
}

type DeleteWorkflowSpecificationPayload {
  workflowSpecification(filter: WorkflowSpecificationFilter, order: WorkflowSpecificationOrder, first: Int, offset: Int): [WorkflowSpecification]
  msg: String
  numUids: Int
}

type DeleteWorkMasterPayload {
  workMaster(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster]
  msg: String
  numUids: Int
}

type Delivery
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  dateTime: DateTime! @join__field(graph: CORE)
  shipments(filter: ShipmentFilter, order: ShipmentOrder, first: Int, offset: Int): [Shipment] @join__field(graph: CORE)
  location(filter: EquipmentFilter): Equipment @join__field(graph: CORE)
  operator(filter: UserFilter): User @join__field(graph: CORE)
  transportCompany: TransportCompany @join__field(graph: CORE)
  shipmentsAggregate(filter: ShipmentFilter): ShipmentAggregateResult @join__field(graph: CORE)
}

type DeliveryAggregateResult {
  count: Int
  dateTimeMin: DateTime
  dateTimeMax: DateTime
}

input DeliveryFilter {
  id: [ID!]
  has: [DeliveryHasFilter]
  and: [DeliveryFilter]
  or: [DeliveryFilter]
  not: DeliveryFilter
}

enum DeliveryHasFilter {
  dateTime
  shipments
  location
  operator
  transportCompany
}

input DeliveryOrder {
  asc: DeliveryOrderable
  desc: DeliveryOrderable
  then: DeliveryOrder
}

enum DeliveryOrderable {
  dateTime
}

input DeliveryPatch {
  dateTime: DateTime
  shipments: [ShipmentRef]
  location: EquipmentRef
  operator: UserRef
  transportCompany: TransportCompany
}

input DeliveryRef {
  id: ID
  dateTime: DateTime
  shipments: [ShipmentRef]
  location: EquipmentRef
  operator: UserRef
  transportCompany: TransportCompany
}

enum DependencyType {
  StartAfterStart
  StartAfterEnd
  EndAfterEnd
  EndAfterStart
  CanRunParallel
  CannotRunParallel
}

enum DgraphIndex {
  int
  int64
  float
  bool
  hash
  exact
  term
  fulltext
  trigram
  regexp
  year
  month
  day
  hour
  geo
}

enum DispatchStatus {
  PENDING
  ACTIVE
  PARKED
  COMPLETE
  CLOSED
}

input DispatchStatus_hash {
  eq: DispatchStatus
  in: [DispatchStatus]
}

type Equipment
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
  @join__type(graph: PROFILES, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  label: String @join__field(graph: CORE)
  displayName: String @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
  erpAssetID: String @join__field(graph: CORE)
  parent(filter: EquipmentFilter): Equipment @join__field(graph: CORE)
  children(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment] @join__field(graph: CORE)
  equipmentClass(filter: EquipmentClassFilter): EquipmentClass @join__field(graph: CORE)
  equipmentLevel: EquipmentElementLevel @join__field(graph: CORE)
  materialEquipment(filter: MaterialEquipmentFilter, order: MaterialEquipmentOrder, first: Int, offset: Int): [MaterialEquipment] @join__field(graph: CORE)
  properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property] @join__field(graph: CORE)
  propertyNameAliases(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias] @join__field(graph: CORE)
  carriers(filter: CarrierFilter, order: CarrierOrder, first: Int, offset: Int): [Carrier] @join__field(graph: CORE)
  materialSubLots(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @join__field(graph: CORE)
  transactions(filter: InventoryTransactionFilter, order: InventoryTransactionOrder, first: Int, offset: Int): [InventoryTransaction] @join__field(graph: CORE)
  inventoryHandlingRules(filter: InventoryHandlingRuleFilter, first: Int, offset: Int): [InventoryHandlingRule] @join__field(graph: CORE)
  dataProvider: DataProvider @join__field(graph: CORE)
  dataProviderConnection: String @join__field(graph: CORE)
  addressTemplate: String @join__field(graph: CORE)
  timeZoneName: String @join__field(graph: CORE)
  workSpecifications(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification] @join__field(graph: CORE)
  workflowInstances(filter: WorkflowInstanceFilter, order: WorkflowInstanceOrder, first: Int, offset: Int): [WorkflowInstance] @join__field(graph: CORE)
  workCalendar(filter: WorkCalendarFilter): WorkCalendar @join__field(graph: CORE)
  jobResponses(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse] @join__field(graph: CORE)
  jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @join__field(graph: CORE)
  shipments(filter: ShipmentFilter, order: ShipmentOrder, first: Int, offset: Int): [Shipment] @join__field(graph: CORE)
  shipmentItems(filter: ShipmentItemFilter, order: ShipmentItemOrder, first: Int, offset: Int): [ShipmentItem] @join__field(graph: CORE)
  Orders(filter: OrderFilter, order: OrderOrder, first: Int, offset: Int): [Order] @join__field(graph: CORE)
  events(filter: EventLogFilter, order: EventLogOrder, first: Int, offset: Int): [EventLog] @join__field(graph: CORE)
  quantities(filter: QuantityLogFilter, order: QuantityLogOrder, first: Int, offset: Int): [QuantityLog] @join__field(graph: CORE)
  allowAdhocWorklog: Boolean @join__field(graph: CORE)
  reasons(filter: ReasonFilter, order: ReasonOrder, first: Int, offset: Int): [Reason] @join__field(graph: CORE)
  reasonOverrides(filter: EquipmentReasonOverrideFilter, order: EquipmentReasonOverrideOrder, first: Int, offset: Int): [EquipmentReasonOverride] @join__field(graph: CORE)
  propertyOverrides(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride] @join__field(graph: CORE)
  mpmEnableJobInterlock: Boolean @join__field(graph: CORE)
  mpmPermissiveOutputName: String @join__field(graph: CORE)
  mpmEnableAutoIdentMatching: Boolean @join__field(graph: CORE)
  mpmAutoIdentMatchSource: String @join__field(graph: CORE)
  mpmEnableSetupStartDetection: Boolean @join__field(graph: CORE)
  mpmEnableSetupCloseDetection: Boolean @join__field(graph: CORE)
  mpmEnableORCWarning: Boolean @join__field(graph: CORE)
  mpmORCWarnTrigger: mpmORCWarnTriggers @join__field(graph: CORE)
  mpmEnableORCRevokePermissive: Boolean @join__field(graph: CORE)
  mpmORCRevokePermissiveTrigger: mpmORCRevokeTriggers @join__field(graph: CORE)
  mpmEnableORCBlockNextOrder: Boolean @join__field(graph: CORE)
  mpmEnableCallMaintenanceEvent: Boolean @join__field(graph: CORE)
  mpmEnableMaintenanceHandover: Boolean @join__field(graph: CORE)
  mpmEnableManualShiftStart: Boolean @join__field(graph: CORE)
  mpmEnableManualShiftEnd: Boolean @join__field(graph: CORE)
  mpmEnableManualBreak: Boolean @join__field(graph: CORE)
  mpmEnableManualPlannedMaint: Boolean @join__field(graph: CORE)
  ocsEnabled: Boolean @join__field(graph: CORE)
  ocsPageState: String @join__field(graph: CORE)
  ocsWorkflowSelector: String @join__field(graph: CORE)
  ocsChosenStopTime: DateTime @join__field(graph: CORE)
  childrenAggregate(filter: EquipmentFilter): EquipmentAggregateResult @join__field(graph: CORE)
  materialEquipmentAggregate(filter: MaterialEquipmentFilter): MaterialEquipmentAggregateResult @join__field(graph: CORE)
  propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult @join__field(graph: CORE)
  propertyNameAliasesAggregate(filter: PropertyNameAliasFilter): PropertyNameAliasAggregateResult @join__field(graph: CORE)
  carriersAggregate(filter: CarrierFilter): CarrierAggregateResult @join__field(graph: CORE)
  materialSubLotsAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult @join__field(graph: CORE)
  transactionsAggregate(filter: InventoryTransactionFilter): InventoryTransactionAggregateResult @join__field(graph: CORE)
  inventoryHandlingRulesAggregate(filter: InventoryHandlingRuleFilter): InventoryHandlingRuleAggregateResult @join__field(graph: CORE)
  workSpecificationsAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult @join__field(graph: CORE)
  workflowInstancesAggregate(filter: WorkflowInstanceFilter): WorkflowInstanceAggregateResult @join__field(graph: CORE)
  jobResponsesAggregate(filter: JobResponseFilter): JobResponseAggregateResult @join__field(graph: CORE)
  jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult @join__field(graph: CORE)
  shipmentsAggregate(filter: ShipmentFilter): ShipmentAggregateResult @join__field(graph: CORE)
  shipmentItemsAggregate(filter: ShipmentItemFilter): ShipmentItemAggregateResult @join__field(graph: CORE)
  OrdersAggregate(filter: OrderFilter): OrderAggregateResult @join__field(graph: CORE)
  eventsAggregate(filter: EventLogFilter): EventLogAggregateResult @join__field(graph: CORE)
  quantitiesAggregate(filter: QuantityLogFilter): QuantityLogAggregateResult @join__field(graph: CORE)
  reasonsAggregate(filter: ReasonFilter): ReasonAggregateResult @join__field(graph: CORE)
  reasonOverridesAggregate(filter: EquipmentReasonOverrideFilter): EquipmentReasonOverrideAggregateResult @join__field(graph: CORE)
  propertyOverridesAggregate(filter: EquipmentPropertyOverrideFilter): EquipmentPropertyOverrideAggregateResult @join__field(graph: CORE)
  reasonList: [Reason] @join__field(graph: PROFILES, provides: "standardValue")
  reasonListWithOverrides(filter: ReasonFilter): [Reason] @join__field(graph: PROFILES, provides: "standardValue")
  propertyList: [Property] @join__field(graph: PROFILES, provides: "expression value storeHistory")
  propertyListWithOverrides: [Property] @join__field(graph: PROFILES, provides: "expression value storeHistory")

  """deprecated"""
  eventsByTimeRange(filter: TimeRangeFilter): [EventLog] @join__field(graph: PROFILES, provides: "startDateTime endDateTime duration")
  eventsByField(filter: EventsByFieldFilter!): [EventsByField] @join__field(graph: PROFILES)
  jobResponsesByTimeRange(filter: TimeRangeFilter): [JobResponse] @join__field(graph: PROFILES, provides: "startDateTime endDateTime actualDuration")
  maintenanceCallsByTimeRange(filter: TimeRangeFilter!): [MaintenanceLog] @join__field(graph: PROFILES)
  currentStatus: EventsByField @join__field(graph: PROFILES)
}

type EquipmentAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  labelMin: String
  labelMax: String
  displayNameMin: String
  displayNameMax: String
  descriptionMin: String
  descriptionMax: String
  erpAssetIDMin: String
  erpAssetIDMax: String
  dataProviderConnectionMin: String
  dataProviderConnectionMax: String
  addressTemplateMin: String
  addressTemplateMax: String
  timeZoneNameMin: String
  timeZoneNameMax: String
  mpmPermissiveOutputNameMin: String
  mpmPermissiveOutputNameMax: String
  mpmAutoIdentMatchSourceMin: String
  mpmAutoIdentMatchSourceMax: String
  ocsPageStateMin: String
  ocsPageStateMax: String
  ocsWorkflowSelectorMin: String
  ocsWorkflowSelectorMax: String
  ocsChosenStopTimeMin: DateTime
  ocsChosenStopTimeMax: DateTime
}

"""
EquipmentClasses are used to manage configuration that is common to a number of similar equipment
The data properties that an equipment is expected to have are defined on the equipment class
"""
type EquipmentClass
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  label: String @join__field(graph: CORE)
  displayName: String @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
  parent(filter: EquipmentClassFilter): EquipmentClass @join__field(graph: CORE)
  children(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass] @join__field(graph: CORE)
  properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property] @join__field(graph: CORE)
  eventDefinitions(filter: EventDefinitionFilter, order: EventDefinitionOrder, first: Int, offset: Int): [EventDefinition] @join__field(graph: CORE)
  reasons(filter: ReasonFilter, order: ReasonOrder, first: Int, offset: Int): [Reason] @join__field(graph: CORE)
  equipmentLevel: EquipmentElementLevel @join__field(graph: CORE)
  addressTemplate: String @join__field(graph: CORE)
  image: String @join__field(graph: CORE)
  dashboardConfig(filter: DashboardConfigFilter): DashboardConfig @join__field(graph: CORE)
  childrenAggregate(filter: EquipmentClassFilter): EquipmentClassAggregateResult @join__field(graph: CORE)
  propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult @join__field(graph: CORE)
  eventDefinitionsAggregate(filter: EventDefinitionFilter): EventDefinitionAggregateResult @join__field(graph: CORE)
  reasonsAggregate(filter: ReasonFilter): ReasonAggregateResult @join__field(graph: CORE)
}

type EquipmentClassAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  labelMin: String
  labelMax: String
  displayNameMin: String
  displayNameMax: String
  descriptionMin: String
  descriptionMax: String
  addressTemplateMin: String
  addressTemplateMax: String
  imageMin: String
  imageMax: String
}

input EquipmentClassFilter {
  id: [ID!]
  isActive: Boolean
  name: StringHashFilter
  label: StringHashFilter
  displayName: StringHashFilter
  description: StringHashFilter
  has: [EquipmentClassHasFilter]
  and: [EquipmentClassFilter]
  or: [EquipmentClassFilter]
  not: EquipmentClassFilter
}

enum EquipmentClassHasFilter {
  isActive
  name
  label
  displayName
  description
  parent
  children
  properties
  eventDefinitions
  reasons
  equipmentLevel
  addressTemplate
  image
  dashboardConfig
}

input EquipmentClassOrder {
  asc: EquipmentClassOrderable
  desc: EquipmentClassOrderable
  then: EquipmentClassOrder
}

enum EquipmentClassOrderable {
  name
  label
  displayName
  description
  addressTemplate
  image
}

input EquipmentClassPatch {
  isActive: Boolean
  name: String
  label: String
  displayName: String
  description: String
  parent: EquipmentClassRef
  children: [EquipmentClassRef]
  properties: [PropertyRef]
  eventDefinitions: [EventDefinitionRef]
  reasons: [ReasonRef]
  equipmentLevel: EquipmentElementLevel
  addressTemplate: String
  image: String
  dashboardConfig: DashboardConfigRef
}

input EquipmentClassRef {
  id: ID
  isActive: Boolean
  name: String
  label: String
  displayName: String
  description: String
  parent: EquipmentClassRef
  children: [EquipmentClassRef]
  properties: [PropertyRef]
  eventDefinitions: [EventDefinitionRef]
  reasons: [ReasonRef]
  equipmentLevel: EquipmentElementLevel
  addressTemplate: String
  image: String
  dashboardConfig: DashboardConfigRef
}

enum EquipmentElementLevel {
  Enterprise
  Site
  Area
  ProcessCell
  Unit
  ProductionLine
  WorkCell
  ProductionUnit
  Warehouse
  StorageZone
  StorageUnit
  WorkCenter
  WorkUnit
  EquipmentModule
  ControlModule
  Other
}

input EquipmentElementLevel_hash {
  eq: EquipmentElementLevel
  in: [EquipmentElementLevel]
}

input EquipmentFilter {
  id: [ID!]
  isActive: Boolean
  name: StringHashFilter
  label: StringHashFilter
  displayName: StringHashFilter
  description: StringHashFilter
  erpAssetID: StringHashFilter
  equipmentLevel: EquipmentElementLevel_hash
  has: [EquipmentHasFilter]
  and: [EquipmentFilter]
  or: [EquipmentFilter]
  not: EquipmentFilter
}

enum EquipmentHasFilter {
  isActive
  name
  label
  displayName
  description
  erpAssetID
  parent
  children
  equipmentClass
  equipmentLevel
  materialEquipment
  properties
  propertyNameAliases
  carriers
  materialSubLots
  transactions
  inventoryHandlingRules
  dataProvider
  dataProviderConnection
  addressTemplate
  timeZoneName
  workSpecifications
  workflowInstances
  workCalendar
  jobResponses
  jobOrders
  shipments
  shipmentItems
  Orders
  events
  quantities
  allowAdhocWorklog
  reasons
  reasonOverrides
  propertyOverrides
  mpmEnableJobInterlock
  mpmPermissiveOutputName
  mpmEnableAutoIdentMatching
  mpmAutoIdentMatchSource
  mpmEnableSetupStartDetection
  mpmEnableSetupCloseDetection
  mpmEnableORCWarning
  mpmORCWarnTrigger
  mpmEnableORCRevokePermissive
  mpmORCRevokePermissiveTrigger
  mpmEnableORCBlockNextOrder
  mpmEnableCallMaintenanceEvent
  mpmEnableMaintenanceHandover
  mpmEnableManualShiftStart
  mpmEnableManualShiftEnd
  mpmEnableManualBreak
  mpmEnableManualPlannedMaint
  ocsEnabled
  ocsPageState
  ocsWorkflowSelector
  ocsChosenStopTime
}

type EquipmentNameAlias {
  id: ID!
  equipment(filter: EquipmentFilter): Equipment!
  alias: String!
  system: String!
}

type EquipmentNameAliasAggregateResult {
  count: Int
  aliasMin: String
  aliasMax: String
  systemMin: String
  systemMax: String
}

input EquipmentNameAliasFilter {
  id: [ID!]
  alias: StringFullTextFilter
  system: StringFullTextFilter
  has: [EquipmentNameAliasHasFilter]
  and: [EquipmentNameAliasFilter]
  or: [EquipmentNameAliasFilter]
  not: EquipmentNameAliasFilter
}

enum EquipmentNameAliasHasFilter {
  equipment
  alias
  system
}

input EquipmentNameAliasOrder {
  asc: EquipmentNameAliasOrderable
  desc: EquipmentNameAliasOrderable
  then: EquipmentNameAliasOrder
}

enum EquipmentNameAliasOrderable {
  alias
  system
}

input EquipmentNameAliasPatch {
  equipment: EquipmentRef
  alias: String
  system: String
}

input EquipmentNameAliasRef {
  id: ID
  equipment: EquipmentRef
  alias: String
  system: String
}

input EquipmentOrder {
  asc: EquipmentOrderable
  desc: EquipmentOrderable
  then: EquipmentOrder
}

enum EquipmentOrderable {
  name
  label
  displayName
  description
  erpAssetID
  dataProviderConnection
  addressTemplate
  timeZoneName
  mpmPermissiveOutputName
  mpmAutoIdentMatchSource
  ocsPageState
  ocsWorkflowSelector
  ocsChosenStopTime
}

input EquipmentPatch {
  isActive: Boolean
  name: String
  label: String
  displayName: String
  description: String
  erpAssetID: String
  parent: EquipmentRef
  children: [EquipmentRef]
  equipmentClass: EquipmentClassRef
  equipmentLevel: EquipmentElementLevel
  materialEquipment: [MaterialEquipmentRef]
  properties: [PropertyRef]
  propertyNameAliases: [PropertyNameAliasRef]
  carriers: [CarrierRef]
  materialSubLots: [MaterialSubLotRef]
  transactions: [InventoryTransactionRef]
  inventoryHandlingRules: [InventoryHandlingRuleRef]
  dataProvider: DataProvider
  dataProviderConnection: String
  addressTemplate: String
  timeZoneName: String
  workSpecifications: [EquipmentSpecificationRef]
  workflowInstances: [WorkflowInstanceRef]
  workCalendar: WorkCalendarRef
  jobResponses: [JobResponseRef]
  jobOrders: [JobOrderRef]
  shipments: [ShipmentRef]
  shipmentItems: [ShipmentItemRef]
  Orders: [OrderRef]
  events: [EventLogRef]
  quantities: [QuantityLogRef]
  allowAdhocWorklog: Boolean
  reasons: [ReasonRef]
  reasonOverrides: [EquipmentReasonOverrideRef]
  propertyOverrides: [EquipmentPropertyOverrideRef]
  mpmEnableJobInterlock: Boolean
  mpmPermissiveOutputName: String
  mpmEnableAutoIdentMatching: Boolean
  mpmAutoIdentMatchSource: String
  mpmEnableSetupStartDetection: Boolean
  mpmEnableSetupCloseDetection: Boolean
  mpmEnableORCWarning: Boolean
  mpmORCWarnTrigger: mpmORCWarnTriggers
  mpmEnableORCRevokePermissive: Boolean
  mpmORCRevokePermissiveTrigger: mpmORCRevokeTriggers
  mpmEnableORCBlockNextOrder: Boolean
  mpmEnableCallMaintenanceEvent: Boolean
  mpmEnableMaintenanceHandover: Boolean
  mpmEnableManualShiftStart: Boolean
  mpmEnableManualShiftEnd: Boolean
  mpmEnableManualBreak: Boolean
  mpmEnableManualPlannedMaint: Boolean
  ocsEnabled: Boolean
  ocsPageState: String
  ocsWorkflowSelector: String
  ocsChosenStopTime: DateTime
}

type EquipmentPropertyOverride
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  equipment(filter: EquipmentFilter): Equipment! @join__field(graph: CORE)
  property(filter: PropertyFilter): Property! @join__field(graph: CORE)
  address: String @join__field(graph: CORE)
  expression: String @join__field(graph: CORE)
  value: String @join__field(graph: CORE)
  storeHistory: Boolean @join__field(graph: CORE)
  ignore: Boolean @join__field(graph: CORE)
}

type EquipmentPropertyOverrideAggregateResult {
  count: Int
  addressMin: String
  addressMax: String
  expressionMin: String
  expressionMax: String
  valueMin: String
  valueMax: String
}

input EquipmentPropertyOverrideFilter {
  id: [ID!]
  isActive: Boolean
  has: [EquipmentPropertyOverrideHasFilter]
  and: [EquipmentPropertyOverrideFilter]
  or: [EquipmentPropertyOverrideFilter]
  not: EquipmentPropertyOverrideFilter
}

enum EquipmentPropertyOverrideHasFilter {
  isActive
  equipment
  property
  address
  expression
  value
  storeHistory
  ignore
}

input EquipmentPropertyOverrideOrder {
  asc: EquipmentPropertyOverrideOrderable
  desc: EquipmentPropertyOverrideOrderable
  then: EquipmentPropertyOverrideOrder
}

enum EquipmentPropertyOverrideOrderable {
  address
  expression
  value
}

input EquipmentPropertyOverridePatch {
  isActive: Boolean
  equipment: EquipmentRef
  property: PropertyRef
  address: String
  expression: String
  value: String
  storeHistory: Boolean
  ignore: Boolean
}

input EquipmentPropertyOverrideRef {
  id: ID
  isActive: Boolean
  equipment: EquipmentRef
  property: PropertyRef
  address: String
  expression: String
  value: String
  storeHistory: Boolean
  ignore: Boolean
}

"""
EquipmentReasonOverrides are used to make equipment specific changes to equipment class reasons.
This allows 'Master Lists' of reasons to be defined on the equipment class and for overrides to the master
reasons to be made at the equipment level
"""
type EquipmentReasonOverride
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  equipment(filter: EquipmentFilter): Equipment @join__field(graph: CORE)
  reason(filter: ReasonFilter): Reason @join__field(graph: CORE)
  ignore: Boolean @join__field(graph: CORE)
  standardValue: Float @join__field(graph: CORE)
}

type EquipmentReasonOverrideAggregateResult {
  count: Int
  standardValueMin: Float
  standardValueMax: Float
  standardValueSum: Float
  standardValueAvg: Float
}

input EquipmentReasonOverrideFilter {
  id: [ID!]
  isActive: Boolean
  has: [EquipmentReasonOverrideHasFilter]
  and: [EquipmentReasonOverrideFilter]
  or: [EquipmentReasonOverrideFilter]
  not: EquipmentReasonOverrideFilter
}

enum EquipmentReasonOverrideHasFilter {
  isActive
  equipment
  reason
  ignore
  standardValue
}

input EquipmentReasonOverrideOrder {
  asc: EquipmentReasonOverrideOrderable
  desc: EquipmentReasonOverrideOrderable
  then: EquipmentReasonOverrideOrder
}

enum EquipmentReasonOverrideOrderable {
  standardValue
}

input EquipmentReasonOverridePatch {
  isActive: Boolean
  equipment: EquipmentRef
  reason: ReasonRef
  ignore: Boolean
  standardValue: Float
}

input EquipmentReasonOverrideRef {
  id: ID
  isActive: Boolean
  equipment: EquipmentRef
  reason: ReasonRef
  ignore: Boolean
  standardValue: Float
}

input EquipmentRef {
  id: ID
  isActive: Boolean
  name: String
  label: String
  displayName: String
  description: String
  erpAssetID: String
  parent: EquipmentRef
  children: [EquipmentRef]
  equipmentClass: EquipmentClassRef
  equipmentLevel: EquipmentElementLevel
  materialEquipment: [MaterialEquipmentRef]
  properties: [PropertyRef]
  propertyNameAliases: [PropertyNameAliasRef]
  carriers: [CarrierRef]
  materialSubLots: [MaterialSubLotRef]
  transactions: [InventoryTransactionRef]
  inventoryHandlingRules: [InventoryHandlingRuleRef]
  dataProvider: DataProvider
  dataProviderConnection: String
  addressTemplate: String
  timeZoneName: String
  workSpecifications: [EquipmentSpecificationRef]
  workflowInstances: [WorkflowInstanceRef]
  workCalendar: WorkCalendarRef
  jobResponses: [JobResponseRef]
  jobOrders: [JobOrderRef]
  shipments: [ShipmentRef]
  shipmentItems: [ShipmentItemRef]
  Orders: [OrderRef]
  events: [EventLogRef]
  quantities: [QuantityLogRef]
  allowAdhocWorklog: Boolean
  reasons: [ReasonRef]
  reasonOverrides: [EquipmentReasonOverrideRef]
  propertyOverrides: [EquipmentPropertyOverrideRef]
  mpmEnableJobInterlock: Boolean
  mpmPermissiveOutputName: String
  mpmEnableAutoIdentMatching: Boolean
  mpmAutoIdentMatchSource: String
  mpmEnableSetupStartDetection: Boolean
  mpmEnableSetupCloseDetection: Boolean
  mpmEnableORCWarning: Boolean
  mpmORCWarnTrigger: mpmORCWarnTriggers
  mpmEnableORCRevokePermissive: Boolean
  mpmORCRevokePermissiveTrigger: mpmORCRevokeTriggers
  mpmEnableORCBlockNextOrder: Boolean
  mpmEnableCallMaintenanceEvent: Boolean
  mpmEnableMaintenanceHandover: Boolean
  mpmEnableManualShiftStart: Boolean
  mpmEnableManualShiftEnd: Boolean
  mpmEnableManualBreak: Boolean
  mpmEnableManualPlannedMaint: Boolean
  ocsEnabled: Boolean
  ocsPageState: String
  ocsWorkflowSelector: String
  ocsChosenStopTime: DateTime
}

type EquipmentSpecification
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  workMaster(filter: WorkMasterFilter): WorkMaster @join__field(graph: CORE)
  workDirective(filter: WorkDirectiveFilter): WorkDirective @join__field(graph: CORE)
  jobOrder(filter: JobOrderFilter): JobOrder @join__field(graph: CORE)
  operationsSegment(filter: OperationsSegmentFilter): OperationsSegment @join__field(graph: CORE)
  equipment(filter: EquipmentFilter): Equipment @join__field(graph: CORE)
  equipmentClass(filter: EquipmentClassFilter): EquipmentClass @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
  quantity: Float @join__field(graph: CORE)
  uom(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: CORE)
}

type EquipmentSpecificationAggregateResult {
  count: Int
  descriptionMin: String
  descriptionMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input EquipmentSpecificationFilter {
  id: [ID!]
  isActive: Boolean
  has: [EquipmentSpecificationHasFilter]
  and: [EquipmentSpecificationFilter]
  or: [EquipmentSpecificationFilter]
  not: EquipmentSpecificationFilter
}

enum EquipmentSpecificationHasFilter {
  isActive
  workMaster
  workDirective
  jobOrder
  operationsSegment
  equipment
  equipmentClass
  description
  quantity
  uom
}

input EquipmentSpecificationOrder {
  asc: EquipmentSpecificationOrderable
  desc: EquipmentSpecificationOrderable
  then: EquipmentSpecificationOrder
}

enum EquipmentSpecificationOrderable {
  description
  quantity
}

input EquipmentSpecificationPatch {
  isActive: Boolean
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  jobOrder: JobOrderRef
  operationsSegment: OperationsSegmentRef
  equipment: EquipmentRef
  equipmentClass: EquipmentClassRef
  description: String
  quantity: Float
  uom: UnitOfMeasureRef
}

input EquipmentSpecificationRef {
  id: ID
  isActive: Boolean
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  jobOrder: JobOrderRef
  operationsSegment: OperationsSegmentRef
  equipment: EquipmentRef
  equipmentClass: EquipmentClassRef
  description: String
  quantity: Float
  uom: UnitOfMeasureRef
}

"""Multiple equipment events can be defined for an Equipment Template."""
type EventDefinition
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  messageClass: MessageClass! @join__field(graph: CORE)
  triggerProperties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property] @join__field(graph: CORE)
  triggerExpression: String! @join__field(graph: CORE)
  delayOption: Boolean @join__field(graph: CORE)
  delayTime: Int @join__field(graph: CORE)
  payloadProperties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property] @join__field(graph: CORE)
  payloadFields(filter: PayloadFieldDefinitionFilter, order: PayloadFieldDefinitionOrder, first: Int, offset: Int): [PayloadFieldDefinition] @join__field(graph: CORE)
  orderStartRuleset(filter: OrderStartRulesetFilter): OrderStartRuleset @join__field(graph: CORE)
  stateEventRuleset(filter: StateEventRulesetFilter): StateEventRuleset @join__field(graph: CORE)
  materialEventRuleset(filter: MaterialEventRulesetFilter): MaterialEventRuleset @join__field(graph: CORE)
  transitionEventRuleset(filter: TransitionEventRulesetFilter): TransitionEventRuleset @join__field(graph: CORE)
  equipmentClass(filter: EquipmentClassFilter): EquipmentClass @join__field(graph: CORE)
  triggerPropertiesAggregate(filter: PropertyFilter): PropertyAggregateResult @join__field(graph: CORE)
  payloadPropertiesAggregate(filter: PropertyFilter): PropertyAggregateResult @join__field(graph: CORE)
  payloadFieldsAggregate(filter: PayloadFieldDefinitionFilter): PayloadFieldDefinitionAggregateResult @join__field(graph: CORE)
}

type EventDefinitionAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  triggerExpressionMin: String
  triggerExpressionMax: String
  delayTimeMin: Int
  delayTimeMax: Int
  delayTimeSum: Int
  delayTimeAvg: Float
}

input EventDefinitionFilter {
  id: [ID!]
  isActive: Boolean
  name: StringHashFilter
  has: [EventDefinitionHasFilter]
  and: [EventDefinitionFilter]
  or: [EventDefinitionFilter]
  not: EventDefinitionFilter
}

enum EventDefinitionHasFilter {
  isActive
  name
  messageClass
  triggerProperties
  triggerExpression
  delayOption
  delayTime
  payloadProperties
  payloadFields
  orderStartRuleset
  stateEventRuleset
  materialEventRuleset
  transitionEventRuleset
  equipmentClass
}

input EventDefinitionOrder {
  asc: EventDefinitionOrderable
  desc: EventDefinitionOrderable
  then: EventDefinitionOrder
}

enum EventDefinitionOrderable {
  name
  triggerExpression
  delayTime
}

input EventDefinitionPatch {
  isActive: Boolean
  name: String
  messageClass: MessageClass
  triggerProperties: [PropertyRef]
  triggerExpression: String
  delayOption: Boolean
  delayTime: Int
  payloadProperties: [PropertyRef]
  payloadFields: [PayloadFieldDefinitionRef]
  orderStartRuleset: OrderStartRulesetRef
  stateEventRuleset: StateEventRulesetRef
  materialEventRuleset: MaterialEventRulesetRef
  transitionEventRuleset: TransitionEventRulesetRef
  equipmentClass: EquipmentClassRef
}

input EventDefinitionRef {
  id: ID
  isActive: Boolean
  name: String
  messageClass: MessageClass
  triggerProperties: [PropertyRef]
  triggerExpression: String
  delayOption: Boolean
  delayTime: Int
  payloadProperties: [PropertyRef]
  payloadFields: [PayloadFieldDefinitionRef]
  orderStartRuleset: OrderStartRulesetRef
  stateEventRuleset: StateEventRulesetRef
  materialEventRuleset: MaterialEventRulesetRef
  transitionEventRuleset: TransitionEventRulesetRef
  equipmentClass: EquipmentClassRef
}

type EventLog
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
  @join__type(graph: PROFILES, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  jobResponse(filter: JobResponseFilter): JobResponse! @join__field(graph: CORE)
  equipment(filter: EquipmentFilter): Equipment @join__field(graph: CORE)
  startDateTime: DateTime @join__field(graph: CORE)
  endDateTime: DateTime @join__field(graph: CORE)
  duration: Float @join__field(graph: CORE)
  reasonCode: String @join__field(graph: CORE)
  reasonText: String @join__field(graph: CORE)
  reasonCategoryCode: String @join__field(graph: CORE)
  reasonValue: Float @join__field(graph: CORE)
  reasonValueUoM(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: CORE)
  comments: String @join__field(graph: CORE)
}

type EventLogAggregateResult {
  count: Int
  startDateTimeMin: DateTime
  startDateTimeMax: DateTime
  endDateTimeMin: DateTime
  endDateTimeMax: DateTime
  durationMin: Float
  durationMax: Float
  durationSum: Float
  durationAvg: Float
  reasonCodeMin: String
  reasonCodeMax: String
  reasonTextMin: String
  reasonTextMax: String
  reasonCategoryCodeMin: String
  reasonCategoryCodeMax: String
  reasonValueMin: Float
  reasonValueMax: Float
  reasonValueSum: Float
  reasonValueAvg: Float
  commentsMin: String
  commentsMax: String
}

input EventLogFilter {
  id: [ID!]
  isActive: Boolean
  startDateTime: DateTimeFilter
  endDateTime: DateTimeFilter
  reasonCode: StringHashFilter
  reasonText: StringHashFilter
  reasonCategoryCode: StringHashFilter
  comments: StringHashFilter
  has: [EventLogHasFilter]
  and: [EventLogFilter]
  or: [EventLogFilter]
  not: EventLogFilter
}

enum EventLogHasFilter {
  isActive
  jobResponse
  equipment
  startDateTime
  endDateTime
  duration
  reasonCode
  reasonText
  reasonCategoryCode
  reasonValue
  reasonValueUoM
  comments
}

input EventLogOrder {
  asc: EventLogOrderable
  desc: EventLogOrderable
  then: EventLogOrder
}

enum EventLogOrderable {
  startDateTime
  endDateTime
  duration
  reasonCode
  reasonText
  reasonCategoryCode
  reasonValue
  comments
}

input EventLogPatch {
  isActive: Boolean
  jobResponse: JobResponseRef
  equipment: EquipmentRef
  startDateTime: DateTime
  endDateTime: DateTime
  duration: Float
  reasonCode: String
  reasonText: String
  reasonCategoryCode: String
  reasonValue: Float
  reasonValueUoM: UnitOfMeasureRef
  comments: String
}

input EventLogRef {
  id: ID
  isActive: Boolean
  jobResponse: JobResponseRef
  equipment: EquipmentRef
  startDateTime: DateTime
  endDateTime: DateTime
  duration: Float
  reasonCode: String
  reasonText: String
  reasonCategoryCode: String
  reasonValue: Float
  reasonValueUoM: UnitOfMeasureRef
  comments: String
}

type EventLogTS {
  equipment: Equipment
  eventTime: DateTime
  reasonCategoryCode: String
  reasonCode: String
  reasonText: String
  ISO22400Status: String
  PackMLStatus: String
  reasonValue: Float
  reasonValueUoM: String
  comment: String
  previousTime: DateTime
}

"""input for splitEventLog or updateEventLog methods"""
input EventLogTSInput {
  """a reference to the equipment the event is on"""
  equipment: ExtEquipmentRef!

  """the start time of the inputted event"""
  eventStartTime: DateTime!
  reasonCategoryCode: String
  reasonCode: String
  reasonText: String
  packMLStatus: String
  reasonValue: Float
  reasonValueUoM: String
  comment: String
}

"""An event from the eventLog"""
type EventsByField {
  """The start of the event"""
  startDateTime: DateTime

  """The end of the event"""
  endDateTime: DateTime

  """The elapsed time between startDateTime and endDateTime"""
  duration: Int
  reasonCategoryCode: String
  reasonCode: String
  reasonText: String
  reasonValue: Float
  reasonValueUoM: String
  packMLStatus: String
  comment: String

  """The id of the work calendar entry associated with this event"""
  shiftId: String

  """The description of the work calendar entry associated with this event"""
  shiftDescription: String

  """
  Returns the duration if packML is execute, otherwise returns 0. Useful for visualisation tools
  """
  availability: Int
}

"""the filter for an eventsByField query"""
input EventsByFieldFilter {
  """limits the number of results that return"""
  topN: Int

  """
  when used with filterValue, returns all records except those that contain the value
  specified by filterValue in the field specified by this variable
  """
  filterField: String

  """
  when used with filterField, returns all records except those that contain the
  value specified by this variable in the field specified by filterfield
  """
  filterValue: String

  """
  returns all events between this timestamp and the timestamp specified by to.
  If only from is specified, to defaults to the current time
  """
  from: DateTime

  """
  returns all events between this timestamp and the timestamp specified by from.
  If only from is specified, this value defaults to the current time
  """
  to: DateTime

  """
  when true, changes the start time of the first response in the event list to be the start of the job response,
  or the filter's from field if the original time is earlier than the modified time
  """
  interpolateAtRangeBoundary: Boolean

  """
  if the the query result would be empty,
  instead return the last result within the last 4 weeks of the start of the query
  """
  findPreviousWhenEmpty: Boolean

  """
  records will only return if the field specified by this variable is null
  """
  returnUnassignedField: String

  """
  will associate and split events based on work calendar entries when set to true
  """
  provideShiftInformation: Boolean
}

"""aggregated information about a group of events"""
type EventSummaryByReason {
  iSO22400Status: String
  packMLStatus: String
  reasonCategoryCode: String
  reasonCode: String
  reasonText: String
  reasonValue: Float
  reasonValueUoM: String
  comment: String

  """the number of events in the group"""
  count: Int

  """the total duration of the group of events"""
  durationSum: Int
}

"""the filter for an eventSummaryByReason query"""
input EventSummaryByReasonFilter {
  """limits the number of results that return"""
  topN: Int

  """
  specifies the field that events will group on. the default value is reasonText
  """
  groupBy: String

  """
  specifies whether the results should be sorted by duration or by count.
  Valid inputs are 'duration' and 'count'
  """
  sortBy: String

  """
  if set to true, will only perform grouping and aggregations on events that have
  packmlStatus != execute
  """
  downtimeOnly: Boolean
}

input ExtCarrierRef {
  id: ID
}

input ExtEquipmentRef {
  id: ID
  name: String
}

input ExtMaterialDefinitionRef {
  id: ID
  code: String
}

input ExtMaterialStatusRef {
  id: ID
  code: String
}

input ExtMaterialSubLotRef {
  id: ID
  code: String
}

input ExtMaterialUnitRef {
  id: ID
  serialNumber: String
}

input ExtPartnerRef {
  id: ID
}

input ExtShipmentItemRef {
  id: ID
}

input ExtUserRef {
  id: ID
  username: String
}

input FloatFilter {
  eq: Float
  in: [Float]
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: FloatRange
}

input FloatRange {
  min: Float!
  max: Float!
}

type Form
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  workflowNodes(filter: WorkflowNodeFilter, order: WorkflowNodeOrder, first: Int, offset: Int): [WorkflowNode] @join__field(graph: CORE)
  jsonSchema: String @join__field(graph: CORE)
  uiSchema: String @join__field(graph: CORE)
  workflowNodesAggregate(filter: WorkflowNodeFilter): WorkflowNodeAggregateResult @join__field(graph: CORE)
}

type FormAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  jsonSchemaMin: String
  jsonSchemaMax: String
  uiSchemaMin: String
  uiSchemaMax: String
}

input FormFilter {
  id: [ID!]
  isActive: Boolean
  name: StringHashFilter
  has: [FormHasFilter]
  and: [FormFilter]
  or: [FormFilter]
  not: FormFilter
}

enum FormHasFilter {
  isActive
  name
  workflowNodes
  jsonSchema
  uiSchema
}

input FormOrder {
  asc: FormOrderable
  desc: FormOrderable
  then: FormOrder
}

enum FormOrderable {
  name
  jsonSchema
  uiSchema
}

input FormPatch {
  isActive: Boolean
  workflowNodes: [WorkflowNodeRef]
  jsonSchema: String
  uiSchema: String
}

input FormRef {
  id: ID
  isActive: Boolean
  name: String
  workflowNodes: [WorkflowNodeRef]
  jsonSchema: String
  uiSchema: String
}

enum Frequency {
  YEARLY
  MONTHLY
  WEEKLY
  DAILY
  HOURLY
  MINUTELY
  SECONDLY
}

type GeneralLedgerAccount {
  id: ID!
  code: String!
  name: String
  type: String
}

type GeneralLedgerAccountAggregateResult {
  count: Int
  codeMin: String
  codeMax: String
  nameMin: String
  nameMax: String
  typeMin: String
  typeMax: String
}

input GeneralLedgerAccountFilter {
  id: [ID!]
  code: StringHashFilter
  has: [GeneralLedgerAccountHasFilter]
  and: [GeneralLedgerAccountFilter]
  or: [GeneralLedgerAccountFilter]
  not: GeneralLedgerAccountFilter
}

enum GeneralLedgerAccountHasFilter {
  code
  name
  type
}

input GeneralLedgerAccountOrder {
  asc: GeneralLedgerAccountOrderable
  desc: GeneralLedgerAccountOrderable
  then: GeneralLedgerAccountOrder
}

enum GeneralLedgerAccountOrderable {
  code
  name
  type
}

input GeneralLedgerAccountPatch {
  name: String
  type: String
}

input GeneralLedgerAccountRef {
  id: ID
  code: String
  name: String
  type: String
}

input GenerateMutationParams {
  add: Boolean
  update: Boolean
  delete: Boolean
}

input GenerateQueryParams {
  get: Boolean
  query: Boolean
  password: Boolean
  aggregate: Boolean
}

enum HTTPMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
}

enum IncoTerms {
  DAP
  DDP
  CPT
}

type InputError {
  message: String
}

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can represent values in range [-(2^63),(2^63 - 1)].
"""
scalar Int64

input Int64Filter {
  eq: Int64
  in: [Int64]
  le: Int64
  lt: Int64
  ge: Int64
  gt: Int64
  between: Int64Range
}

input Int64Range {
  min: Int64!
  max: Int64!
}

input IntersectsFilter {
  polygon: PolygonRef
  multiPolygon: MultiPolygonRef
}

input IntFilter {
  eq: Int
  in: [Int]
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: IntRange
}

input IntRange {
  min: Int!
  max: Int!
}

type InventoryHandlingPolicy
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  materialClass(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass] @join__field(graph: CORE)
  verifySerialNumberOnReceipt: Boolean @join__field(graph: CORE)
  verifySerialNumberOnPacking: Boolean @join__field(graph: CORE)
  trackBySerialNumber: Boolean @join__field(graph: CORE)
  trackByCarrier: Boolean @join__field(graph: CORE)
  rules(filter: InventoryHandlingRuleFilter, first: Int, offset: Int): [InventoryHandlingRule] @join__field(graph: CORE)
  materialClassAggregate(filter: MaterialClassFilter): MaterialClassAggregateResult @join__field(graph: CORE)
  rulesAggregate(filter: InventoryHandlingRuleFilter): InventoryHandlingRuleAggregateResult @join__field(graph: CORE)
}

type InventoryHandlingPolicyAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
}

input InventoryHandlingPolicyFilter {
  id: [ID!]
  isActive: Boolean
  name: StringHashFilter
  has: [InventoryHandlingPolicyHasFilter]
  and: [InventoryHandlingPolicyFilter]
  or: [InventoryHandlingPolicyFilter]
  not: InventoryHandlingPolicyFilter
}

enum InventoryHandlingPolicyHasFilter {
  isActive
  name
  materialClass
  verifySerialNumberOnReceipt
  verifySerialNumberOnPacking
  trackBySerialNumber
  trackByCarrier
  rules
}

input InventoryHandlingPolicyOrder {
  asc: InventoryHandlingPolicyOrderable
  desc: InventoryHandlingPolicyOrderable
  then: InventoryHandlingPolicyOrder
}

enum InventoryHandlingPolicyOrderable {
  name
}

input InventoryHandlingPolicyPatch {
  isActive: Boolean
  materialClass: [MaterialClassRef]
  verifySerialNumberOnReceipt: Boolean
  verifySerialNumberOnPacking: Boolean
  trackBySerialNumber: Boolean
  trackByCarrier: Boolean
  rules: [InventoryHandlingRuleRef]
}

input InventoryHandlingPolicyRef {
  id: ID
  isActive: Boolean
  name: String
  materialClass: [MaterialClassRef]
  verifySerialNumberOnReceipt: Boolean
  verifySerialNumberOnPacking: Boolean
  trackBySerialNumber: Boolean
  trackByCarrier: Boolean
  rules: [InventoryHandlingRuleRef]
}

type InventoryHandlingRule
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  customer(filter: PartnerFilter): Partner! @join__field(graph: CORE)
  stockType: StockType! @join__field(graph: CORE)
  warehouse(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment!]! @join__field(graph: CORE)
  stateModel(filter: MaterialStateModelFilter): MaterialStateModel! @join__field(graph: CORE)
  inventoryHandlingPolicy(filter: InventoryHandlingPolicyFilter): InventoryHandlingPolicy! @join__field(graph: CORE)
  warehouseAggregate(filter: EquipmentFilter): EquipmentAggregateResult @join__field(graph: CORE)
}

type InventoryHandlingRuleAggregateResult {
  count: Int
}

input InventoryHandlingRuleFilter {
  id: [ID!]
  isActive: Boolean
  stockType: StockType_hash
  has: [InventoryHandlingRuleHasFilter]
  and: [InventoryHandlingRuleFilter]
  or: [InventoryHandlingRuleFilter]
  not: InventoryHandlingRuleFilter
}

enum InventoryHandlingRuleHasFilter {
  isActive
  customer
  stockType
  warehouse
  stateModel
  inventoryHandlingPolicy
}

input InventoryHandlingRulePatch {
  isActive: Boolean
  customer: PartnerRef
  stockType: StockType
  warehouse: [EquipmentRef!]
  stateModel: MaterialStateModelRef
  inventoryHandlingPolicy: InventoryHandlingPolicyRef
}

input InventoryHandlingRuleRef {
  id: ID
  isActive: Boolean
  customer: PartnerRef
  stockType: StockType
  warehouse: [EquipmentRef!]
  stateModel: MaterialStateModelRef
  inventoryHandlingPolicy: InventoryHandlingPolicyRef
}

"""
A movement of material. The Inventory Transaction represents an immutable ledger of entries.
Most transactions will record 2 entries with the same transactionId, a debit and a credit like
a financial ledger.
All transactions should be added through the custom mutation, so we disable the automatically generated mutations.
"""
type InventoryTransaction
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
  @join__type(graph: PROFILES, key: "id")
{
  id: ID! @join__field(graph: CORE)
  transactionId: String! @join__field(graph: CORE)
  user(filter: UserFilter): User @join__field(graph: CORE)
  owner(filter: PartnerFilter): Partner @join__field(graph: CORE)
  previous(filter: InventoryTransactionFilter): InventoryTransaction @join__field(graph: CORE)
  next(filter: InventoryTransactionFilter): InventoryTransaction @join__field(graph: CORE)
  timestamp: DateTime! @join__field(graph: CORE)
  effectiveTimestamp: DateTime! @join__field(graph: CORE)
  materialSubLot(filter: MaterialSubLotFilter): MaterialSubLot @join__field(graph: CORE)
  materialUnit(filter: MaterialUnitFilter): MaterialUnit @join__field(graph: CORE)
  carrier(filter: CarrierFilter): Carrier @join__field(graph: CORE)
  status(filter: MaterialStatusFilter): MaterialStatus! @join__field(graph: CORE)
  storageLocation(filter: EquipmentFilter): Equipment @join__field(graph: CORE)
  material(filter: MaterialDefinitionFilter): MaterialDefinition! @join__field(graph: CORE)
  materialUse: MaterialUse! @join__field(graph: CORE)
  shipmentItem(filter: ShipmentItemFilter): ShipmentItem @join__field(graph: CORE)
  quantity: Float! @join__field(graph: CORE)
}

type InventoryTransactionAggregateResult {
  count: Int
  transactionIdMin: String
  transactionIdMax: String
  timestampMin: DateTime
  timestampMax: DateTime
  effectiveTimestampMin: DateTime
  effectiveTimestampMax: DateTime
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input InventoryTransactionFilter {
  id: [ID!]
  transactionId: StringHashFilter
  has: [InventoryTransactionHasFilter]
  and: [InventoryTransactionFilter]
  or: [InventoryTransactionFilter]
  not: InventoryTransactionFilter
}

enum InventoryTransactionHasFilter {
  transactionId
  user
  owner
  previous
  next
  timestamp
  effectiveTimestamp
  materialSubLot
  materialUnit
  carrier
  status
  storageLocation
  material
  materialUse
  shipmentItem
  quantity
}

input InventoryTransactionInput {
  user: ExtUserRef
  owner: ExtPartnerRef
  effectiveDateTime: DateTime
  materialSubLot: ExtMaterialSubLotRef
  materialUnit: ExtMaterialUnitRef
  carrier: ExtCarrierRef
  status: ExtMaterialStatusRef
  storageLocation: ExtEquipmentRef
  material: ExtMaterialDefinitionRef
  materialUse: MaterialUse
  shipmentItem: ExtShipmentItemRef
  quantity: Float
}

input InventoryTransactionOrder {
  asc: InventoryTransactionOrderable
  desc: InventoryTransactionOrderable
  then: InventoryTransactionOrder
}

enum InventoryTransactionOrderable {
  transactionId
  timestamp
  effectiveTimestamp
  quantity
}

input InventoryTransactionPatch {
  transactionId: String
  user: UserRef
  owner: PartnerRef
  previous: InventoryTransactionRef
  next: InventoryTransactionRef
  timestamp: DateTime
  effectiveTimestamp: DateTime
  materialSubLot: MaterialSubLotRef
  materialUnit: MaterialUnitRef
  carrier: CarrierRef
  status: MaterialStatusRef
  storageLocation: EquipmentRef
  material: MaterialDefinitionRef
  materialUse: MaterialUse
  shipmentItem: ShipmentItemRef
  quantity: Float
}

input InventoryTransactionRef {
  id: ID
  transactionId: String
  user: UserRef
  owner: PartnerRef
  previous: InventoryTransactionRef
  next: InventoryTransactionRef
  timestamp: DateTime
  effectiveTimestamp: DateTime
  materialSubLot: MaterialSubLotRef
  materialUnit: MaterialUnitRef
  carrier: CarrierRef
  status: MaterialStatusRef
  storageLocation: EquipmentRef
  material: MaterialDefinitionRef
  materialUse: MaterialUse
  shipmentItem: ShipmentItemRef
  quantity: Float
}

type JobOrder
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
  @join__type(graph: PROFILES, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  createdDateTime: DateTime @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  version: String @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
  parent(filter: JobOrderFilter): JobOrder @join__field(graph: CORE)
  children(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @join__field(graph: CORE)
  workType: WorkType @join__field(graph: CORE)
  workDefinitionType: String @join__field(graph: CORE)
  duration: Float @join__field(graph: CORE)
  durationUoM(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: CORE)
  workMaster(filter: WorkMasterFilter): WorkMaster @join__field(graph: CORE)
  workDirective(filter: WorkDirectiveFilter): WorkDirective @join__field(graph: CORE)
  materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @join__field(graph: CORE)
  equipmentSpecifications(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification] @join__field(graph: CORE)
  personnelSpecifications(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification] @join__field(graph: CORE)
  scheduledStartDateTime: DateTime @join__field(graph: CORE)
  scheduledEndDateTime: DateTime @join__field(graph: CORE)
  scheduledDuration: Float @join__field(graph: CORE)
  equipment(filter: EquipmentFilter): Equipment @join__field(graph: CORE)
  quantity: Float @join__field(graph: CORE)
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: CORE)
  priority: Int @join__field(graph: CORE)
  hierarchyScope: String @join__field(graph: CORE)
  dispatchStatus: DispatchStatus @join__field(graph: CORE)
  operationsRequest(filter: OperationsRequestFilter): OperationsRequest @join__field(graph: CORE)
  operationsSegment(filter: OperationsSegmentFilter): OperationsSegment @join__field(graph: CORE)
  jobResponses(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse] @join__field(graph: CORE)
  jobOrderNotes(filter: JobOrderNoteFilter, order: JobOrderNoteOrder, first: Int, offset: Int): [JobOrderNote] @join__field(graph: CORE)
  childrenAggregate(filter: JobOrderFilter): JobOrderAggregateResult @join__field(graph: CORE)
  materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult @join__field(graph: CORE)
  equipmentSpecificationsAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult @join__field(graph: CORE)
  personnelSpecificationsAggregate(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult @join__field(graph: CORE)
  jobResponsesAggregate(filter: JobResponseFilter): JobResponseAggregateResult @join__field(graph: CORE)
  jobOrderNotesAggregate(filter: JobOrderNoteFilter): JobOrderNoteAggregateResult @join__field(graph: CORE)
  lastEvent(filter: LastEventFilter): EventsByField @join__field(graph: PROFILES, requires: "scheduledStartDateTime")
}

type JobOrderAggregateResult {
  count: Int
  createdDateTimeMin: DateTime
  createdDateTimeMax: DateTime
  nameMin: String
  nameMax: String
  versionMin: String
  versionMax: String
  descriptionMin: String
  descriptionMax: String
  workDefinitionTypeMin: String
  workDefinitionTypeMax: String
  durationMin: Float
  durationMax: Float
  durationSum: Float
  durationAvg: Float
  scheduledStartDateTimeMin: DateTime
  scheduledStartDateTimeMax: DateTime
  scheduledEndDateTimeMin: DateTime
  scheduledEndDateTimeMax: DateTime
  scheduledDurationMin: Float
  scheduledDurationMax: Float
  scheduledDurationSum: Float
  scheduledDurationAvg: Float
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
  priorityMin: Int
  priorityMax: Int
  prioritySum: Int
  priorityAvg: Float
  hierarchyScopeMin: String
  hierarchyScopeMax: String
}

input JobOrderFilter {
  id: [ID!]
  isActive: Boolean
  createdDateTime: DateTimeFilter
  name: StringHashFilter_StringRegExpFilter
  description: StringHashFilter
  workType: WorkType_hash
  workDefinitionType: StringHashFilter
  scheduledStartDateTime: DateTimeFilter
  scheduledEndDateTime: DateTimeFilter
  dispatchStatus: DispatchStatus_hash
  has: [JobOrderHasFilter]
  and: [JobOrderFilter]
  or: [JobOrderFilter]
  not: JobOrderFilter
}

enum JobOrderHasFilter {
  isActive
  createdDateTime
  name
  version
  description
  parent
  children
  workType
  workDefinitionType
  duration
  durationUoM
  workMaster
  workDirective
  materialSpecifications
  equipmentSpecifications
  personnelSpecifications
  scheduledStartDateTime
  scheduledEndDateTime
  scheduledDuration
  equipment
  quantity
  quantityUoM
  priority
  hierarchyScope
  dispatchStatus
  operationsRequest
  operationsSegment
  jobResponses
  jobOrderNotes
}

type JobOrderNote {
  id: ID!
  comment: String
  createdDateTime: DateTime
  editedDateTime: DateTime
  createdBy(filter: UserFilter): User
  modifiedBy(filter: UserFilter): User
  isActive: Boolean
  jobOrder(filter: JobOrderFilter): JobOrder
}

type JobOrderNoteAggregateResult {
  count: Int
  commentMin: String
  commentMax: String
  createdDateTimeMin: DateTime
  createdDateTimeMax: DateTime
  editedDateTimeMin: DateTime
  editedDateTimeMax: DateTime
}

input JobOrderNoteFilter {
  id: [ID!]
  has: [JobOrderNoteHasFilter]
  and: [JobOrderNoteFilter]
  or: [JobOrderNoteFilter]
  not: JobOrderNoteFilter
}

enum JobOrderNoteHasFilter {
  comment
  createdDateTime
  editedDateTime
  createdBy
  modifiedBy
  isActive
  jobOrder
}

input JobOrderNoteOrder {
  asc: JobOrderNoteOrderable
  desc: JobOrderNoteOrderable
  then: JobOrderNoteOrder
}

enum JobOrderNoteOrderable {
  comment
  createdDateTime
  editedDateTime
}

input JobOrderNotePatch {
  comment: String
  createdDateTime: DateTime
  editedDateTime: DateTime
  createdBy: UserRef
  modifiedBy: UserRef
  isActive: Boolean
  jobOrder: JobOrderRef
}

input JobOrderNoteRef {
  id: ID
  comment: String
  createdDateTime: DateTime
  editedDateTime: DateTime
  createdBy: UserRef
  modifiedBy: UserRef
  isActive: Boolean
  jobOrder: JobOrderRef
}

input JobOrderOrder {
  asc: JobOrderOrderable
  desc: JobOrderOrderable
  then: JobOrderOrder
}

enum JobOrderOrderable {
  createdDateTime
  name
  version
  description
  workDefinitionType
  duration
  scheduledStartDateTime
  scheduledEndDateTime
  scheduledDuration
  quantity
  priority
  hierarchyScope
}

input JobOrderPatch {
  isActive: Boolean
  createdDateTime: DateTime
  version: String
  description: String
  parent: JobOrderRef
  children: [JobOrderRef]
  workType: WorkType
  workDefinitionType: String
  duration: Float
  durationUoM: UnitOfMeasureRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  materialSpecifications: [MaterialSpecificationRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  scheduledStartDateTime: DateTime
  scheduledEndDateTime: DateTime
  scheduledDuration: Float
  equipment: EquipmentRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  priority: Int
  hierarchyScope: String
  dispatchStatus: DispatchStatus
  operationsRequest: OperationsRequestRef
  operationsSegment: OperationsSegmentRef
  jobResponses: [JobResponseRef]
  jobOrderNotes: [JobOrderNoteRef]
}

input JobOrderRef {
  id: ID
  isActive: Boolean
  createdDateTime: DateTime
  name: String
  version: String
  description: String
  parent: JobOrderRef
  children: [JobOrderRef]
  workType: WorkType
  workDefinitionType: String
  duration: Float
  durationUoM: UnitOfMeasureRef
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  materialSpecifications: [MaterialSpecificationRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  scheduledStartDateTime: DateTime
  scheduledEndDateTime: DateTime
  scheduledDuration: Float
  equipment: EquipmentRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  priority: Int
  hierarchyScope: String
  dispatchStatus: DispatchStatus
  operationsRequest: OperationsRequestRef
  operationsSegment: OperationsSegmentRef
  jobResponses: [JobResponseRef]
  jobOrderNotes: [JobOrderNoteRef]
}

type JobResponse
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
  @join__type(graph: PROFILES, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  createdDateTime: DateTime @join__field(graph: CORE)
  modifiedDateTime: DateTime @join__field(graph: CORE)
  workDirective(filter: WorkDirectiveFilter): WorkDirective @join__field(graph: CORE)
  operator(filter: UserFilter): User @join__field(graph: CORE)
  equipment(filter: EquipmentFilter): Equipment @join__field(graph: CORE)
  startDateTime: DateTime @join__field(graph: CORE)
  endDateTime: DateTime @join__field(graph: CORE)
  productionDate: String @join__field(graph: CORE)
  actualDuration: Float @join__field(graph: CORE)
  jobOrder(filter: JobOrderFilter): JobOrder @join__field(graph: CORE)
  events(filter: EventLogFilter, order: EventLogOrder, first: Int, offset: Int): [EventLog] @join__field(graph: CORE)
  quantities(filter: QuantityLogFilter, order: QuantityLogOrder, first: Int, offset: Int): [QuantityLog] @join__field(graph: CORE)
  eventsAggregate(filter: EventLogFilter): EventLogAggregateResult @join__field(graph: CORE)
  quantitiesAggregate(filter: QuantityLogFilter): QuantityLogAggregateResult @join__field(graph: CORE)
  duration: Float @join__field(graph: PROFILES, requires: "startDateTime endDateTime")

  """deprecated"""
  eventList: [EventLog] @join__field(graph: PROFILES)
  eventsByField(filter: EventsByFieldFilter): [EventsByField] @join__field(graph: PROFILES, requires: "startDateTime endDateTime")
  eventSummaryByReason(filter: EventSummaryByReasonFilter): [EventSummaryByReason] @join__field(graph: PROFILES, requires: "startDateTime endDateTime")
  quantitySummary(filter: QuantitySummaryFilter): [QuantitySummary] @join__field(graph: PROFILES, requires: "startDateTime endDateTime")
  runRateSummary(filter: RunRateFilter): RunRateSummary @join__field(graph: PROFILES, requires: "startDateTime endDateTime")
  maintenanceCalls: [MaintenanceLog] @join__field(graph: PROFILES, requires: "startDateTime endDateTime")
}

type JobResponseAggregateResult {
  count: Int
  createdDateTimeMin: DateTime
  createdDateTimeMax: DateTime
  modifiedDateTimeMin: DateTime
  modifiedDateTimeMax: DateTime
  startDateTimeMin: DateTime
  startDateTimeMax: DateTime
  endDateTimeMin: DateTime
  endDateTimeMax: DateTime
  productionDateMin: String
  productionDateMax: String
  actualDurationMin: Float
  actualDurationMax: Float
  actualDurationSum: Float
  actualDurationAvg: Float
}

input JobResponseFilter {
  id: [ID!]
  isActive: Boolean
  startDateTime: DateTimeFilter
  endDateTime: DateTimeFilter
  productionDate: StringHashFilter
  has: [JobResponseHasFilter]
  and: [JobResponseFilter]
  or: [JobResponseFilter]
  not: JobResponseFilter
}

enum JobResponseHasFilter {
  isActive
  createdDateTime
  modifiedDateTime
  workDirective
  operator
  equipment
  startDateTime
  endDateTime
  productionDate
  actualDuration
  jobOrder
  events
  quantities
}

input JobResponseOrder {
  asc: JobResponseOrderable
  desc: JobResponseOrderable
  then: JobResponseOrder
}

enum JobResponseOrderable {
  createdDateTime
  modifiedDateTime
  startDateTime
  endDateTime
  productionDate
  actualDuration
}

input JobResponsePatch {
  isActive: Boolean
  createdDateTime: DateTime
  modifiedDateTime: DateTime
  workDirective: WorkDirectiveRef
  operator: UserRef
  equipment: EquipmentRef
  startDateTime: DateTime
  endDateTime: DateTime
  productionDate: String
  actualDuration: Float
  jobOrder: JobOrderRef
  events: [EventLogRef]
  quantities: [QuantityLogRef]
}

input JobResponseRef {
  id: ID
  isActive: Boolean
  createdDateTime: DateTime
  modifiedDateTime: DateTime
  workDirective: WorkDirectiveRef
  operator: UserRef
  equipment: EquipmentRef
  startDateTime: DateTime
  endDateTime: DateTime
  productionDate: String
  actualDuration: Float
  jobOrder: JobOrderRef
  events: [EventLogRef]
  quantities: [QuantityLogRef]
}

scalar join__FieldSet

enum join__Graph {
  CORE @join__graph(name: "core" url: "http://localhost:8080/graphql")
  PROFILES @join__graph(name: "profiles" url: "http://localhost:4001/query")
}

input LastEventFilter {
  includeField: String
  includeValue: String
}

"""
Store the heartbeat timestamps of connected libre-services.
microservices can subscribe to this entity to check the status of their subscription
"""
type LibreService
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  heartbeat: DateTime @join__field(graph: CORE)
}

type LibreServiceAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  heartbeatMin: DateTime
  heartbeatMax: DateTime
}

input LibreServiceFilter {
  id: [ID!]
  name: StringHashFilter
  has: [LibreServiceHasFilter]
  and: [LibreServiceFilter]
  or: [LibreServiceFilter]
  not: LibreServiceFilter
}

enum LibreServiceHasFilter {
  name
  heartbeat
}

input LibreServiceOrder {
  asc: LibreServiceOrderable
  desc: LibreServiceOrderable
  then: LibreServiceOrder
}

enum LibreServiceOrderable {
  name
  heartbeat
}

input LibreServicePatch {
  heartbeat: DateTime
}

input LibreServiceRef {
  id: ID
  name: String
  heartbeat: DateTime
}

enum MachineState {
  Stopped
  Resetting
  Idle
  Starting
  Execute
  UnHolding
  Held
  Holding
  Completing
  Complete
  UnSuspending
  Suspended
  Suspending
  Aborting
  Aborted
  Cleaning
  Stopping
}

"""An event from the maintenanceLog"""
type MaintenanceLog {
  time: DateTime
  requestType: String
  comment: String
  priority: String
  state: String
  type: String
  workflowInstanceID: String
}

type MaterialAlternate
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  material(filter: MaterialDefinitionFilter): MaterialDefinition! @join__field(graph: CORE)
  alternateMaterial(filter: MaterialDefinitionFilter): MaterialDefinition! @join__field(graph: CORE)
  effectiveDateTime: DateTime! @join__field(graph: CORE)
  priorityOrder: Int! @join__field(graph: CORE)
}

type MaterialAlternateAggregateResult {
  count: Int
  effectiveDateTimeMin: DateTime
  effectiveDateTimeMax: DateTime
  priorityOrderMin: Int
  priorityOrderMax: Int
  priorityOrderSum: Int
  priorityOrderAvg: Float
}

input MaterialAlternateFilter {
  id: [ID!]
  isActive: Boolean
  has: [MaterialAlternateHasFilter]
  and: [MaterialAlternateFilter]
  or: [MaterialAlternateFilter]
  not: MaterialAlternateFilter
}

enum MaterialAlternateHasFilter {
  isActive
  material
  alternateMaterial
  effectiveDateTime
  priorityOrder
}

input MaterialAlternateOrder {
  asc: MaterialAlternateOrderable
  desc: MaterialAlternateOrderable
  then: MaterialAlternateOrder
}

enum MaterialAlternateOrderable {
  effectiveDateTime
  priorityOrder
}

input MaterialAlternatePatch {
  isActive: Boolean
  material: MaterialDefinitionRef
  alternateMaterial: MaterialDefinitionRef
  effectiveDateTime: DateTime
  priorityOrder: Int
}

input MaterialAlternateRef {
  id: ID
  isActive: Boolean
  material: MaterialDefinitionRef
  alternateMaterial: MaterialDefinitionRef
  effectiveDateTime: DateTime
  priorityOrder: Int
}

"""
A unique identification of a specific material class, within the scope
of the information exchanged (production capability, production
schedule, production performance, …)
The ID shall be used in other parts of the model when the material
class needs to be identified, such as the production capability for
this material class, or a production response identifying the
material class used.
"""
type MaterialClass
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  code: String! @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
  properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property] @join__field(graph: CORE)
  scheduleSortOrder: Int @join__field(graph: CORE)
  parent(filter: MaterialClassFilter): MaterialClass @join__field(graph: CORE)
  children(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass] @join__field(graph: CORE)
  inventoryHandlingPolicy(filter: InventoryHandlingPolicyFilter): InventoryHandlingPolicy @join__field(graph: CORE)
  propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult @join__field(graph: CORE)
  childrenAggregate(filter: MaterialClassFilter): MaterialClassAggregateResult @join__field(graph: CORE)
}

type MaterialClassAggregateResult {
  count: Int
  codeMin: String
  codeMax: String
  descriptionMin: String
  descriptionMax: String
  scheduleSortOrderMin: Int
  scheduleSortOrderMax: Int
  scheduleSortOrderSum: Int
  scheduleSortOrderAvg: Float
}

input MaterialClassFilter {
  id: [ID!]
  isActive: Boolean
  code: StringHashFilter
  has: [MaterialClassHasFilter]
  and: [MaterialClassFilter]
  or: [MaterialClassFilter]
  not: MaterialClassFilter
}

enum MaterialClassHasFilter {
  isActive
  code
  description
  properties
  scheduleSortOrder
  parent
  children
  inventoryHandlingPolicy
}

input MaterialClassOrder {
  asc: MaterialClassOrderable
  desc: MaterialClassOrderable
  then: MaterialClassOrder
}

enum MaterialClassOrderable {
  code
  description
  scheduleSortOrder
}

input MaterialClassPatch {
  isActive: Boolean
  description: String
  properties: [PropertyRef]
  scheduleSortOrder: Int
  parent: MaterialClassRef
  children: [MaterialClassRef]
  inventoryHandlingPolicy: InventoryHandlingPolicyRef
}

input MaterialClassRef {
  id: ID
  isActive: Boolean
  code: String
  description: String
  properties: [PropertyRef]
  scheduleSortOrder: Int
  parent: MaterialClassRef
  children: [MaterialClassRef]
  inventoryHandlingPolicy: InventoryHandlingPolicyRef
}

type MaterialDefinition
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
  @join__type(graph: PROFILES, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  code: String! @join__field(graph: CORE)
  name: String @join__field(graph: CORE)
  materialClass(filter: MaterialClassFilter): MaterialClass @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
  properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property] @join__field(graph: CORE)
  scheduleSortOrder: Int @join__field(graph: CORE)
  baseUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure! @join__field(graph: CORE)
  uomConversions(filter: UnitOfMeasureConversionFilter, order: UnitOfMeasureConversionOrder, first: Int, offset: Int): [UnitOfMeasureConversion] @join__field(graph: CORE)
  workSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @join__field(graph: CORE)
  operationsDefinitions(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition] @join__field(graph: CORE)
  sublots(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @join__field(graph: CORE)
  units(filter: MaterialUnitFilter, order: MaterialUnitOrder, first: Int, offset: Int): [MaterialUnit] @join__field(graph: CORE)
  events(filter: InventoryTransactionFilter, order: InventoryTransactionOrder, first: Int, offset: Int): [InventoryTransaction] @join__field(graph: CORE)
  value: Float @join__field(graph: CORE)
  valueCurrency: String @join__field(graph: CORE)
  weightKG: Float @join__field(graph: CORE)
  supplier: String @join__field(graph: CORE)
  serialMask: String @join__field(graph: CORE)
  inventoryHandlingPolicy(filter: InventoryHandlingPolicyFilter): InventoryHandlingPolicy @join__field(graph: CORE)
  alternates(filter: MaterialAlternateFilter, order: MaterialAlternateOrder, first: Int, offset: Int): [MaterialAlternate] @join__field(graph: CORE)
  materialEquipment(filter: MaterialEquipmentFilter, order: MaterialEquipmentOrder, first: Int, offset: Int): [MaterialEquipment] @join__field(graph: CORE)
  shipmentItems(filter: ShipmentItemFilter, order: ShipmentItemOrder, first: Int, offset: Int): [ShipmentItem] @join__field(graph: CORE)
  OrderLines(filter: OrderLineFilter, order: OrderLineOrder, first: Int, offset: Int): [OrderLine] @join__field(graph: CORE)
  transferrableMaterials(filter: MaterialDefinitionFilter, order: MaterialDefinitionOrder, first: Int, offset: Int): [MaterialDefinition] @join__field(graph: CORE)
  customerMaterialCode: String @join__field(graph: CORE)
  propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult @join__field(graph: CORE)
  uomConversionsAggregate(filter: UnitOfMeasureConversionFilter): UnitOfMeasureConversionAggregateResult @join__field(graph: CORE)
  workSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult @join__field(graph: CORE)
  operationsDefinitionsAggregate(filter: OperationsDefinitionFilter): OperationsDefinitionAggregateResult @join__field(graph: CORE)
  sublotsAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult @join__field(graph: CORE)
  unitsAggregate(filter: MaterialUnitFilter): MaterialUnitAggregateResult @join__field(graph: CORE)
  eventsAggregate(filter: InventoryTransactionFilter): InventoryTransactionAggregateResult @join__field(graph: CORE)
  alternatesAggregate(filter: MaterialAlternateFilter): MaterialAlternateAggregateResult @join__field(graph: CORE)
  materialEquipmentAggregate(filter: MaterialEquipmentFilter): MaterialEquipmentAggregateResult @join__field(graph: CORE)
  shipmentItemsAggregate(filter: ShipmentItemFilter): ShipmentItemAggregateResult @join__field(graph: CORE)
  OrderLinesAggregate(filter: OrderLineFilter): OrderLineAggregateResult @join__field(graph: CORE)
  transferrableMaterialsAggregate(filter: MaterialDefinitionFilter): MaterialDefinitionAggregateResult @join__field(graph: CORE)
}

type MaterialDefinitionAggregateResult {
  count: Int
  codeMin: String
  codeMax: String
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
  scheduleSortOrderMin: Int
  scheduleSortOrderMax: Int
  scheduleSortOrderSum: Int
  scheduleSortOrderAvg: Float
  valueMin: Float
  valueMax: Float
  valueSum: Float
  valueAvg: Float
  valueCurrencyMin: String
  valueCurrencyMax: String
  weightKGMin: Float
  weightKGMax: Float
  weightKGSum: Float
  weightKGAvg: Float
  supplierMin: String
  supplierMax: String
  serialMaskMin: String
  serialMaskMax: String
  customerMaterialCodeMin: String
  customerMaterialCodeMax: String
}

input MaterialDefinitionFilter {
  id: [ID!]
  isActive: Boolean
  code: StringHashFilter
  name: StringHashFilter
  customerMaterialCode: StringHashFilter
  has: [MaterialDefinitionHasFilter]
  and: [MaterialDefinitionFilter]
  or: [MaterialDefinitionFilter]
  not: MaterialDefinitionFilter
}

enum MaterialDefinitionHasFilter {
  isActive
  code
  name
  materialClass
  description
  properties
  scheduleSortOrder
  baseUnitOfMeasure
  uomConversions
  workSpecifications
  operationsDefinitions
  sublots
  units
  events
  value
  valueCurrency
  weightKG
  supplier
  serialMask
  inventoryHandlingPolicy
  alternates
  materialEquipment
  shipmentItems
  OrderLines
  transferrableMaterials
  customerMaterialCode
}

input MaterialDefinitionOrder {
  asc: MaterialDefinitionOrderable
  desc: MaterialDefinitionOrderable
  then: MaterialDefinitionOrder
}

enum MaterialDefinitionOrderable {
  code
  name
  description
  scheduleSortOrder
  value
  valueCurrency
  weightKG
  supplier
  serialMask
  customerMaterialCode
}

input MaterialDefinitionPatch {
  isActive: Boolean
  name: String
  materialClass: MaterialClassRef
  description: String
  properties: [PropertyRef]
  scheduleSortOrder: Int
  baseUnitOfMeasure: UnitOfMeasureRef
  uomConversions: [UnitOfMeasureConversionRef]
  workSpecifications: [MaterialSpecificationRef]
  operationsDefinitions: [OperationsDefinitionRef]
  sublots: [MaterialSubLotRef]
  units: [MaterialUnitRef]
  events: [InventoryTransactionRef]
  value: Float
  valueCurrency: String
  weightKG: Float
  supplier: String
  serialMask: String
  inventoryHandlingPolicy: InventoryHandlingPolicyRef
  alternates: [MaterialAlternateRef]
  materialEquipment: [MaterialEquipmentRef]
  shipmentItems: [ShipmentItemRef]
  OrderLines: [OrderLineRef]
  transferrableMaterials: [MaterialDefinitionRef]
  customerMaterialCode: String
}

input MaterialDefinitionRef {
  id: ID
  isActive: Boolean
  code: String
  name: String
  materialClass: MaterialClassRef
  description: String
  properties: [PropertyRef]
  scheduleSortOrder: Int
  baseUnitOfMeasure: UnitOfMeasureRef
  uomConversions: [UnitOfMeasureConversionRef]
  workSpecifications: [MaterialSpecificationRef]
  operationsDefinitions: [OperationsDefinitionRef]
  sublots: [MaterialSubLotRef]
  units: [MaterialUnitRef]
  events: [InventoryTransactionRef]
  value: Float
  valueCurrency: String
  weightKG: Float
  supplier: String
  serialMask: String
  inventoryHandlingPolicy: InventoryHandlingPolicyRef
  alternates: [MaterialAlternateRef]
  materialEquipment: [MaterialEquipmentRef]
  shipmentItems: [ShipmentItemRef]
  OrderLines: [OrderLineRef]
  transferrableMaterials: [MaterialDefinitionRef]
  customerMaterialCode: String
}

type MaterialEquipment
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
  @join__type(graph: PROFILES, key: "id")
{
  id: ID! @join__field(graph: CORE)
  key: String! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  material(filter: MaterialDefinitionFilter): MaterialDefinition! @join__field(graph: CORE)
  equipment(filter: EquipmentFilter): Equipment! @join__field(graph: CORE)
  inventoryMax: Int @join__field(graph: CORE)
  inventoryMin: Int @join__field(graph: CORE)
  sortOrder: Int @join__field(graph: CORE)
  stockOnHand: Float @join__field(graph: PROFILES)
}

type MaterialEquipmentAggregateResult {
  count: Int
  keyMin: String
  keyMax: String
  inventoryMaxMin: Int
  inventoryMaxMax: Int
  inventoryMaxSum: Int
  inventoryMaxAvg: Float
  inventoryMinMin: Int
  inventoryMinMax: Int
  inventoryMinSum: Int
  inventoryMinAvg: Float
  sortOrderMin: Int
  sortOrderMax: Int
  sortOrderSum: Int
  sortOrderAvg: Float
}

input MaterialEquipmentFilter {
  id: [ID!]
  key: StringHashFilter
  isActive: Boolean
  has: [MaterialEquipmentHasFilter]
  and: [MaterialEquipmentFilter]
  or: [MaterialEquipmentFilter]
  not: MaterialEquipmentFilter
}

enum MaterialEquipmentHasFilter {
  key
  isActive
  material
  equipment
  inventoryMax
  inventoryMin
  sortOrder
}

input MaterialEquipmentOrder {
  asc: MaterialEquipmentOrderable
  desc: MaterialEquipmentOrderable
  then: MaterialEquipmentOrder
}

enum MaterialEquipmentOrderable {
  key
  inventoryMax
  inventoryMin
  sortOrder
}

input MaterialEquipmentPatch {
  isActive: Boolean
  material: MaterialDefinitionRef
  equipment: EquipmentRef
  inventoryMax: Int
  inventoryMin: Int
  sortOrder: Int
}

input MaterialEquipmentRef {
  id: ID
  key: String
  isActive: Boolean
  material: MaterialDefinitionRef
  equipment: EquipmentRef
  inventoryMax: Int
  inventoryMin: Int
  sortOrder: Int
}

type MaterialEventRuleset {
  id: ID!
  name: String!
  triggerWhen: [RulesetTriggerOption]
  segment(filter: OperationsSegmentFilter): OperationsSegment
  targetMaterial: String!
  targetMaterialOp: String!
  eventDefs(filter: EventDefinitionFilter, order: EventDefinitionOrder, first: Int, offset: Int): [EventDefinition]
  eventDefsAggregate(filter: EventDefinitionFilter): EventDefinitionAggregateResult
}

type MaterialEventRulesetAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  targetMaterialMin: String
  targetMaterialMax: String
  targetMaterialOpMin: String
  targetMaterialOpMax: String
}

input MaterialEventRulesetFilter {
  id: [ID!]
  has: [MaterialEventRulesetHasFilter]
  and: [MaterialEventRulesetFilter]
  or: [MaterialEventRulesetFilter]
  not: MaterialEventRulesetFilter
}

enum MaterialEventRulesetHasFilter {
  name
  triggerWhen
  segment
  targetMaterial
  targetMaterialOp
  eventDefs
}

input MaterialEventRulesetOrder {
  asc: MaterialEventRulesetOrderable
  desc: MaterialEventRulesetOrderable
  then: MaterialEventRulesetOrder
}

enum MaterialEventRulesetOrderable {
  name
  targetMaterial
  targetMaterialOp
}

input MaterialEventRulesetPatch {
  name: String
  triggerWhen: [RulesetTriggerOption]
  segment: OperationsSegmentRef
  targetMaterial: String
  targetMaterialOp: String
  eventDefs: [EventDefinitionRef]
}

input MaterialEventRulesetRef {
  id: ID
  name: String
  triggerWhen: [RulesetTriggerOption]
  segment: OperationsSegmentRef
  targetMaterial: String
  targetMaterialOp: String
  eventDefs: [EventDefinitionRef]
}

type MaterialLot
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  code: String! @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
}

type MaterialLotAggregateResult {
  count: Int
  codeMin: String
  codeMax: String
  descriptionMin: String
  descriptionMax: String
}

input MaterialLotFilter {
  id: [ID!]
  isActive: Boolean
  code: StringHashFilter
  has: [MaterialLotHasFilter]
  and: [MaterialLotFilter]
  or: [MaterialLotFilter]
  not: MaterialLotFilter
}

enum MaterialLotHasFilter {
  isActive
  code
  description
}

input MaterialLotOrder {
  asc: MaterialLotOrderable
  desc: MaterialLotOrderable
  then: MaterialLotOrder
}

enum MaterialLotOrderable {
  code
  description
}

input MaterialLotPatch {
  isActive: Boolean
  description: String
}

input MaterialLotRef {
  id: ID
  isActive: Boolean
  code: String
  description: String
}

input materialQuantityMovement {
  materialDefinition: ExtMaterialDefinitionRef!
  quantity: Float!
}

type MaterialSpecification
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  workMaster(filter: WorkMasterFilter): WorkMaster @join__field(graph: CORE)
  workDirective(filter: WorkDirectiveFilter): WorkDirective @join__field(graph: CORE)
  jobOrder(filter: JobOrderFilter): JobOrder @join__field(graph: CORE)
  operationsSegment(filter: OperationsSegmentFilter): OperationsSegment @join__field(graph: CORE)
  billOfMaterial(filter: BillOfMaterialFilter): BillOfMaterial @join__field(graph: CORE)
  material(filter: MaterialDefinitionFilter): MaterialDefinition @join__field(graph: CORE)
  materialClass(filter: MaterialClassFilter): MaterialClass @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
  materialUse: MaterialUse! @join__field(graph: CORE)
  isTracked: Boolean @join__field(graph: CORE)
  quantity: Float @join__field(graph: CORE)
  uom(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: CORE)
}

type MaterialSpecificationAggregateResult {
  count: Int
  descriptionMin: String
  descriptionMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input MaterialSpecificationFilter {
  id: [ID!]
  isActive: Boolean
  has: [MaterialSpecificationHasFilter]
  and: [MaterialSpecificationFilter]
  or: [MaterialSpecificationFilter]
  not: MaterialSpecificationFilter
}

enum MaterialSpecificationHasFilter {
  isActive
  workMaster
  workDirective
  jobOrder
  operationsSegment
  billOfMaterial
  material
  materialClass
  description
  materialUse
  isTracked
  quantity
  uom
}

input MaterialSpecificationOrder {
  asc: MaterialSpecificationOrderable
  desc: MaterialSpecificationOrderable
  then: MaterialSpecificationOrder
}

enum MaterialSpecificationOrderable {
  description
  quantity
}

input MaterialSpecificationPatch {
  isActive: Boolean
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  jobOrder: JobOrderRef
  operationsSegment: OperationsSegmentRef
  billOfMaterial: BillOfMaterialRef
  material: MaterialDefinitionRef
  materialClass: MaterialClassRef
  description: String
  materialUse: MaterialUse
  isTracked: Boolean
  quantity: Float
  uom: UnitOfMeasureRef
}

input MaterialSpecificationRef {
  id: ID
  isActive: Boolean
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  jobOrder: JobOrderRef
  operationsSegment: OperationsSegmentRef
  billOfMaterial: BillOfMaterialRef
  material: MaterialDefinitionRef
  materialClass: MaterialClassRef
  description: String
  materialUse: MaterialUse
  isTracked: Boolean
  quantity: Float
  uom: UnitOfMeasureRef
}

type MaterialStateModel
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  states(filter: MaterialStateTransitionFilter, first: Int, offset: Int): [MaterialStateTransition!]! @join__field(graph: CORE)
  inventoryHandlingRules(filter: InventoryHandlingRuleFilter, first: Int, offset: Int): [InventoryHandlingRule] @join__field(graph: CORE)
  statesAggregate(filter: MaterialStateTransitionFilter): MaterialStateTransitionAggregateResult @join__field(graph: CORE)
  inventoryHandlingRulesAggregate(filter: InventoryHandlingRuleFilter): InventoryHandlingRuleAggregateResult @join__field(graph: CORE)
}

type MaterialStateModelAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
}

input MaterialStateModelFilter {
  id: [ID!]
  isActive: Boolean
  name: StringHashFilter
  has: [MaterialStateModelHasFilter]
  and: [MaterialStateModelFilter]
  or: [MaterialStateModelFilter]
  not: MaterialStateModelFilter
}

enum MaterialStateModelHasFilter {
  isActive
  name
  states
  inventoryHandlingRules
}

input MaterialStateModelOrder {
  asc: MaterialStateModelOrderable
  desc: MaterialStateModelOrderable
  then: MaterialStateModelOrder
}

enum MaterialStateModelOrderable {
  name
}

input MaterialStateModelPatch {
  isActive: Boolean
  states: [MaterialStateTransitionRef!]
  inventoryHandlingRules: [InventoryHandlingRuleRef]
}

input MaterialStateModelRef {
  id: ID
  isActive: Boolean
  name: String
  states: [MaterialStateTransitionRef!]
  inventoryHandlingRules: [InventoryHandlingRuleRef]
}

type MaterialStateTransition
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  status(filter: MaterialStatusFilter): MaterialStatus! @join__field(graph: CORE)
  to(filter: MaterialStatusFilter, order: MaterialStatusOrder, first: Int, offset: Int): [MaterialStatus] @join__field(graph: CORE)
  canReceive: Boolean @join__field(graph: CORE)
  canPack: Boolean @join__field(graph: CORE)
  toAggregate(filter: MaterialStatusFilter): MaterialStatusAggregateResult @join__field(graph: CORE)
}

type MaterialStateTransitionAggregateResult {
  count: Int
}

input MaterialStateTransitionFilter {
  id: [ID!]
  canReceive: Boolean
  canPack: Boolean
  has: [MaterialStateTransitionHasFilter]
  and: [MaterialStateTransitionFilter]
  or: [MaterialStateTransitionFilter]
  not: MaterialStateTransitionFilter
}

enum MaterialStateTransitionHasFilter {
  status
  to
  canReceive
  canPack
}

input MaterialStateTransitionPatch {
  status: MaterialStatusRef
  to: [MaterialStatusRef]
  canReceive: Boolean
  canPack: Boolean
}

input MaterialStateTransitionRef {
  id: ID
  status: MaterialStatusRef
  to: [MaterialStatusRef]
  canReceive: Boolean
  canPack: Boolean
}

type MaterialStatus
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  code: String! @join__field(graph: CORE)
}

type MaterialStatusAggregateResult {
  count: Int
  codeMin: String
  codeMax: String
}

input MaterialStatusFilter {
  id: [ID!]
  isActive: Boolean
  code: StringHashFilter
  has: [MaterialStatusHasFilter]
  and: [MaterialStatusFilter]
  or: [MaterialStatusFilter]
  not: MaterialStatusFilter
}

enum MaterialStatusHasFilter {
  isActive
  code
}

input MaterialStatusOrder {
  asc: MaterialStatusOrderable
  desc: MaterialStatusOrderable
  then: MaterialStatusOrder
}

enum MaterialStatusOrderable {
  code
}

input MaterialStatusPatch {
  isActive: Boolean
}

input MaterialStatusRef {
  id: ID
  isActive: Boolean
  code: String
}

type MaterialSubLot
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  code: String! @join__field(graph: CORE)
  material(filter: MaterialDefinitionFilter): MaterialDefinition! @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
  status(filter: MaterialStatusFilter): MaterialStatus! @join__field(graph: CORE)
  carrier(filter: CarrierFilter): Carrier @join__field(graph: CORE)
  storageLocation(filter: EquipmentFilter): Equipment @join__field(graph: CORE)
  quantity: String @join__field(graph: CORE)
  dataType: DataType @join__field(graph: CORE)
  unitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: CORE)
  properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property] @join__field(graph: CORE)
  events(filter: InventoryTransactionFilter, order: InventoryTransactionOrder, first: Int, offset: Int): [InventoryTransaction] @join__field(graph: CORE)
  propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult @join__field(graph: CORE)
  eventsAggregate(filter: InventoryTransactionFilter): InventoryTransactionAggregateResult @join__field(graph: CORE)
}

type MaterialSubLotAggregateResult {
  count: Int
  codeMin: String
  codeMax: String
  descriptionMin: String
  descriptionMax: String
  quantityMin: String
  quantityMax: String
}

input MaterialSubLotFilter {
  id: [ID!]
  isActive: Boolean
  code: StringHashFilter
  has: [MaterialSubLotHasFilter]
  and: [MaterialSubLotFilter]
  or: [MaterialSubLotFilter]
  not: MaterialSubLotFilter
}

enum MaterialSubLotHasFilter {
  isActive
  code
  material
  description
  status
  carrier
  storageLocation
  quantity
  dataType
  unitOfMeasure
  properties
  events
}

input MaterialSubLotOrder {
  asc: MaterialSubLotOrderable
  desc: MaterialSubLotOrderable
  then: MaterialSubLotOrder
}

enum MaterialSubLotOrderable {
  code
  description
  quantity
}

input MaterialSubLotPatch {
  isActive: Boolean
  material: MaterialDefinitionRef
  description: String
  status: MaterialStatusRef
  carrier: CarrierRef
  storageLocation: EquipmentRef
  quantity: String
  dataType: DataType
  unitOfMeasure: UnitOfMeasureRef
  properties: [PropertyRef]
  events: [InventoryTransactionRef]
}

input MaterialSubLotRef {
  id: ID
  isActive: Boolean
  code: String
  material: MaterialDefinitionRef
  description: String
  status: MaterialStatusRef
  carrier: CarrierRef
  storageLocation: EquipmentRef
  quantity: String
  dataType: DataType
  unitOfMeasure: UnitOfMeasureRef
  properties: [PropertyRef]
  events: [InventoryTransactionRef]
}

type MaterialUnit
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
  @join__type(graph: PROFILES, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  serialNumber: String! @join__field(graph: CORE)
  material(filter: MaterialDefinitionFilter): MaterialDefinition! @join__field(graph: CORE)
  properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property] @join__field(graph: CORE)
  events(filter: InventoryTransactionFilter, order: InventoryTransactionOrder, first: Int, offset: Int): [InventoryTransaction] @join__field(graph: CORE)
  propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult @join__field(graph: CORE)
  eventsAggregate(filter: InventoryTransactionFilter): InventoryTransactionAggregateResult @join__field(graph: CORE)
  carrier: Carrier @join__field(graph: PROFILES)
}

type MaterialUnitAggregateResult {
  count: Int
  serialNumberMin: String
  serialNumberMax: String
}

input MaterialUnitFilter {
  id: [ID!]
  isActive: Boolean
  serialNumber: StringHashFilter
  has: [MaterialUnitHasFilter]
  and: [MaterialUnitFilter]
  or: [MaterialUnitFilter]
  not: MaterialUnitFilter
}

enum MaterialUnitHasFilter {
  isActive
  serialNumber
  material
  properties
  events
}

input MaterialUnitOrder {
  asc: MaterialUnitOrderable
  desc: MaterialUnitOrderable
  then: MaterialUnitOrder
}

enum MaterialUnitOrderable {
  serialNumber
}

input MaterialUnitPatch {
  isActive: Boolean
  material: MaterialDefinitionRef
  properties: [PropertyRef]
  events: [InventoryTransactionRef]
}

input MaterialUnitRef {
  id: ID
  isActive: Boolean
  serialNumber: String
  material: MaterialDefinitionRef
  properties: [PropertyRef]
  events: [InventoryTransactionRef]
}

enum MaterialUse {
  Initial
  Produced
  ByProduct
  CoProduct
  Consumable
  Consumed
  Transferred
  Scrap
  Rework
  Received
  Packed
  Shipped
}

input MaterialUse_hash {
  eq: MaterialUse
  in: [MaterialUse]
}

type Menu {
  id: ID!
  label: String!
  access(filter: RoleFilter, order: RoleOrder, first: Int, offset: Int): [Role!]!
  parent(filter: MenuFilter): Menu
  children(filter: MenuFilter, order: MenuOrder, first: Int, offset: Int): [Menu!]
  menuPage: String
  icon: String
  isSection: Boolean!
  isPage: Boolean!
  orderNumber: Int
  accessAggregate(filter: RoleFilter): RoleAggregateResult
  childrenAggregate(filter: MenuFilter): MenuAggregateResult
}

type MenuAggregateResult {
  count: Int
  labelMin: String
  labelMax: String
  menuPageMin: String
  menuPageMax: String
  iconMin: String
  iconMax: String
  orderNumberMin: Int
  orderNumberMax: Int
  orderNumberSum: Int
  orderNumberAvg: Float
}

input MenuFilter {
  id: [ID!]
  label: StringHashFilter
  has: [MenuHasFilter]
  and: [MenuFilter]
  or: [MenuFilter]
  not: MenuFilter
}

enum MenuHasFilter {
  label
  access
  parent
  children
  menuPage
  icon
  isSection
  isPage
  orderNumber
}

input MenuOrder {
  asc: MenuOrderable
  desc: MenuOrderable
  then: MenuOrder
}

enum MenuOrderable {
  label
  menuPage
  icon
  orderNumber
}

input MenuPatch {
  label: String
  access: [RoleRef!]
  parent: MenuRef
  children: [MenuRef!]
  menuPage: String
  icon: String
  isSection: Boolean
  isPage: Boolean
  orderNumber: Int
}

input MenuRef {
  id: ID
  label: String
  access: [RoleRef!]
  parent: MenuRef
  children: [MenuRef!]
  menuPage: String
  icon: String
  isSection: Boolean
  isPage: Boolean
  orderNumber: Int
}

enum MessageClass {
  EventLog
  QuantityLog
  PerformanceLog
  AttendanceLog
  JobRequest
  JobResponse
}

enum Mode {
  BATCH
  SINGLE
}

input MoveMaterialQuantitiesBetweenCarriersInput {
  materialQuantities: [materialQuantityMovement]!
  carrierInitial: ExtCarrierRef!
  carrierDestination: ExtCarrierRef!
  user: ExtUserRef!
}

input MoveMaterialUnitsInput {
  materialUnits: [ExtMaterialUnitRef]!
  newLocation: ExtCarrierRef!
  user: ExtUserRef!
}

enum mpmORCRevokeTriggers {
  FIFTEEN_MINUTES
  THIRTY_MINUTES
  FORTYFIVE_MINUTES
  SIXTY_MINUTES
  ORDER_CLOSE
  BREAK_TIME_START
  BREAK_TIME_END
}

enum mpmORCWarnTriggers {
  FIFTEEN_MINUTES
  THIRTY_MINUTES
  FORTYFIVE_MINUTES
  SIXTY_MINUTES
  ORDER_CLOSE
  BREAK_TIME_START
  BREAK_TIME_END
}

type MultiPolygon {
  polygons: [Polygon!]!
}

input MultiPolygonRef {
  polygons: [PolygonRef!]!
}

type Mutation {
  addUser(input: [AddUserInput!]!, upsert: Boolean): AddUserPayload @join__field(graph: CORE)
  updateUser(input: UpdateUserInput!): UpdateUserPayload @join__field(graph: CORE)
  deleteUser(filter: UserFilter!): DeleteUserPayload @join__field(graph: CORE)
  addUserRole(input: [AddUserRoleInput!]!): AddUserRolePayload @join__field(graph: CORE)
  updateUserRole(input: UpdateUserRoleInput!): UpdateUserRolePayload @join__field(graph: CORE)
  deleteUserRole(filter: UserRoleFilter!): DeleteUserRolePayload @join__field(graph: CORE)
  addRole(input: [AddRoleInput!]!, upsert: Boolean): AddRolePayload @join__field(graph: CORE)
  updateRole(input: UpdateRoleInput!): UpdateRolePayload @join__field(graph: CORE)
  deleteRole(filter: RoleFilter!): DeleteRolePayload @join__field(graph: CORE)
  addAccessRight(input: [AddAccessRightInput!]!): AddAccessRightPayload @join__field(graph: CORE)
  updateAccessRight(input: UpdateAccessRightInput!): UpdateAccessRightPayload @join__field(graph: CORE)
  deleteAccessRight(filter: AccessRightFilter!): DeleteAccessRightPayload @join__field(graph: CORE)
  addACL(input: [AddACLInput!]!): AddACLPayload @join__field(graph: CORE)
  updateACL(input: UpdateACLInput!): UpdateACLPayload @join__field(graph: CORE)
  deleteACL(filter: ACLFilter!): DeleteACLPayload @join__field(graph: CORE)
  addLibreService(input: [AddLibreServiceInput!]!, upsert: Boolean): AddLibreServicePayload @join__field(graph: CORE)
  updateLibreService(input: UpdateLibreServiceInput!): UpdateLibreServicePayload @join__field(graph: CORE)
  deleteLibreService(filter: LibreServiceFilter!): DeleteLibreServicePayload @join__field(graph: CORE)
  addMenu(input: [AddMenuInput!]!): AddMenuPayload @join__field(graph: CORE)
  updateMenu(input: UpdateMenuInput!): UpdateMenuPayload @join__field(graph: CORE)
  deleteMenu(filter: MenuFilter!): DeleteMenuPayload @join__field(graph: CORE)
  addOperationsRequest(input: [AddOperationsRequestInput!]!, upsert: Boolean): AddOperationsRequestPayload @join__field(graph: CORE)
  updateOperationsRequest(input: UpdateOperationsRequestInput!): UpdateOperationsRequestPayload @join__field(graph: CORE)
  deleteOperationsRequest(filter: OperationsRequestFilter!): DeleteOperationsRequestPayload @join__field(graph: CORE)
  addRequestState(input: [AddRequestStateInput!]!, upsert: Boolean): AddRequestStatePayload @join__field(graph: CORE)
  updateRequestState(input: UpdateRequestStateInput!): UpdateRequestStatePayload @join__field(graph: CORE)
  deleteRequestState(filter: RequestStateFilter!): DeleteRequestStatePayload @join__field(graph: CORE)
  addOperationsDefinition(input: [AddOperationsDefinitionInput!]!, upsert: Boolean): AddOperationsDefinitionPayload @join__field(graph: CORE)
  updateOperationsDefinition(input: UpdateOperationsDefinitionInput!): UpdateOperationsDefinitionPayload @join__field(graph: CORE)
  deleteOperationsDefinition(filter: OperationsDefinitionFilter!): DeleteOperationsDefinitionPayload @join__field(graph: CORE)
  addBillOfMaterial(input: [AddBillOfMaterialInput!]!, upsert: Boolean): AddBillOfMaterialPayload @join__field(graph: CORE)
  updateBillOfMaterial(input: UpdateBillOfMaterialInput!): UpdateBillOfMaterialPayload @join__field(graph: CORE)
  deleteBillOfMaterial(filter: BillOfMaterialFilter!): DeleteBillOfMaterialPayload @join__field(graph: CORE)
  addOperationsSegment(input: [AddOperationsSegmentInput!]!): AddOperationsSegmentPayload @join__field(graph: CORE)
  updateOperationsSegment(input: UpdateOperationsSegmentInput!): UpdateOperationsSegmentPayload @join__field(graph: CORE)
  deleteOperationsSegment(filter: OperationsSegmentFilter!): DeleteOperationsSegmentPayload @join__field(graph: CORE)
  addTransitionEventRuleset(input: [AddTransitionEventRulesetInput!]!): AddTransitionEventRulesetPayload @join__field(graph: CORE)
  updateTransitionEventRuleset(input: UpdateTransitionEventRulesetInput!): UpdateTransitionEventRulesetPayload @join__field(graph: CORE)
  deleteTransitionEventRuleset(filter: TransitionEventRulesetFilter!): DeleteTransitionEventRulesetPayload @join__field(graph: CORE)
  addStateEventRuleset(input: [AddStateEventRulesetInput!]!): AddStateEventRulesetPayload @join__field(graph: CORE)
  updateStateEventRuleset(input: UpdateStateEventRulesetInput!): UpdateStateEventRulesetPayload @join__field(graph: CORE)
  deleteStateEventRuleset(filter: StateEventRulesetFilter!): DeleteStateEventRulesetPayload @join__field(graph: CORE)
  addMaterialEventRuleset(input: [AddMaterialEventRulesetInput!]!): AddMaterialEventRulesetPayload @join__field(graph: CORE)
  updateMaterialEventRuleset(input: UpdateMaterialEventRulesetInput!): UpdateMaterialEventRulesetPayload @join__field(graph: CORE)
  deleteMaterialEventRuleset(filter: MaterialEventRulesetFilter!): DeleteMaterialEventRulesetPayload @join__field(graph: CORE)
  addOrderStartRuleset(input: [AddOrderStartRulesetInput!]!): AddOrderStartRulesetPayload @join__field(graph: CORE)
  updateOrderStartRuleset(input: UpdateOrderStartRulesetInput!): UpdateOrderStartRulesetPayload @join__field(graph: CORE)
  deleteOrderStartRuleset(filter: OrderStartRulesetFilter!): DeleteOrderStartRulesetPayload @join__field(graph: CORE)
  addSegmentInvoiceSetting(input: [AddSegmentInvoiceSettingInput!]!): AddSegmentInvoiceSettingPayload @join__field(graph: CORE)
  updateSegmentInvoiceSetting(input: UpdateSegmentInvoiceSettingInput!): UpdateSegmentInvoiceSettingPayload @join__field(graph: CORE)
  deleteSegmentInvoiceSetting(filter: SegmentInvoiceSettingFilter!): DeleteSegmentInvoiceSettingPayload @join__field(graph: CORE)
  addSegmentDependency(input: [AddSegmentDependencyInput!]!): AddSegmentDependencyPayload @join__field(graph: CORE)
  updateSegmentDependency(input: UpdateSegmentDependencyInput!): UpdateSegmentDependencyPayload @join__field(graph: CORE)
  deleteSegmentDependency(filter: SegmentDependencyFilter!): DeleteSegmentDependencyPayload @join__field(graph: CORE)
  addWorkMaster(input: [AddWorkMasterInput!]!, upsert: Boolean): AddWorkMasterPayload @join__field(graph: CORE)
  updateWorkMaster(input: UpdateWorkMasterInput!): UpdateWorkMasterPayload @join__field(graph: CORE)
  deleteWorkMaster(filter: WorkMasterFilter!): DeleteWorkMasterPayload @join__field(graph: CORE)
  addWorkDirective(input: [AddWorkDirectiveInput!]!, upsert: Boolean): AddWorkDirectivePayload @join__field(graph: CORE)
  updateWorkDirective(input: UpdateWorkDirectiveInput!): UpdateWorkDirectivePayload @join__field(graph: CORE)
  deleteWorkDirective(filter: WorkDirectiveFilter!): DeleteWorkDirectivePayload @join__field(graph: CORE)
  addJobOrder(input: [AddJobOrderInput!]!, upsert: Boolean): AddJobOrderPayload @join__field(graph: CORE)
  updateJobOrder(input: UpdateJobOrderInput!): UpdateJobOrderPayload @join__field(graph: CORE)
  deleteJobOrder(filter: JobOrderFilter!): DeleteJobOrderPayload @join__field(graph: CORE)
  addJobOrderNote(input: [AddJobOrderNoteInput!]!): AddJobOrderNotePayload @join__field(graph: CORE)
  updateJobOrderNote(input: UpdateJobOrderNoteInput!): UpdateJobOrderNotePayload @join__field(graph: CORE)
  deleteJobOrderNote(filter: JobOrderNoteFilter!): DeleteJobOrderNotePayload @join__field(graph: CORE)
  addJobResponse(input: [AddJobResponseInput!]!): AddJobResponsePayload @join__field(graph: CORE)
  updateJobResponse(input: UpdateJobResponseInput!): UpdateJobResponsePayload @join__field(graph: CORE)
  deleteJobResponse(filter: JobResponseFilter!): DeleteJobResponsePayload @join__field(graph: CORE)
  addEventLog(input: [AddEventLogInput!]!): AddEventLogPayload @join__field(graph: CORE)
  updateEventLog(input: UpdateEventLogInput!): UpdateEventLogPayload @join__field(graph: CORE)
  deleteEventLog(filter: EventLogFilter!): DeleteEventLogPayload @join__field(graph: CORE)
  addQuantityLog(input: [AddQuantityLogInput!]!): AddQuantityLogPayload @join__field(graph: CORE)
  updateQuantityLog(input: UpdateQuantityLogInput!): UpdateQuantityLogPayload @join__field(graph: CORE)
  deleteQuantityLog(filter: QuantityLogFilter!): DeleteQuantityLogPayload @join__field(graph: CORE)
  addEquipmentSpecification(input: [AddEquipmentSpecificationInput!]!): AddEquipmentSpecificationPayload @join__field(graph: CORE)
  updateEquipmentSpecification(input: UpdateEquipmentSpecificationInput!): UpdateEquipmentSpecificationPayload @join__field(graph: CORE)
  deleteEquipmentSpecification(filter: EquipmentSpecificationFilter!): DeleteEquipmentSpecificationPayload @join__field(graph: CORE)
  addMaterialSpecification(input: [AddMaterialSpecificationInput!]!): AddMaterialSpecificationPayload @join__field(graph: CORE)
  updateMaterialSpecification(input: UpdateMaterialSpecificationInput!): UpdateMaterialSpecificationPayload @join__field(graph: CORE)
  deleteMaterialSpecification(filter: MaterialSpecificationFilter!): DeleteMaterialSpecificationPayload @join__field(graph: CORE)
  addPersonnelSpecification(input: [AddPersonnelSpecificationInput!]!): AddPersonnelSpecificationPayload @join__field(graph: CORE)
  updatePersonnelSpecification(input: UpdatePersonnelSpecificationInput!): UpdatePersonnelSpecificationPayload @join__field(graph: CORE)
  deletePersonnelSpecification(filter: PersonnelSpecificationFilter!): DeletePersonnelSpecificationPayload @join__field(graph: CORE)
  addDashboardConfig(input: [AddDashboardConfigInput!]!, upsert: Boolean): AddDashboardConfigPayload @join__field(graph: CORE)
  updateDashboardConfig(input: UpdateDashboardConfigInput!): UpdateDashboardConfigPayload @join__field(graph: CORE)
  deleteDashboardConfig(filter: DashboardConfigFilter!): DeleteDashboardConfigPayload @join__field(graph: CORE)
  addDashboardPanelConfig(input: [AddDashboardPanelConfigInput!]!): AddDashboardPanelConfigPayload @join__field(graph: CORE)
  updateDashboardPanelConfig(input: UpdateDashboardPanelConfigInput!): UpdateDashboardPanelConfigPayload @join__field(graph: CORE)
  deleteDashboardPanelConfig(filter: DashboardPanelConfigFilter!): DeleteDashboardPanelConfigPayload @join__field(graph: CORE)
  addEquipment(input: [AddEquipmentInput!]!): AddEquipmentPayload @join__field(graph: CORE)
  updateEquipment(input: UpdateEquipmentInput!): UpdateEquipmentPayload @join__field(graph: CORE)
  deleteEquipment(filter: EquipmentFilter!): DeleteEquipmentPayload @join__field(graph: CORE)
  addEquipmentNameAlias(input: [AddEquipmentNameAliasInput!]!): AddEquipmentNameAliasPayload @join__field(graph: CORE)
  updateEquipmentNameAlias(input: UpdateEquipmentNameAliasInput!): UpdateEquipmentNameAliasPayload @join__field(graph: CORE)
  deleteEquipmentNameAlias(filter: EquipmentNameAliasFilter!): DeleteEquipmentNameAliasPayload @join__field(graph: CORE)
  addPropertyNameAlias(input: [AddPropertyNameAliasInput!]!): AddPropertyNameAliasPayload @join__field(graph: CORE)
  updatePropertyNameAlias(input: UpdatePropertyNameAliasInput!): UpdatePropertyNameAliasPayload @join__field(graph: CORE)
  deletePropertyNameAlias(filter: PropertyNameAliasFilter!): DeletePropertyNameAliasPayload @join__field(graph: CORE)
  addPropertyValueAlias(input: [AddPropertyValueAliasInput!]!): AddPropertyValueAliasPayload @join__field(graph: CORE)
  updatePropertyValueAlias(input: UpdatePropertyValueAliasInput!): UpdatePropertyValueAliasPayload @join__field(graph: CORE)
  deletePropertyValueAlias(filter: PropertyValueAliasFilter!): DeletePropertyValueAliasPayload @join__field(graph: CORE)
  addEquipmentReasonOverride(input: [AddEquipmentReasonOverrideInput!]!): AddEquipmentReasonOverridePayload @join__field(graph: CORE)
  updateEquipmentReasonOverride(input: UpdateEquipmentReasonOverrideInput!): UpdateEquipmentReasonOverridePayload @join__field(graph: CORE)
  deleteEquipmentReasonOverride(filter: EquipmentReasonOverrideFilter!): DeleteEquipmentReasonOverridePayload @join__field(graph: CORE)
  addEquipmentClass(input: [AddEquipmentClassInput!]!): AddEquipmentClassPayload @join__field(graph: CORE)
  updateEquipmentClass(input: UpdateEquipmentClassInput!): UpdateEquipmentClassPayload @join__field(graph: CORE)
  deleteEquipmentClass(filter: EquipmentClassFilter!): DeleteEquipmentClassPayload @join__field(graph: CORE)
  addProperty(input: [AddPropertyInput!]!): AddPropertyPayload @join__field(graph: CORE)
  updateProperty(input: UpdatePropertyInput!): UpdatePropertyPayload @join__field(graph: CORE)
  deleteProperty(filter: PropertyFilter!): DeletePropertyPayload @join__field(graph: CORE)
  addEquipmentPropertyOverride(input: [AddEquipmentPropertyOverrideInput!]!): AddEquipmentPropertyOverridePayload @join__field(graph: CORE)
  updateEquipmentPropertyOverride(input: UpdateEquipmentPropertyOverrideInput!): UpdateEquipmentPropertyOverridePayload @join__field(graph: CORE)
  deleteEquipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter!): DeleteEquipmentPropertyOverridePayload @join__field(graph: CORE)
  addEventDefinition(input: [AddEventDefinitionInput!]!): AddEventDefinitionPayload @join__field(graph: CORE)
  updateEventDefinition(input: UpdateEventDefinitionInput!): UpdateEventDefinitionPayload @join__field(graph: CORE)
  deleteEventDefinition(filter: EventDefinitionFilter!): DeleteEventDefinitionPayload @join__field(graph: CORE)
  addPayloadFieldDefinition(input: [AddPayloadFieldDefinitionInput!]!): AddPayloadFieldDefinitionPayload @join__field(graph: CORE)
  updatePayloadFieldDefinition(input: UpdatePayloadFieldDefinitionInput!): UpdatePayloadFieldDefinitionPayload @join__field(graph: CORE)
  deletePayloadFieldDefinition(filter: PayloadFieldDefinitionFilter!): DeletePayloadFieldDefinitionPayload @join__field(graph: CORE)
  addReason(input: [AddReasonInput!]!): AddReasonPayload @join__field(graph: CORE)
  updateReason(input: UpdateReasonInput!): UpdateReasonPayload @join__field(graph: CORE)
  deleteReason(filter: ReasonFilter!): DeleteReasonPayload @join__field(graph: CORE)
  addReasonCategory(input: [AddReasonCategoryInput!]!, upsert: Boolean): AddReasonCategoryPayload @join__field(graph: CORE)
  updateReasonCategory(input: UpdateReasonCategoryInput!): UpdateReasonCategoryPayload @join__field(graph: CORE)
  deleteReasonCategory(filter: ReasonCategoryFilter!): DeleteReasonCategoryPayload @join__field(graph: CORE)
  addMaterialClass(input: [AddMaterialClassInput!]!, upsert: Boolean): AddMaterialClassPayload @join__field(graph: CORE)
  updateMaterialClass(input: UpdateMaterialClassInput!): UpdateMaterialClassPayload @join__field(graph: CORE)
  deleteMaterialClass(filter: MaterialClassFilter!): DeleteMaterialClassPayload @join__field(graph: CORE)
  addMaterialDefinition(input: [AddMaterialDefinitionInput!]!, upsert: Boolean): AddMaterialDefinitionPayload @join__field(graph: CORE)
  updateMaterialDefinition(input: UpdateMaterialDefinitionInput!): UpdateMaterialDefinitionPayload @join__field(graph: CORE)
  deleteMaterialDefinition(filter: MaterialDefinitionFilter!): DeleteMaterialDefinitionPayload @join__field(graph: CORE)
  addMaterialAlternate(input: [AddMaterialAlternateInput!]!): AddMaterialAlternatePayload @join__field(graph: CORE)
  updateMaterialAlternate(input: UpdateMaterialAlternateInput!): UpdateMaterialAlternatePayload @join__field(graph: CORE)
  deleteMaterialAlternate(filter: MaterialAlternateFilter!): DeleteMaterialAlternatePayload @join__field(graph: CORE)
  addCarrier(input: [AddCarrierInput!]!, upsert: Boolean): AddCarrierPayload @join__field(graph: CORE)
  updateCarrier(input: UpdateCarrierInput!): UpdateCarrierPayload @join__field(graph: CORE)
  deleteCarrier(filter: CarrierFilter!): DeleteCarrierPayload @join__field(graph: CORE)
  addMaterialLot(input: [AddMaterialLotInput!]!, upsert: Boolean): AddMaterialLotPayload @join__field(graph: CORE)
  updateMaterialLot(input: UpdateMaterialLotInput!): UpdateMaterialLotPayload @join__field(graph: CORE)
  deleteMaterialLot(filter: MaterialLotFilter!): DeleteMaterialLotPayload @join__field(graph: CORE)
  addMaterialSubLot(input: [AddMaterialSubLotInput!]!, upsert: Boolean): AddMaterialSubLotPayload @join__field(graph: CORE)
  updateMaterialSubLot(input: UpdateMaterialSubLotInput!): UpdateMaterialSubLotPayload @join__field(graph: CORE)
  deleteMaterialSubLot(filter: MaterialSubLotFilter!): DeleteMaterialSubLotPayload @join__field(graph: CORE)
  addMaterialUnit(input: [AddMaterialUnitInput!]!, upsert: Boolean): AddMaterialUnitPayload @join__field(graph: CORE)
  updateMaterialUnit(input: UpdateMaterialUnitInput!): UpdateMaterialUnitPayload @join__field(graph: CORE)
  deleteMaterialUnit(filter: MaterialUnitFilter!): DeleteMaterialUnitPayload @join__field(graph: CORE)
  addInventoryTransaction(input: [AddInventoryTransactionInput!]!): AddInventoryTransactionPayload @join__field(graph: CORE)
  updateInventoryTransaction(input: UpdateInventoryTransactionInput!): UpdateInventoryTransactionPayload @join__field(graph: CORE)
  deleteInventoryTransaction(filter: InventoryTransactionFilter!): DeleteInventoryTransactionPayload @join__field(graph: CORE)
  addMaterialEquipment(input: [AddMaterialEquipmentInput!]!, upsert: Boolean): AddMaterialEquipmentPayload @join__field(graph: CORE)
  updateMaterialEquipment(input: UpdateMaterialEquipmentInput!): UpdateMaterialEquipmentPayload @join__field(graph: CORE)
  deleteMaterialEquipment(filter: MaterialEquipmentFilter!): DeleteMaterialEquipmentPayload @join__field(graph: CORE)
  addUnitOfMeasure(input: [AddUnitOfMeasureInput!]!, upsert: Boolean): AddUnitOfMeasurePayload @join__field(graph: CORE)
  updateUnitOfMeasure(input: UpdateUnitOfMeasureInput!): UpdateUnitOfMeasurePayload @join__field(graph: CORE)
  deleteUnitOfMeasure(filter: UnitOfMeasureFilter!): DeleteUnitOfMeasurePayload @join__field(graph: CORE)
  addUnitOfMeasureConversion(input: [AddUnitOfMeasureConversionInput!]!): AddUnitOfMeasureConversionPayload @join__field(graph: CORE)
  updateUnitOfMeasureConversion(input: UpdateUnitOfMeasureConversionInput!): UpdateUnitOfMeasureConversionPayload @join__field(graph: CORE)
  deleteUnitOfMeasureConversion(filter: UnitOfMeasureConversionFilter!): DeleteUnitOfMeasureConversionPayload @join__field(graph: CORE)
  addMaterialStatus(input: [AddMaterialStatusInput!]!, upsert: Boolean): AddMaterialStatusPayload @join__field(graph: CORE)
  updateMaterialStatus(input: UpdateMaterialStatusInput!): UpdateMaterialStatusPayload @join__field(graph: CORE)
  deleteMaterialStatus(filter: MaterialStatusFilter!): DeleteMaterialStatusPayload @join__field(graph: CORE)
  addMaterialStateModel(input: [AddMaterialStateModelInput!]!, upsert: Boolean): AddMaterialStateModelPayload @join__field(graph: CORE)
  updateMaterialStateModel(input: UpdateMaterialStateModelInput!): UpdateMaterialStateModelPayload @join__field(graph: CORE)
  deleteMaterialStateModel(filter: MaterialStateModelFilter!): DeleteMaterialStateModelPayload @join__field(graph: CORE)
  addMaterialStateTransition(input: [AddMaterialStateTransitionInput!]!): AddMaterialStateTransitionPayload @join__field(graph: CORE)
  updateMaterialStateTransition(input: UpdateMaterialStateTransitionInput!): UpdateMaterialStateTransitionPayload @join__field(graph: CORE)
  deleteMaterialStateTransition(filter: MaterialStateTransitionFilter!): DeleteMaterialStateTransitionPayload @join__field(graph: CORE)
  addPersonnelClass(input: [AddPersonnelClassInput!]!, upsert: Boolean): AddPersonnelClassPayload @join__field(graph: CORE)
  updatePersonnelClass(input: UpdatePersonnelClassInput!): UpdatePersonnelClassPayload @join__field(graph: CORE)
  deletePersonnelClass(filter: PersonnelClassFilter!): DeletePersonnelClassPayload @join__field(graph: CORE)
  addPerson(input: [AddPersonInput!]!, upsert: Boolean): AddPersonPayload @join__field(graph: CORE)
  updatePerson(input: UpdatePersonInput!): UpdatePersonPayload @join__field(graph: CORE)
  deletePerson(filter: PersonFilter!): DeletePersonPayload @join__field(graph: CORE)
  addTestSpecification(input: [AddTestSpecificationInput!]!): AddTestSpecificationPayload @join__field(graph: CORE)
  updateTestSpecification(input: UpdateTestSpecificationInput!): UpdateTestSpecificationPayload @join__field(graph: CORE)
  deleteTestSpecification(filter: TestSpecificationFilter!): DeleteTestSpecificationPayload @join__field(graph: CORE)
  addTestResult(input: [AddTestResultInput!]!): AddTestResultPayload @join__field(graph: CORE)
  updateTestResult(input: UpdateTestResultInput!): UpdateTestResultPayload @join__field(graph: CORE)
  deleteTestResult(filter: TestResultFilter!): DeleteTestResultPayload @join__field(graph: CORE)
  addWorkCalendarDefinitionEntry(input: [AddWorkCalendarDefinitionEntryInput!]!): AddWorkCalendarDefinitionEntryPayload @join__field(graph: CORE)
  updateWorkCalendarDefinitionEntry(input: UpdateWorkCalendarDefinitionEntryInput!): UpdateWorkCalendarDefinitionEntryPayload @join__field(graph: CORE)
  deleteWorkCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter!): DeleteWorkCalendarDefinitionEntryPayload @join__field(graph: CORE)
  addWorkCalendarEntry(input: [AddWorkCalendarEntryInput!]!): AddWorkCalendarEntryPayload @join__field(graph: CORE)
  updateWorkCalendarEntry(input: UpdateWorkCalendarEntryInput!): UpdateWorkCalendarEntryPayload @join__field(graph: CORE)
  deleteWorkCalendarEntry(filter: WorkCalendarEntryFilter!): DeleteWorkCalendarEntryPayload @join__field(graph: CORE)
  addWorkCalendar(input: [AddWorkCalendarInput!]!, upsert: Boolean): AddWorkCalendarPayload @join__field(graph: CORE)
  updateWorkCalendar(input: UpdateWorkCalendarInput!): UpdateWorkCalendarPayload @join__field(graph: CORE)
  deleteWorkCalendar(filter: WorkCalendarFilter!): DeleteWorkCalendarPayload @join__field(graph: CORE)
  addWorkflowSpecification(input: [AddWorkflowSpecificationInput!]!): AddWorkflowSpecificationPayload @join__field(graph: CORE)
  updateWorkflowSpecification(input: UpdateWorkflowSpecificationInput!): UpdateWorkflowSpecificationPayload @join__field(graph: CORE)
  deleteWorkflowSpecification(filter: WorkflowSpecificationFilter!): DeleteWorkflowSpecificationPayload @join__field(graph: CORE)
  addWorkflowInstance(input: [AddWorkflowInstanceInput!]!): AddWorkflowInstancePayload @join__field(graph: CORE)
  updateWorkflowInstance(input: UpdateWorkflowInstanceInput!): UpdateWorkflowInstancePayload @join__field(graph: CORE)
  deleteWorkflowInstance(filter: WorkflowInstanceFilter!): DeleteWorkflowInstancePayload @join__field(graph: CORE)
  addWorkflowInstanceProperty(input: [AddWorkflowInstancePropertyInput!]!, upsert: Boolean): AddWorkflowInstancePropertyPayload @join__field(graph: CORE)
  updateWorkflowInstanceProperty(input: UpdateWorkflowInstancePropertyInput!): UpdateWorkflowInstancePropertyPayload @join__field(graph: CORE)
  deleteWorkflowInstanceProperty(filter: WorkflowInstancePropertyFilter!): DeleteWorkflowInstancePropertyPayload @join__field(graph: CORE)
  addWorkflowNode(input: [AddWorkflowNodeInput!]!): AddWorkflowNodePayload @join__field(graph: CORE)
  updateWorkflowNode(input: UpdateWorkflowNodeInput!): UpdateWorkflowNodePayload @join__field(graph: CORE)
  deleteWorkflowNode(filter: WorkflowNodeFilter!): DeleteWorkflowNodePayload @join__field(graph: CORE)
  addWorkflowNodeInstance(input: [AddWorkflowNodeInstanceInput!]!): AddWorkflowNodeInstancePayload @join__field(graph: CORE)
  updateWorkflowNodeInstance(input: UpdateWorkflowNodeInstanceInput!): UpdateWorkflowNodeInstancePayload @join__field(graph: CORE)
  deleteWorkflowNodeInstance(filter: WorkflowNodeInstanceFilter!): DeleteWorkflowNodeInstancePayload @join__field(graph: CORE)
  addWorkflowNodeEvent(input: [AddWorkflowNodeEventInput!]!): AddWorkflowNodeEventPayload @join__field(graph: CORE)
  updateWorkflowNodeEvent(input: UpdateWorkflowNodeEventInput!): UpdateWorkflowNodeEventPayload @join__field(graph: CORE)
  deleteWorkflowNodeEvent(filter: WorkflowNodeEventFilter!): DeleteWorkflowNodeEventPayload @join__field(graph: CORE)
  addWorkflowNodeType(input: [AddWorkflowNodeTypeInput!]!): AddWorkflowNodeTypePayload @join__field(graph: CORE)
  updateWorkflowNodeType(input: UpdateWorkflowNodeTypeInput!): UpdateWorkflowNodeTypePayload @join__field(graph: CORE)
  deleteWorkflowNodeType(filter: WorkflowNodeTypeFilter!): DeleteWorkflowNodeTypePayload @join__field(graph: CORE)
  addWorkflowConnection(input: [AddWorkflowConnectionInput!]!): AddWorkflowConnectionPayload @join__field(graph: CORE)
  updateWorkflowConnection(input: UpdateWorkflowConnectionInput!): UpdateWorkflowConnectionPayload @join__field(graph: CORE)
  deleteWorkflowConnection(filter: WorkflowConnectionFilter!): DeleteWorkflowConnectionPayload @join__field(graph: CORE)
  addWorkflowConnectionType(input: [AddWorkflowConnectionTypeInput!]!): AddWorkflowConnectionTypePayload @join__field(graph: CORE)
  updateWorkflowConnectionType(input: UpdateWorkflowConnectionTypeInput!): UpdateWorkflowConnectionTypePayload @join__field(graph: CORE)
  deleteWorkflowConnectionType(filter: WorkflowConnectionTypeFilter!): DeleteWorkflowConnectionTypePayload @join__field(graph: CORE)
  addWorkflowProperty(input: [AddWorkflowPropertyInput!]!): AddWorkflowPropertyPayload @join__field(graph: CORE)
  updateWorkflowProperty(input: UpdateWorkflowPropertyInput!): UpdateWorkflowPropertyPayload @join__field(graph: CORE)
  deleteWorkflowProperty(filter: WorkflowPropertyFilter!): DeleteWorkflowPropertyPayload @join__field(graph: CORE)
  addWorkflowPropertyInstance(input: [AddWorkflowPropertyInstanceInput!]!): AddWorkflowPropertyInstancePayload @join__field(graph: CORE)
  updateWorkflowPropertyInstance(input: UpdateWorkflowPropertyInstanceInput!): UpdateWorkflowPropertyInstancePayload @join__field(graph: CORE)
  deleteWorkflowPropertyInstance(filter: WorkflowPropertyInstanceFilter!): DeleteWorkflowPropertyInstancePayload @join__field(graph: CORE)
  addWorkflowPropertyValue(input: [AddWorkflowPropertyValueInput!]!): AddWorkflowPropertyValuePayload @join__field(graph: CORE)
  updateWorkflowPropertyValue(input: UpdateWorkflowPropertyValueInput!): UpdateWorkflowPropertyValuePayload @join__field(graph: CORE)
  deleteWorkflowPropertyValue(filter: WorkflowPropertyValueFilter!): DeleteWorkflowPropertyValuePayload @join__field(graph: CORE)
  addForm(input: [AddFormInput!]!, upsert: Boolean): AddFormPayload @join__field(graph: CORE)
  updateForm(input: UpdateFormInput!): UpdateFormPayload @join__field(graph: CORE)
  deleteForm(filter: FormFilter!): DeleteFormPayload @join__field(graph: CORE)
  addASNStaging(input: [AddASNStagingInput!]!): AddASNStagingPayload @join__field(graph: CORE)
  updateASNStaging(input: UpdateASNStagingInput!): UpdateASNStagingPayload @join__field(graph: CORE)
  deleteASNStaging(filter: ASNStagingFilter!): DeleteASNStagingPayload @join__field(graph: CORE)
  addPartner(input: [AddPartnerInput!]!): AddPartnerPayload @join__field(graph: CORE)
  updatePartner(input: UpdatePartnerInput!): UpdatePartnerPayload @join__field(graph: CORE)
  deletePartner(filter: PartnerFilter!): DeletePartnerPayload @join__field(graph: CORE)
  addInventoryHandlingPolicy(input: [AddInventoryHandlingPolicyInput!]!, upsert: Boolean): AddInventoryHandlingPolicyPayload @join__field(graph: CORE)
  updateInventoryHandlingPolicy(input: UpdateInventoryHandlingPolicyInput!): UpdateInventoryHandlingPolicyPayload @join__field(graph: CORE)
  deleteInventoryHandlingPolicy(filter: InventoryHandlingPolicyFilter!): DeleteInventoryHandlingPolicyPayload @join__field(graph: CORE)
  addInventoryHandlingRule(input: [AddInventoryHandlingRuleInput!]!): AddInventoryHandlingRulePayload @join__field(graph: CORE)
  updateInventoryHandlingRule(input: UpdateInventoryHandlingRuleInput!): UpdateInventoryHandlingRulePayload @join__field(graph: CORE)
  deleteInventoryHandlingRule(filter: InventoryHandlingRuleFilter!): DeleteInventoryHandlingRulePayload @join__field(graph: CORE)
  addAddress(input: [AddAddressInput!]!): AddAddressPayload @join__field(graph: CORE)
  updateAddress(input: UpdateAddressInput!): UpdateAddressPayload @join__field(graph: CORE)
  deleteAddress(filter: AddressFilter!): DeleteAddressPayload @join__field(graph: CORE)
  addDelivery(input: [AddDeliveryInput!]!): AddDeliveryPayload @join__field(graph: CORE)
  updateDelivery(input: UpdateDeliveryInput!): UpdateDeliveryPayload @join__field(graph: CORE)
  deleteDelivery(filter: DeliveryFilter!): DeleteDeliveryPayload @join__field(graph: CORE)
  addOrder(input: [AddOrderInput!]!): AddOrderPayload @join__field(graph: CORE)
  updateOrder(input: UpdateOrderInput!): UpdateOrderPayload @join__field(graph: CORE)
  deleteOrder(filter: OrderFilter!): DeleteOrderPayload @join__field(graph: CORE)
  addOrderLine(input: [AddOrderLineInput!]!): AddOrderLinePayload @join__field(graph: CORE)
  updateOrderLine(input: UpdateOrderLineInput!): UpdateOrderLinePayload @join__field(graph: CORE)
  deleteOrderLine(filter: OrderLineFilter!): DeleteOrderLinePayload @join__field(graph: CORE)
  addShipment(input: [AddShipmentInput!]!): AddShipmentPayload @join__field(graph: CORE)
  updateShipment(input: UpdateShipmentInput!): UpdateShipmentPayload @join__field(graph: CORE)
  deleteShipment(filter: ShipmentFilter!): DeleteShipmentPayload @join__field(graph: CORE)
  addShipmentItem(input: [AddShipmentItemInput!]!): AddShipmentItemPayload @join__field(graph: CORE)
  updateShipmentItem(input: UpdateShipmentItemInput!): UpdateShipmentItemPayload @join__field(graph: CORE)
  deleteShipmentItem(filter: ShipmentItemFilter!): DeleteShipmentItemPayload @join__field(graph: CORE)
  addBox(input: [AddBoxInput!]!): AddBoxPayload @join__field(graph: CORE)
  updateBox(input: UpdateBoxInput!): UpdateBoxPayload @join__field(graph: CORE)
  deleteBox(filter: BoxFilter!): DeleteBoxPayload @join__field(graph: CORE)
  addGeneralLedgerAccount(input: [AddGeneralLedgerAccountInput!]!, upsert: Boolean): AddGeneralLedgerAccountPayload @join__field(graph: CORE)
  updateGeneralLedgerAccount(input: UpdateGeneralLedgerAccountInput!): UpdateGeneralLedgerAccountPayload @join__field(graph: CORE)
  deleteGeneralLedgerAccount(filter: GeneralLedgerAccountFilter!): DeleteGeneralLedgerAccountPayload @join__field(graph: CORE)
  validateASN(siteId: String!, workflowInstanceId: String!, input: String!): [ASNStaging] @join__field(graph: PROFILES)
  confirmASN(workflowInstanceId: String!, input: [ConfirmASNInput!]!): [Order] @join__field(graph: PROFILES)
  uploadProductionPlan(input: String!): [JobOrder] @join__field(graph: PROFILES)
  addInventoryTransactionReceive(input: [InventoryTransactionInput!]!): [InventoryTransaction] @join__field(graph: PROFILES)
  moveCarrierToBin(input: [InventoryTransactionInput!]!): [InventoryTransaction] @join__field(graph: PROFILES)
  moveMaterialUnits(input: MoveMaterialUnitsInput): [InventoryTransaction] @join__field(graph: PROFILES)
  moveMaterialQuantitiesBetweenCarriers(input: MoveMaterialQuantitiesBetweenCarriersInput): [InventoryTransaction] @join__field(graph: PROFILES)
  updateEventLogTS(input: [EventLogTSInput]!): [EventLogTS] @join__field(graph: PROFILES)
  splitEventLogTS(input: [EventLogTSInput]!): [EventLogTS] @join__field(graph: PROFILES)
  addQuantityLogTS(input: QuantityLogTSInput!): QuantityLogTS @join__field(graph: PROFILES)
  updateOrderStatusRetroactively(input: UpdateOrderStatusInput): UpdatedOrderStatus @join__field(graph: PROFILES)
}

input NearFilter {
  distance: Float!
  coordinate: PointRef!
}

type OperationsDefinition
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  material(filter: MaterialDefinitionFilter): MaterialDefinition @join__field(graph: CORE)
  version: String @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
  operationsType: WorkType! @join__field(graph: CORE)
  hierarchyScope: String @join__field(graph: CORE)
  billOfMaterial(filter: BillOfMaterialFilter): BillOfMaterial @join__field(graph: CORE)
  segments(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment] @join__field(graph: CORE)
  segmentsAggregate(filter: OperationsSegmentFilter): OperationsSegmentAggregateResult @join__field(graph: CORE)
}

type OperationsDefinitionAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  versionMin: String
  versionMax: String
  descriptionMin: String
  descriptionMax: String
  hierarchyScopeMin: String
  hierarchyScopeMax: String
}

input OperationsDefinitionFilter {
  id: [ID!]
  isActive: Boolean
  name: StringHashFilter
  has: [OperationsDefinitionHasFilter]
  and: [OperationsDefinitionFilter]
  or: [OperationsDefinitionFilter]
  not: OperationsDefinitionFilter
}

enum OperationsDefinitionHasFilter {
  isActive
  name
  material
  version
  description
  operationsType
  hierarchyScope
  billOfMaterial
  segments
}

input OperationsDefinitionOrder {
  asc: OperationsDefinitionOrderable
  desc: OperationsDefinitionOrderable
  then: OperationsDefinitionOrder
}

enum OperationsDefinitionOrderable {
  name
  version
  description
  hierarchyScope
}

input OperationsDefinitionPatch {
  isActive: Boolean
  material: MaterialDefinitionRef
  version: String
  description: String
  operationsType: WorkType
  hierarchyScope: String
  billOfMaterial: BillOfMaterialRef
  segments: [OperationsSegmentRef]
}

input OperationsDefinitionRef {
  id: ID
  isActive: Boolean
  name: String
  material: MaterialDefinitionRef
  version: String
  description: String
  operationsType: WorkType
  hierarchyScope: String
  billOfMaterial: BillOfMaterialRef
  segments: [OperationsSegmentRef]
}

"""
A request for operations to be performed is an operations schedule.
The schedule may apply to operations, maintenance, quality or inventory operations
"""
type OperationsRequest
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  code: String! @join__field(graph: CORE)
  operationsType: WorkType! @join__field(graph: CORE)
  plannedStartDateTime: DateTime @join__field(graph: CORE)
  plannedEndDateTime: DateTime @join__field(graph: CORE)
  priority: String @join__field(graph: CORE)
  operationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinition! @join__field(graph: CORE)
  requestState(filter: RequestStateFilter): RequestState! @join__field(graph: CORE)
  quantity: Float! @join__field(graph: CORE)
  quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure! @join__field(graph: CORE)
  jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @join__field(graph: CORE)
  jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult @join__field(graph: CORE)
}

type OperationsRequestAggregateResult {
  count: Int
  codeMin: String
  codeMax: String
  plannedStartDateTimeMin: DateTime
  plannedStartDateTimeMax: DateTime
  plannedEndDateTimeMin: DateTime
  plannedEndDateTimeMax: DateTime
  priorityMin: String
  priorityMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input OperationsRequestFilter {
  id: [ID!]
  isActive: Boolean
  code: StringHashFilter
  has: [OperationsRequestHasFilter]
  and: [OperationsRequestFilter]
  or: [OperationsRequestFilter]
  not: OperationsRequestFilter
}

enum OperationsRequestHasFilter {
  isActive
  code
  operationsType
  plannedStartDateTime
  plannedEndDateTime
  priority
  operationsDefinition
  requestState
  quantity
  quantityUoM
  jobOrders
}

input OperationsRequestOrder {
  asc: OperationsRequestOrderable
  desc: OperationsRequestOrderable
  then: OperationsRequestOrder
}

enum OperationsRequestOrderable {
  code
  plannedStartDateTime
  plannedEndDateTime
  priority
  quantity
}

input OperationsRequestPatch {
  isActive: Boolean
  operationsType: WorkType
  plannedStartDateTime: DateTime
  plannedEndDateTime: DateTime
  priority: String
  operationsDefinition: OperationsDefinitionRef
  requestState: RequestStateRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  jobOrders: [JobOrderRef]
}

input OperationsRequestRef {
  id: ID
  isActive: Boolean
  code: String
  operationsType: WorkType
  plannedStartDateTime: DateTime
  plannedEndDateTime: DateTime
  priority: String
  operationsDefinition: OperationsDefinitionRef
  requestState: RequestStateRef
  quantity: Float
  quantityUoM: UnitOfMeasureRef
  jobOrders: [JobOrderRef]
}

type OperationsSegment
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  version: String @join__field(graph: CORE)
  type: SegmentType @join__field(graph: CORE)
  uiComponent: String @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
  parent(filter: OperationsSegmentFilter): OperationsSegment @join__field(graph: CORE)
  children(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment] @join__field(graph: CORE)
  workType: WorkType @join__field(graph: CORE)
  workDefinitionType: String @join__field(graph: CORE)
  duration: Float @join__field(graph: CORE)
  glAccountWIP: String @join__field(graph: CORE)
  glAccountWIPInvoice: String @join__field(graph: CORE)
  glAccountFixedOverhead: String @join__field(graph: CORE)
  glAccountVariableOverhead: String @join__field(graph: CORE)
  glAccountDirectLabour: String @join__field(graph: CORE)
  invoiceSettings(filter: SegmentInvoiceSettingFilter, order: SegmentInvoiceSettingOrder, first: Int, offset: Int): [SegmentInvoiceSetting] @join__field(graph: CORE)
  costAmountFixedOverhead: Float @join__field(graph: CORE)
  costDriverFixedOverhead: CostDriver @join__field(graph: CORE)
  costAmountVariableOverhead: Float @join__field(graph: CORE)
  costAmountDirectLabourRate: Float @join__field(graph: CORE)
  durationUoM(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: CORE)
  orderStartRuleset(filter: OrderStartRulesetFilter): OrderStartRuleset @join__field(graph: CORE)
  materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @join__field(graph: CORE)
  materialEventRuleset(filter: MaterialEventRulesetFilter): MaterialEventRuleset @join__field(graph: CORE)
  equipmentSpecifications(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification] @join__field(graph: CORE)
  stateEventRuleset(filter: StateEventRulesetFilter): StateEventRuleset @join__field(graph: CORE)
  personnelSpecifications(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification] @join__field(graph: CORE)
  hierarchyScope: String @join__field(graph: CORE)
  inflows(filter: SegmentDependencyFilter, order: SegmentDependencyOrder, first: Int, offset: Int): [SegmentDependency] @join__field(graph: CORE)
  outflows(filter: SegmentDependencyFilter, order: SegmentDependencyOrder, first: Int, offset: Int): [SegmentDependency] @join__field(graph: CORE)
  operationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinition @join__field(graph: CORE)
  jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @join__field(graph: CORE)
  mpmPlanRate: Float @join__field(graph: CORE)
  mpmIdealSetupTime: Float @join__field(graph: CORE)
  mpmIdealChangeoverTime: Float @join__field(graph: CORE)
  mpmEnableSmartChangeover: Boolean @join__field(graph: CORE)
  mpmChangeoverFamily: String @join__field(graph: CORE)
  mpmThresholdRunRate: Float @join__field(graph: CORE)
  mpmThresholdRunDuration: Float @join__field(graph: CORE)
  mpmThresholdSlowRate: Float @join__field(graph: CORE)
  mpmThresholdSlowDuration: Float @join__field(graph: CORE)
  mpmThresholdMicrostopDuration: Float @join__field(graph: CORE)
  mpmEnableAutoIdent: Boolean @join__field(graph: CORE)
  mpmAutoIdentMatchCode(filter: PropertyFilter): Property @join__field(graph: CORE)
  positionX: Int @join__field(graph: CORE)
  positionY: Int @join__field(graph: CORE)
  childrenAggregate(filter: OperationsSegmentFilter): OperationsSegmentAggregateResult @join__field(graph: CORE)
  invoiceSettingsAggregate(filter: SegmentInvoiceSettingFilter): SegmentInvoiceSettingAggregateResult @join__field(graph: CORE)
  materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult @join__field(graph: CORE)
  equipmentSpecificationsAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult @join__field(graph: CORE)
  personnelSpecificationsAggregate(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult @join__field(graph: CORE)
  inflowsAggregate(filter: SegmentDependencyFilter): SegmentDependencyAggregateResult @join__field(graph: CORE)
  outflowsAggregate(filter: SegmentDependencyFilter): SegmentDependencyAggregateResult @join__field(graph: CORE)
  jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult @join__field(graph: CORE)
}

type OperationsSegmentAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  versionMin: String
  versionMax: String
  uiComponentMin: String
  uiComponentMax: String
  descriptionMin: String
  descriptionMax: String
  workDefinitionTypeMin: String
  workDefinitionTypeMax: String
  durationMin: Float
  durationMax: Float
  durationSum: Float
  durationAvg: Float
  glAccountWIPMin: String
  glAccountWIPMax: String
  glAccountWIPInvoiceMin: String
  glAccountWIPInvoiceMax: String
  glAccountFixedOverheadMin: String
  glAccountFixedOverheadMax: String
  glAccountVariableOverheadMin: String
  glAccountVariableOverheadMax: String
  glAccountDirectLabourMin: String
  glAccountDirectLabourMax: String
  costAmountFixedOverheadMin: Float
  costAmountFixedOverheadMax: Float
  costAmountFixedOverheadSum: Float
  costAmountFixedOverheadAvg: Float
  costAmountVariableOverheadMin: Float
  costAmountVariableOverheadMax: Float
  costAmountVariableOverheadSum: Float
  costAmountVariableOverheadAvg: Float
  costAmountDirectLabourRateMin: Float
  costAmountDirectLabourRateMax: Float
  costAmountDirectLabourRateSum: Float
  costAmountDirectLabourRateAvg: Float
  hierarchyScopeMin: String
  hierarchyScopeMax: String
  mpmPlanRateMin: Float
  mpmPlanRateMax: Float
  mpmPlanRateSum: Float
  mpmPlanRateAvg: Float
  mpmIdealSetupTimeMin: Float
  mpmIdealSetupTimeMax: Float
  mpmIdealSetupTimeSum: Float
  mpmIdealSetupTimeAvg: Float
  mpmIdealChangeoverTimeMin: Float
  mpmIdealChangeoverTimeMax: Float
  mpmIdealChangeoverTimeSum: Float
  mpmIdealChangeoverTimeAvg: Float
  mpmChangeoverFamilyMin: String
  mpmChangeoverFamilyMax: String
  mpmThresholdRunRateMin: Float
  mpmThresholdRunRateMax: Float
  mpmThresholdRunRateSum: Float
  mpmThresholdRunRateAvg: Float
  mpmThresholdRunDurationMin: Float
  mpmThresholdRunDurationMax: Float
  mpmThresholdRunDurationSum: Float
  mpmThresholdRunDurationAvg: Float
  mpmThresholdSlowRateMin: Float
  mpmThresholdSlowRateMax: Float
  mpmThresholdSlowRateSum: Float
  mpmThresholdSlowRateAvg: Float
  mpmThresholdSlowDurationMin: Float
  mpmThresholdSlowDurationMax: Float
  mpmThresholdSlowDurationSum: Float
  mpmThresholdSlowDurationAvg: Float
  mpmThresholdMicrostopDurationMin: Float
  mpmThresholdMicrostopDurationMax: Float
  mpmThresholdMicrostopDurationSum: Float
  mpmThresholdMicrostopDurationAvg: Float
  positionXMin: Int
  positionXMax: Int
  positionXSum: Int
  positionXAvg: Float
  positionYMin: Int
  positionYMax: Int
  positionYSum: Int
  positionYAvg: Float
}

input OperationsSegmentFilter {
  id: [ID!]
  isActive: Boolean
  name: StringHashFilter
  description: StringHashFilter
  workType: WorkType_hash
  workDefinitionType: StringHashFilter
  has: [OperationsSegmentHasFilter]
  and: [OperationsSegmentFilter]
  or: [OperationsSegmentFilter]
  not: OperationsSegmentFilter
}

enum OperationsSegmentHasFilter {
  isActive
  name
  version
  type
  uiComponent
  description
  parent
  children
  workType
  workDefinitionType
  duration
  glAccountWIP
  glAccountWIPInvoice
  glAccountFixedOverhead
  glAccountVariableOverhead
  glAccountDirectLabour
  invoiceSettings
  costAmountFixedOverhead
  costDriverFixedOverhead
  costAmountVariableOverhead
  costAmountDirectLabourRate
  durationUoM
  orderStartRuleset
  materialSpecifications
  materialEventRuleset
  equipmentSpecifications
  stateEventRuleset
  personnelSpecifications
  hierarchyScope
  inflows
  outflows
  operationsDefinition
  jobOrders
  mpmPlanRate
  mpmIdealSetupTime
  mpmIdealChangeoverTime
  mpmEnableSmartChangeover
  mpmChangeoverFamily
  mpmThresholdRunRate
  mpmThresholdRunDuration
  mpmThresholdSlowRate
  mpmThresholdSlowDuration
  mpmThresholdMicrostopDuration
  mpmEnableAutoIdent
  mpmAutoIdentMatchCode
  positionX
  positionY
}

input OperationsSegmentOrder {
  asc: OperationsSegmentOrderable
  desc: OperationsSegmentOrderable
  then: OperationsSegmentOrder
}

enum OperationsSegmentOrderable {
  name
  version
  uiComponent
  description
  workDefinitionType
  duration
  glAccountWIP
  glAccountWIPInvoice
  glAccountFixedOverhead
  glAccountVariableOverhead
  glAccountDirectLabour
  costAmountFixedOverhead
  costAmountVariableOverhead
  costAmountDirectLabourRate
  hierarchyScope
  mpmPlanRate
  mpmIdealSetupTime
  mpmIdealChangeoverTime
  mpmChangeoverFamily
  mpmThresholdRunRate
  mpmThresholdRunDuration
  mpmThresholdSlowRate
  mpmThresholdSlowDuration
  mpmThresholdMicrostopDuration
  positionX
  positionY
}

input OperationsSegmentPatch {
  isActive: Boolean
  name: String
  version: String
  type: SegmentType
  uiComponent: String
  description: String
  parent: OperationsSegmentRef
  children: [OperationsSegmentRef]
  workType: WorkType
  workDefinitionType: String
  duration: Float
  glAccountWIP: String
  glAccountWIPInvoice: String
  glAccountFixedOverhead: String
  glAccountVariableOverhead: String
  glAccountDirectLabour: String
  invoiceSettings: [SegmentInvoiceSettingRef]
  costAmountFixedOverhead: Float
  costDriverFixedOverhead: CostDriver
  costAmountVariableOverhead: Float
  costAmountDirectLabourRate: Float
  durationUoM: UnitOfMeasureRef
  orderStartRuleset: OrderStartRulesetRef
  materialSpecifications: [MaterialSpecificationRef]
  materialEventRuleset: MaterialEventRulesetRef
  equipmentSpecifications: [EquipmentSpecificationRef]
  stateEventRuleset: StateEventRulesetRef
  personnelSpecifications: [PersonnelSpecificationRef]
  hierarchyScope: String
  inflows: [SegmentDependencyRef]
  outflows: [SegmentDependencyRef]
  operationsDefinition: OperationsDefinitionRef
  jobOrders: [JobOrderRef]
  mpmPlanRate: Float
  mpmIdealSetupTime: Float
  mpmIdealChangeoverTime: Float
  mpmEnableSmartChangeover: Boolean
  mpmChangeoverFamily: String
  mpmThresholdRunRate: Float
  mpmThresholdRunDuration: Float
  mpmThresholdSlowRate: Float
  mpmThresholdSlowDuration: Float
  mpmThresholdMicrostopDuration: Float
  mpmEnableAutoIdent: Boolean
  mpmAutoIdentMatchCode: PropertyRef
  positionX: Int
  positionY: Int
}

input OperationsSegmentRef {
  id: ID
  isActive: Boolean
  name: String
  version: String
  type: SegmentType
  uiComponent: String
  description: String
  parent: OperationsSegmentRef
  children: [OperationsSegmentRef]
  workType: WorkType
  workDefinitionType: String
  duration: Float
  glAccountWIP: String
  glAccountWIPInvoice: String
  glAccountFixedOverhead: String
  glAccountVariableOverhead: String
  glAccountDirectLabour: String
  invoiceSettings: [SegmentInvoiceSettingRef]
  costAmountFixedOverhead: Float
  costDriverFixedOverhead: CostDriver
  costAmountVariableOverhead: Float
  costAmountDirectLabourRate: Float
  durationUoM: UnitOfMeasureRef
  orderStartRuleset: OrderStartRulesetRef
  materialSpecifications: [MaterialSpecificationRef]
  materialEventRuleset: MaterialEventRulesetRef
  equipmentSpecifications: [EquipmentSpecificationRef]
  stateEventRuleset: StateEventRulesetRef
  personnelSpecifications: [PersonnelSpecificationRef]
  hierarchyScope: String
  inflows: [SegmentDependencyRef]
  outflows: [SegmentDependencyRef]
  operationsDefinition: OperationsDefinitionRef
  jobOrders: [JobOrderRef]
  mpmPlanRate: Float
  mpmIdealSetupTime: Float
  mpmIdealChangeoverTime: Float
  mpmEnableSmartChangeover: Boolean
  mpmChangeoverFamily: String
  mpmThresholdRunRate: Float
  mpmThresholdRunDuration: Float
  mpmThresholdSlowRate: Float
  mpmThresholdSlowDuration: Float
  mpmThresholdMicrostopDuration: Float
  mpmEnableAutoIdent: Boolean
  mpmAutoIdentMatchCode: PropertyRef
  positionX: Int
  positionY: Int
}

"""An outbound Sales Order to be fulfilled"""
type Order
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
  @join__type(graph: PROFILES, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  orderType: OrderType! @join__field(graph: CORE)
  customerOrderNumber: String @join__field(graph: CORE)
  customerReference: String @join__field(graph: CORE)
  deliveryTerms: IncoTerms @join__field(graph: CORE)
  status: OrderStatus! @join__field(graph: CORE)
  shipFromPartner(filter: PartnerFilter): Partner @join__field(graph: CORE)
  shipToPartner(filter: PartnerFilter): Partner @join__field(graph: CORE)
  invoiceFromPartner(filter: PartnerFilter): Partner @join__field(graph: CORE)
  invoiceToPartner(filter: PartnerFilter): Partner @join__field(graph: CORE)
  warehouse(filter: EquipmentFilter): Equipment @join__field(graph: CORE)
  lines(filter: OrderLineFilter, order: OrderLineOrder, first: Int, offset: Int): [OrderLine] @join__field(graph: CORE)
  shipments(filter: ShipmentFilter, order: ShipmentOrder, first: Int, offset: Int): [Shipment] @join__field(graph: CORE)
  notes: String @join__field(graph: CORE)
  createdDateTime: DateTime @join__field(graph: CORE)
  linesAggregate(filter: OrderLineFilter): OrderLineAggregateResult @join__field(graph: CORE)
  shipmentsAggregate(filter: ShipmentFilter): ShipmentAggregateResult @join__field(graph: CORE)
  linesWithAlternates: [OrderLine] @join__field(graph: PROFILES, provides: "material")
}

type OrderAggregateResult {
  count: Int
  customerOrderNumberMin: String
  customerOrderNumberMax: String
  customerReferenceMin: String
  customerReferenceMax: String
  notesMin: String
  notesMax: String
  createdDateTimeMin: DateTime
  createdDateTimeMax: DateTime
}

input OrderFilter {
  id: [ID!]
  isActive: Boolean
  orderType: OrderType_hash
  customerOrderNumber: StringFullTextFilter_StringHashFilter
  has: [OrderHasFilter]
  and: [OrderFilter]
  or: [OrderFilter]
  not: OrderFilter
}

enum OrderHasFilter {
  isActive
  orderType
  customerOrderNumber
  customerReference
  deliveryTerms
  status
  shipFromPartner
  shipToPartner
  invoiceFromPartner
  invoiceToPartner
  warehouse
  lines
  shipments
  notes
  createdDateTime
}

type OrderLine
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
  @join__type(graph: PROFILES, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  order(filter: OrderFilter): Order @join__field(graph: CORE)
  orderLineNumber: Int! @join__field(graph: CORE)
  material(filter: MaterialDefinitionFilter): MaterialDefinition! @join__field(graph: CORE)
  quantity: Int! @join__field(graph: CORE)
  defectiveSerialNumbers: String @join__field(graph: CORE)
  isReturn: Boolean @join__field(graph: CORE)
  workflowInstance(filter: WorkflowInstanceFilter): WorkflowInstance @join__field(graph: CORE)
  stockOnHandQty: Float @join__field(graph: PROFILES)
  packedQty: Int @join__field(graph: PROFILES)
}

type OrderLineAggregateResult {
  count: Int
  orderLineNumberMin: Int
  orderLineNumberMax: Int
  orderLineNumberSum: Int
  orderLineNumberAvg: Float
  quantityMin: Int
  quantityMax: Int
  quantitySum: Int
  quantityAvg: Float
  defectiveSerialNumbersMin: String
  defectiveSerialNumbersMax: String
}

input OrderLineFilter {
  id: [ID!]
  isActive: Boolean
  has: [OrderLineHasFilter]
  and: [OrderLineFilter]
  or: [OrderLineFilter]
  not: OrderLineFilter
}

enum OrderLineHasFilter {
  isActive
  order
  orderLineNumber
  material
  quantity
  defectiveSerialNumbers
  isReturn
  workflowInstance
}

input OrderLineOrder {
  asc: OrderLineOrderable
  desc: OrderLineOrderable
  then: OrderLineOrder
}

enum OrderLineOrderable {
  orderLineNumber
  quantity
  defectiveSerialNumbers
}

input OrderLinePatch {
  isActive: Boolean
  order: OrderRef
  orderLineNumber: Int
  material: MaterialDefinitionRef
  quantity: Int
  defectiveSerialNumbers: String
  isReturn: Boolean
  workflowInstance: WorkflowInstanceRef
}

input OrderLineRef {
  id: ID
  isActive: Boolean
  order: OrderRef
  orderLineNumber: Int
  material: MaterialDefinitionRef
  quantity: Int
  defectiveSerialNumbers: String
  isReturn: Boolean
  workflowInstance: WorkflowInstanceRef
}

input OrderOrder {
  asc: OrderOrderable
  desc: OrderOrderable
  then: OrderOrder
}

enum OrderOrderable {
  customerOrderNumber
  customerReference
  notes
  createdDateTime
}

input OrderPatch {
  isActive: Boolean
  orderType: OrderType
  customerOrderNumber: String
  customerReference: String
  deliveryTerms: IncoTerms
  status: OrderStatus
  shipFromPartner: PartnerRef
  shipToPartner: PartnerRef
  invoiceFromPartner: PartnerRef
  invoiceToPartner: PartnerRef
  warehouse: EquipmentRef
  lines: [OrderLineRef]
  shipments: [ShipmentRef]
  notes: String
  createdDateTime: DateTime
}

input OrderRef {
  id: ID
  isActive: Boolean
  orderType: OrderType
  customerOrderNumber: String
  customerReference: String
  deliveryTerms: IncoTerms
  status: OrderStatus
  shipFromPartner: PartnerRef
  shipToPartner: PartnerRef
  invoiceFromPartner: PartnerRef
  invoiceToPartner: PartnerRef
  warehouse: EquipmentRef
  lines: [OrderLineRef]
  shipments: [ShipmentRef]
  notes: String
  createdDateTime: DateTime
}

type OrderStartRuleset {
  id: ID!
  name: String!
  segment(filter: OperationsSegmentFilter): OperationsSegment
  eventDefs(filter: EventDefinitionFilter, order: EventDefinitionOrder, first: Int, offset: Int): [EventDefinition]
  eventDefsAggregate(filter: EventDefinitionFilter): EventDefinitionAggregateResult
}

type OrderStartRulesetAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
}

input OrderStartRulesetFilter {
  id: [ID!]
  has: [OrderStartRulesetHasFilter]
  and: [OrderStartRulesetFilter]
  or: [OrderStartRulesetFilter]
  not: OrderStartRulesetFilter
}

enum OrderStartRulesetHasFilter {
  name
  segment
  eventDefs
}

input OrderStartRulesetOrder {
  asc: OrderStartRulesetOrderable
  desc: OrderStartRulesetOrderable
  then: OrderStartRulesetOrder
}

enum OrderStartRulesetOrderable {
  name
}

input OrderStartRulesetPatch {
  name: String
  segment: OperationsSegmentRef
  eventDefs: [EventDefinitionRef]
}

input OrderStartRulesetRef {
  id: ID
  name: String
  segment: OperationsSegmentRef
  eventDefs: [EventDefinitionRef]
}

enum OrderStatus {
  CREATED
  RECEIVED
  PACKED
  SHIPPED
  DELIVERED
  COMPLETE
}

enum OrderType {
  SALES_ORDER
  RETURN_ORDER
  REPLACE_ORDER
  REPAIR_ORDER
  PURCHASE_ORDER
}

input OrderType_hash {
  eq: OrderType
  in: [OrderType]
}

type Partner
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
  @join__type(graph: PROFILES, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  companyCode: String! @join__field(graph: CORE)
  name: String @join__field(graph: CORE)
  vatNumber: String @join__field(graph: CORE)
  registrationNumber: String @join__field(graph: CORE)
  contactName: String @join__field(graph: CORE)
  contactEmail: String @join__field(graph: CORE)
  contactPhone: String @join__field(graph: CORE)
  shippingAddress(filter: AddressFilter): Address @join__field(graph: CORE)
  billingAddress(filter: AddressFilter): Address @join__field(graph: CORE)
  isMerchant: Boolean @join__field(graph: CORE)
  isRepairer: Boolean @join__field(graph: CORE)
  isSupplier: Boolean @join__field(graph: CORE)
  isTransport: Boolean @join__field(graph: CORE)
  isCustomer: Boolean @join__field(graph: CORE)
  isInventoryOwner: Boolean @join__field(graph: CORE)
  carriers(filter: CarrierFilter, order: CarrierOrder, first: Int, offset: Int): [Carrier] @join__field(graph: CORE)
  fromOrders(filter: OrderFilter, order: OrderOrder, first: Int, offset: Int): [Order] @join__field(graph: CORE)
  toOrders(filter: OrderFilter, order: OrderOrder, first: Int, offset: Int): [Order] @join__field(graph: CORE)
  carriersAggregate(filter: CarrierFilter): CarrierAggregateResult @join__field(graph: CORE)
  fromOrdersAggregate(filter: OrderFilter): OrderAggregateResult @join__field(graph: CORE)
  toOrdersAggregate(filter: OrderFilter): OrderAggregateResult @join__field(graph: CORE)
}

type PartnerAggregateResult {
  count: Int
  companyCodeMin: String
  companyCodeMax: String
  nameMin: String
  nameMax: String
  vatNumberMin: String
  vatNumberMax: String
  registrationNumberMin: String
  registrationNumberMax: String
  contactNameMin: String
  contactNameMax: String
  contactEmailMin: String
  contactEmailMax: String
  contactPhoneMin: String
  contactPhoneMax: String
}

input PartnerFilter {
  id: [ID!]
  isActive: Boolean
  companyCode: StringHashFilter
  name: StringHashFilter
  isMerchant: Boolean
  isRepairer: Boolean
  isSupplier: Boolean
  isTransport: Boolean
  isCustomer: Boolean
  isInventoryOwner: Boolean
  has: [PartnerHasFilter]
  and: [PartnerFilter]
  or: [PartnerFilter]
  not: PartnerFilter
}

enum PartnerHasFilter {
  isActive
  companyCode
  name
  vatNumber
  registrationNumber
  contactName
  contactEmail
  contactPhone
  shippingAddress
  billingAddress
  isMerchant
  isRepairer
  isSupplier
  isTransport
  isCustomer
  isInventoryOwner
  carriers
  fromOrders
  toOrders
}

input PartnerOrder {
  asc: PartnerOrderable
  desc: PartnerOrderable
  then: PartnerOrder
}

enum PartnerOrderable {
  companyCode
  name
  vatNumber
  registrationNumber
  contactName
  contactEmail
  contactPhone
}

input PartnerPatch {
  isActive: Boolean
  companyCode: String
  name: String
  vatNumber: String
  registrationNumber: String
  contactName: String
  contactEmail: String
  contactPhone: String
  shippingAddress: AddressRef
  billingAddress: AddressRef
  isMerchant: Boolean
  isRepairer: Boolean
  isSupplier: Boolean
  isTransport: Boolean
  isCustomer: Boolean
  isInventoryOwner: Boolean
  carriers: [CarrierRef]
  fromOrders: [OrderRef]
  toOrders: [OrderRef]
}

input PartnerRef {
  id: ID
  isActive: Boolean
  companyCode: String
  name: String
  vatNumber: String
  registrationNumber: String
  contactName: String
  contactEmail: String
  contactPhone: String
  shippingAddress: AddressRef
  billingAddress: AddressRef
  isMerchant: Boolean
  isRepairer: Boolean
  isSupplier: Boolean
  isTransport: Boolean
  isCustomer: Boolean
  isInventoryOwner: Boolean
  carriers: [CarrierRef]
  fromOrders: [OrderRef]
  toOrders: [OrderRef]
}

type PayloadFieldDefinition
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  expression: String! @join__field(graph: CORE)
  fieldType: PayloadFieldType @join__field(graph: CORE)
}

type PayloadFieldDefinitionAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  expressionMin: String
  expressionMax: String
}

input PayloadFieldDefinitionFilter {
  id: [ID!]
  isActive: Boolean
  has: [PayloadFieldDefinitionHasFilter]
  and: [PayloadFieldDefinitionFilter]
  or: [PayloadFieldDefinitionFilter]
  not: PayloadFieldDefinitionFilter
}

enum PayloadFieldDefinitionHasFilter {
  isActive
  name
  expression
  fieldType
}

input PayloadFieldDefinitionOrder {
  asc: PayloadFieldDefinitionOrderable
  desc: PayloadFieldDefinitionOrderable
  then: PayloadFieldDefinitionOrder
}

enum PayloadFieldDefinitionOrderable {
  name
  expression
}

input PayloadFieldDefinitionPatch {
  isActive: Boolean
  name: String
  expression: String
  fieldType: PayloadFieldType
}

input PayloadFieldDefinitionRef {
  id: ID
  isActive: Boolean
  name: String
  expression: String
  fieldType: PayloadFieldType
}

enum PayloadFieldType {
  Tag
  Field
  Other
}

type Person
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
  properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property] @join__field(graph: CORE)
  memberOf(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass] @join__field(graph: CORE)
  propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult @join__field(graph: CORE)
  memberOfAggregate(filter: PersonnelClassFilter): PersonnelClassAggregateResult @join__field(graph: CORE)
}

type PersonAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
}

input PersonFilter {
  id: [ID!]
  isActive: Boolean
  name: StringHashFilter
  has: [PersonHasFilter]
  and: [PersonFilter]
  or: [PersonFilter]
  not: PersonFilter
}

enum PersonHasFilter {
  isActive
  name
  description
  properties
  memberOf
}

"""
Personnel Class represents a grouping of personnel with similar characteristics
"""
type PersonnelClass
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
  properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property] @join__field(graph: CORE)
  persons(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person] @join__field(graph: CORE)
  isTestedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @join__field(graph: CORE)
  propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult @join__field(graph: CORE)
  personsAggregate(filter: PersonFilter): PersonAggregateResult @join__field(graph: CORE)
  isTestedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult @join__field(graph: CORE)
}

type PersonnelClassAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
}

input PersonnelClassFilter {
  id: [ID!]
  isActive: Boolean
  name: StringHashFilter
  has: [PersonnelClassHasFilter]
  and: [PersonnelClassFilter]
  or: [PersonnelClassFilter]
  not: PersonnelClassFilter
}

enum PersonnelClassHasFilter {
  isActive
  name
  description
  properties
  persons
  isTestedBy
}

input PersonnelClassOrder {
  asc: PersonnelClassOrderable
  desc: PersonnelClassOrderable
  then: PersonnelClassOrder
}

enum PersonnelClassOrderable {
  name
  description
}

input PersonnelClassPatch {
  isActive: Boolean
  description: String
  properties: [PropertyRef]
  persons: [PersonRef]
  isTestedBy: [TestSpecificationRef]
}

input PersonnelClassRef {
  id: ID
  isActive: Boolean
  name: String
  description: String
  properties: [PropertyRef]
  persons: [PersonRef]
  isTestedBy: [TestSpecificationRef]
}

type PersonnelSpecification
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  workMaster(filter: WorkMasterFilter): WorkMaster @join__field(graph: CORE)
  workDirective(filter: WorkDirectiveFilter): WorkDirective @join__field(graph: CORE)
  jobOrder(filter: JobOrderFilter): JobOrder @join__field(graph: CORE)
  operationsSegment(filter: OperationsSegmentFilter): OperationsSegment @join__field(graph: CORE)
  person(filter: PersonFilter): Person @join__field(graph: CORE)
  personnelClass(filter: PersonnelClassFilter): PersonnelClass @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
  personnelUse: String @join__field(graph: CORE)
  quantity: Float @join__field(graph: CORE)
  uom(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: CORE)
}

type PersonnelSpecificationAggregateResult {
  count: Int
  descriptionMin: String
  descriptionMax: String
  personnelUseMin: String
  personnelUseMax: String
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
}

input PersonnelSpecificationFilter {
  id: [ID!]
  isActive: Boolean
  has: [PersonnelSpecificationHasFilter]
  and: [PersonnelSpecificationFilter]
  or: [PersonnelSpecificationFilter]
  not: PersonnelSpecificationFilter
}

enum PersonnelSpecificationHasFilter {
  isActive
  workMaster
  workDirective
  jobOrder
  operationsSegment
  person
  personnelClass
  description
  personnelUse
  quantity
  uom
}

input PersonnelSpecificationOrder {
  asc: PersonnelSpecificationOrderable
  desc: PersonnelSpecificationOrderable
  then: PersonnelSpecificationOrder
}

enum PersonnelSpecificationOrderable {
  description
  personnelUse
  quantity
}

input PersonnelSpecificationPatch {
  isActive: Boolean
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  jobOrder: JobOrderRef
  operationsSegment: OperationsSegmentRef
  person: PersonRef
  personnelClass: PersonnelClassRef
  description: String
  personnelUse: String
  quantity: Float
  uom: UnitOfMeasureRef
}

input PersonnelSpecificationRef {
  id: ID
  isActive: Boolean
  workMaster: WorkMasterRef
  workDirective: WorkDirectiveRef
  jobOrder: JobOrderRef
  operationsSegment: OperationsSegmentRef
  person: PersonRef
  personnelClass: PersonnelClassRef
  description: String
  personnelUse: String
  quantity: Float
  uom: UnitOfMeasureRef
}

input PersonOrder {
  asc: PersonOrderable
  desc: PersonOrderable
  then: PersonOrder
}

enum PersonOrderable {
  name
  description
}

input PersonPatch {
  isActive: Boolean
  description: String
  properties: [PropertyRef]
  memberOf: [PersonnelClassRef]
}

input PersonRef {
  id: ID
  isActive: Boolean
  name: String
  description: String
  properties: [PropertyRef]
  memberOf: [PersonnelClassRef]
}

type Point {
  longitude: Float!
  latitude: Float!
}

input PointGeoFilter {
  near: NearFilter
  within: WithinFilter
}

type PointList {
  points: [Point!]!
}

input PointListRef {
  points: [PointRef!]!
}

input PointRef {
  longitude: Float!
  latitude: Float!
}

type Polygon {
  coordinates: [PointList!]!
}

input PolygonGeoFilter {
  near: NearFilter
  within: WithinFilter
  contains: ContainsFilter
  intersects: IntersectsFilter
}

input PolygonRef {
  coordinates: [PointListRef!]!
}

type Property
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
  @join__type(graph: PROFILES, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  type: PropertyType @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  description: String! @join__field(graph: CORE)
  dataType: DataType @join__field(graph: CORE)
  definedBy(filter: PropertyFilter): Property @join__field(graph: CORE)
  address: String @join__field(graph: CORE)
  expression: String @join__field(graph: CORE)
  value: String @join__field(graph: CORE)
  unitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: CORE)
  storeHistory: Boolean @join__field(graph: CORE)
  isTestedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @join__field(graph: CORE)
  equipment(filter: EquipmentFilter): Equipment @join__field(graph: CORE)
  equipmentClass(filter: EquipmentClassFilter): EquipmentClass @join__field(graph: CORE)
  propertyOverrides(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride] @join__field(graph: CORE)
  propertyNameAliases(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias] @join__field(graph: CORE)
  isTestedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult @join__field(graph: CORE)
  propertyOverridesAggregate(filter: EquipmentPropertyOverrideFilter): EquipmentPropertyOverrideAggregateResult @join__field(graph: CORE)
  propertyNameAliasesAggregate(filter: PropertyNameAliasFilter): PropertyNameAliasAggregateResult @join__field(graph: CORE)
}

type PropertyAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
  addressMin: String
  addressMax: String
  expressionMin: String
  expressionMax: String
  valueMin: String
  valueMax: String
}

input PropertyFilter {
  id: [ID!]
  isActive: Boolean
  type: PropertyType_hash
  name: StringHashFilter
  description: StringHashFilter
  has: [PropertyHasFilter]
  and: [PropertyFilter]
  or: [PropertyFilter]
  not: PropertyFilter
}

enum PropertyHasFilter {
  isActive
  type
  name
  description
  dataType
  definedBy
  address
  expression
  value
  unitOfMeasure
  storeHistory
  isTestedBy
  equipment
  equipmentClass
  propertyOverrides
  propertyNameAliases
}

type PropertyNameAlias {
  id: ID!
  property(filter: PropertyFilter): Property!
  equipment(filter: EquipmentFilter): Equipment!
  alias: String!
  system: String!
}

type PropertyNameAliasAggregateResult {
  count: Int
  aliasMin: String
  aliasMax: String
  systemMin: String
  systemMax: String
}

input PropertyNameAliasFilter {
  id: [ID!]
  alias: StringFullTextFilter_StringHashFilter
  system: StringFullTextFilter_StringHashFilter
  has: [PropertyNameAliasHasFilter]
  and: [PropertyNameAliasFilter]
  or: [PropertyNameAliasFilter]
  not: PropertyNameAliasFilter
}

enum PropertyNameAliasHasFilter {
  property
  equipment
  alias
  system
}

input PropertyNameAliasOrder {
  asc: PropertyNameAliasOrderable
  desc: PropertyNameAliasOrderable
  then: PropertyNameAliasOrder
}

enum PropertyNameAliasOrderable {
  alias
  system
}

input PropertyNameAliasPatch {
  property: PropertyRef
  equipment: EquipmentRef
  alias: String
  system: String
}

input PropertyNameAliasRef {
  id: ID
  property: PropertyRef
  equipment: EquipmentRef
  alias: String
  system: String
}

input PropertyOrder {
  asc: PropertyOrderable
  desc: PropertyOrderable
  then: PropertyOrder
}

enum PropertyOrderable {
  name
  description
  address
  expression
  value
}

input PropertyPatch {
  isActive: Boolean
  type: PropertyType
  name: String
  description: String
  dataType: DataType
  definedBy: PropertyRef
  address: String
  expression: String
  value: String
  unitOfMeasure: UnitOfMeasureRef
  storeHistory: Boolean
  isTestedBy: [TestSpecificationRef]
  equipment: EquipmentRef
  equipmentClass: EquipmentClassRef
  propertyOverrides: [EquipmentPropertyOverrideRef]
  propertyNameAliases: [PropertyNameAliasRef]
}

input PropertyRef {
  id: ID
  isActive: Boolean
  type: PropertyType
  name: String
  description: String
  dataType: DataType
  definedBy: PropertyRef
  address: String
  expression: String
  value: String
  unitOfMeasure: UnitOfMeasureRef
  storeHistory: Boolean
  isTestedBy: [TestSpecificationRef]
  equipment: EquipmentRef
  equipmentClass: EquipmentClassRef
  propertyOverrides: [EquipmentPropertyOverrideRef]
  propertyNameAliases: [PropertyNameAliasRef]
}

enum PropertyType {
  BOUND
  CALCULATED
  REFERENCED
}

input PropertyType_hash {
  eq: PropertyType
  in: [PropertyType]
}

type PropertyValueAlias {
  id: ID!
  property(filter: PropertyFilter): Property!
  value: String!
  alias: String!
  system: String!
}

type PropertyValueAliasAggregateResult {
  count: Int
  valueMin: String
  valueMax: String
  aliasMin: String
  aliasMax: String
  systemMin: String
  systemMax: String
}

input PropertyValueAliasFilter {
  id: [ID!]
  value: StringFullTextFilter
  alias: StringFullTextFilter
  system: StringFullTextFilter
  has: [PropertyValueAliasHasFilter]
  and: [PropertyValueAliasFilter]
  or: [PropertyValueAliasFilter]
  not: PropertyValueAliasFilter
}

enum PropertyValueAliasHasFilter {
  property
  value
  alias
  system
}

input PropertyValueAliasOrder {
  asc: PropertyValueAliasOrderable
  desc: PropertyValueAliasOrderable
  then: PropertyValueAliasOrder
}

enum PropertyValueAliasOrderable {
  value
  alias
  system
}

input PropertyValueAliasPatch {
  property: PropertyRef
  value: String
  alias: String
  system: String
}

input PropertyValueAliasRef {
  id: ID
  property: PropertyRef
  value: String
  alias: String
  system: String
}

type QuantityLog
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  jobResponse(filter: JobResponseFilter): JobResponse! @join__field(graph: CORE)
  equipment(filter: EquipmentFilter): Equipment @join__field(graph: CORE)
  type: MaterialUse! @join__field(graph: CORE)
  timestamp: DateTime @join__field(graph: CORE)
  quantity: Float! @join__field(graph: CORE)
  reasonCode: String @join__field(graph: CORE)
  reasonText: String @join__field(graph: CORE)
  comments: String @join__field(graph: CORE)
}

type QuantityLogAggregateResult {
  count: Int
  timestampMin: DateTime
  timestampMax: DateTime
  quantityMin: Float
  quantityMax: Float
  quantitySum: Float
  quantityAvg: Float
  reasonCodeMin: String
  reasonCodeMax: String
  reasonTextMin: String
  reasonTextMax: String
  commentsMin: String
  commentsMax: String
}

input QuantityLogFilter {
  id: [ID!]
  isActive: Boolean
  type: MaterialUse_hash
  timestamp: DateTimeFilter
  reasonCode: StringHashFilter
  reasonText: StringHashFilter
  comments: StringHashFilter
  has: [QuantityLogHasFilter]
  and: [QuantityLogFilter]
  or: [QuantityLogFilter]
  not: QuantityLogFilter
}

enum QuantityLogHasFilter {
  isActive
  jobResponse
  equipment
  type
  timestamp
  quantity
  reasonCode
  reasonText
  comments
}

input QuantityLogOrder {
  asc: QuantityLogOrderable
  desc: QuantityLogOrderable
  then: QuantityLogOrder
}

enum QuantityLogOrderable {
  timestamp
  quantity
  reasonCode
  reasonText
  comments
}

input QuantityLogPatch {
  isActive: Boolean
  jobResponse: JobResponseRef
  equipment: EquipmentRef
  type: MaterialUse
  timestamp: DateTime
  quantity: Float
  reasonCode: String
  reasonText: String
  comments: String
}

input QuantityLogRef {
  id: ID
  isActive: Boolean
  jobResponse: JobResponseRef
  equipment: EquipmentRef
  type: MaterialUse
  timestamp: DateTime
  quantity: Float
  reasonCode: String
  reasonText: String
  comments: String
}

type QuantityLogTS {
  equipment: Equipment
  timeStamp: DateTime
  material: MaterialDefinition
  materialUse: MaterialUse
  quantity: Float
  reasonText: String
  reasonCode: String
  comment: String
}

input QuantityLogTSInput {
  equipment: ExtEquipmentRef!
  timeStamp: DateTime!
  material: ExtMaterialDefinitionRef
  materialUse: MaterialUse!
  quantity: Float!
  reasonText: String
  reasonCode: String
  comment: String
}

"""a summary of the quantity log"""
type QuantitySummary {
  """the type of quantity associated with the result"""
  type: String
  reasonCode: String
  reasonText: String

  """the sum of this type of quantity"""
  quantitySum: Float
}

"""the filter for a quantitySummary query"""
input QuantitySummaryFilter {
  """limits the number of results that return"""
  topN: Int

  """
  groups the quantity logs on their reasons as well as their type if used.
  valid options are 'reasonText' and 'reasonCode'
  """
  groupBy: String

  """deprecated"""
  sortBy: String

  """returns only the type specified by filterType"""
  filterType: String
}

type Query {
  getUser(id: ID, username: String): User @join__field(graph: CORE)
  queryUser(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User] @join__field(graph: CORE)
  aggregateUser(filter: UserFilter): UserAggregateResult @join__field(graph: CORE)
  getUserRole(id: ID!): UserRole @join__field(graph: CORE)
  queryUserRole(filter: UserRoleFilter, first: Int, offset: Int): [UserRole] @join__field(graph: CORE)
  aggregateUserRole(filter: UserRoleFilter): UserRoleAggregateResult @join__field(graph: CORE)
  getRole(name: String!): Role @join__field(graph: CORE)
  queryRole(filter: RoleFilter, order: RoleOrder, first: Int, offset: Int): [Role] @join__field(graph: CORE)
  aggregateRole(filter: RoleFilter): RoleAggregateResult @join__field(graph: CORE)
  getAccessRight(id: ID!): AccessRight @join__field(graph: CORE)
  queryAccessRight(filter: AccessRightFilter, first: Int, offset: Int): [AccessRight] @join__field(graph: CORE)
  aggregateAccessRight(filter: AccessRightFilter): AccessRightAggregateResult @join__field(graph: CORE)
  getACL(id: ID!): ACL @join__field(graph: CORE)
  queryACL(filter: ACLFilter, first: Int, offset: Int): [ACL] @join__field(graph: CORE)
  aggregateACL(filter: ACLFilter): ACLAggregateResult @join__field(graph: CORE)
  getLibreService(id: ID, name: String): LibreService @join__field(graph: CORE)
  queryLibreService(filter: LibreServiceFilter, order: LibreServiceOrder, first: Int, offset: Int): [LibreService] @join__field(graph: CORE)
  aggregateLibreService(filter: LibreServiceFilter): LibreServiceAggregateResult @join__field(graph: CORE)
  getMenu(id: ID!): Menu @join__field(graph: CORE)
  queryMenu(filter: MenuFilter, order: MenuOrder, first: Int, offset: Int): [Menu] @join__field(graph: CORE)
  aggregateMenu(filter: MenuFilter): MenuAggregateResult @join__field(graph: CORE)
  getOperationsRequest(id: ID, code: String): OperationsRequest @join__field(graph: CORE)
  queryOperationsRequest(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest] @join__field(graph: CORE)
  aggregateOperationsRequest(filter: OperationsRequestFilter): OperationsRequestAggregateResult @join__field(graph: CORE)
  getRequestState(id: ID, name: String): RequestState @join__field(graph: CORE)
  queryRequestState(filter: RequestStateFilter, order: RequestStateOrder, first: Int, offset: Int): [RequestState] @join__field(graph: CORE)
  aggregateRequestState(filter: RequestStateFilter): RequestStateAggregateResult @join__field(graph: CORE)
  getOperationsDefinition(id: ID, name: String): OperationsDefinition @join__field(graph: CORE)
  queryOperationsDefinition(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition] @join__field(graph: CORE)
  aggregateOperationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinitionAggregateResult @join__field(graph: CORE)
  getBillOfMaterial(id: ID, name: String): BillOfMaterial @join__field(graph: CORE)
  queryBillOfMaterial(filter: BillOfMaterialFilter, order: BillOfMaterialOrder, first: Int, offset: Int): [BillOfMaterial] @join__field(graph: CORE)
  aggregateBillOfMaterial(filter: BillOfMaterialFilter): BillOfMaterialAggregateResult @join__field(graph: CORE)
  getOperationsSegment(id: ID!): OperationsSegment @join__field(graph: CORE)
  queryOperationsSegment(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment] @join__field(graph: CORE)
  aggregateOperationsSegment(filter: OperationsSegmentFilter): OperationsSegmentAggregateResult @join__field(graph: CORE)
  getTransitionEventRuleset(id: ID!): TransitionEventRuleset @join__field(graph: CORE)
  queryTransitionEventRuleset(filter: TransitionEventRulesetFilter, order: TransitionEventRulesetOrder, first: Int, offset: Int): [TransitionEventRuleset] @join__field(graph: CORE)
  aggregateTransitionEventRuleset(filter: TransitionEventRulesetFilter): TransitionEventRulesetAggregateResult @join__field(graph: CORE)
  getStateEventRuleset(id: ID!): StateEventRuleset @join__field(graph: CORE)
  queryStateEventRuleset(filter: StateEventRulesetFilter, order: StateEventRulesetOrder, first: Int, offset: Int): [StateEventRuleset] @join__field(graph: CORE)
  aggregateStateEventRuleset(filter: StateEventRulesetFilter): StateEventRulesetAggregateResult @join__field(graph: CORE)
  getMaterialEventRuleset(id: ID!): MaterialEventRuleset @join__field(graph: CORE)
  queryMaterialEventRuleset(filter: MaterialEventRulesetFilter, order: MaterialEventRulesetOrder, first: Int, offset: Int): [MaterialEventRuleset] @join__field(graph: CORE)
  aggregateMaterialEventRuleset(filter: MaterialEventRulesetFilter): MaterialEventRulesetAggregateResult @join__field(graph: CORE)
  getOrderStartRuleset(id: ID!): OrderStartRuleset @join__field(graph: CORE)
  queryOrderStartRuleset(filter: OrderStartRulesetFilter, order: OrderStartRulesetOrder, first: Int, offset: Int): [OrderStartRuleset] @join__field(graph: CORE)
  aggregateOrderStartRuleset(filter: OrderStartRulesetFilter): OrderStartRulesetAggregateResult @join__field(graph: CORE)
  getSegmentInvoiceSetting(id: ID!): SegmentInvoiceSetting @join__field(graph: CORE)
  querySegmentInvoiceSetting(filter: SegmentInvoiceSettingFilter, order: SegmentInvoiceSettingOrder, first: Int, offset: Int): [SegmentInvoiceSetting] @join__field(graph: CORE)
  aggregateSegmentInvoiceSetting(filter: SegmentInvoiceSettingFilter): SegmentInvoiceSettingAggregateResult @join__field(graph: CORE)
  getSegmentDependency(id: ID!): SegmentDependency @join__field(graph: CORE)
  querySegmentDependency(filter: SegmentDependencyFilter, order: SegmentDependencyOrder, first: Int, offset: Int): [SegmentDependency] @join__field(graph: CORE)
  aggregateSegmentDependency(filter: SegmentDependencyFilter): SegmentDependencyAggregateResult @join__field(graph: CORE)
  getWorkMaster(id: ID, name: String): WorkMaster @join__field(graph: CORE)
  queryWorkMaster(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster] @join__field(graph: CORE)
  aggregateWorkMaster(filter: WorkMasterFilter): WorkMasterAggregateResult @join__field(graph: CORE)
  getWorkDirective(id: ID, name: String): WorkDirective @join__field(graph: CORE)
  queryWorkDirective(filter: WorkDirectiveFilter, order: WorkDirectiveOrder, first: Int, offset: Int): [WorkDirective] @join__field(graph: CORE)
  aggregateWorkDirective(filter: WorkDirectiveFilter): WorkDirectiveAggregateResult @join__field(graph: CORE)
  getJobOrder(id: ID, name: String): JobOrder @join__field(graph: CORE)
  queryJobOrder(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @join__field(graph: CORE)
  aggregateJobOrder(filter: JobOrderFilter): JobOrderAggregateResult @join__field(graph: CORE)
  getJobOrderNote(id: ID!): JobOrderNote @join__field(graph: CORE)
  queryJobOrderNote(filter: JobOrderNoteFilter, order: JobOrderNoteOrder, first: Int, offset: Int): [JobOrderNote] @join__field(graph: CORE)
  aggregateJobOrderNote(filter: JobOrderNoteFilter): JobOrderNoteAggregateResult @join__field(graph: CORE)
  getJobResponse(id: ID!): JobResponse @join__field(graph: CORE)
  queryJobResponse(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse] @join__field(graph: CORE)
  aggregateJobResponse(filter: JobResponseFilter): JobResponseAggregateResult @join__field(graph: CORE)
  getEventLog(id: ID!): EventLog @join__field(graph: CORE)
  queryEventLog(filter: EventLogFilter, order: EventLogOrder, first: Int, offset: Int): [EventLog] @join__field(graph: CORE)
  aggregateEventLog(filter: EventLogFilter): EventLogAggregateResult @join__field(graph: CORE)
  getQuantityLog(id: ID!): QuantityLog @join__field(graph: CORE)
  queryQuantityLog(filter: QuantityLogFilter, order: QuantityLogOrder, first: Int, offset: Int): [QuantityLog] @join__field(graph: CORE)
  aggregateQuantityLog(filter: QuantityLogFilter): QuantityLogAggregateResult @join__field(graph: CORE)
  getEquipmentSpecification(id: ID!): EquipmentSpecification @join__field(graph: CORE)
  queryEquipmentSpecification(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification] @join__field(graph: CORE)
  aggregateEquipmentSpecification(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult @join__field(graph: CORE)
  getMaterialSpecification(id: ID!): MaterialSpecification @join__field(graph: CORE)
  queryMaterialSpecification(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @join__field(graph: CORE)
  aggregateMaterialSpecification(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult @join__field(graph: CORE)
  getPersonnelSpecification(id: ID!): PersonnelSpecification @join__field(graph: CORE)
  queryPersonnelSpecification(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification] @join__field(graph: CORE)
  aggregatePersonnelSpecification(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult @join__field(graph: CORE)
  getDashboardConfig(id: ID, name: String): DashboardConfig @join__field(graph: CORE)
  queryDashboardConfig(filter: DashboardConfigFilter, order: DashboardConfigOrder, first: Int, offset: Int): [DashboardConfig] @join__field(graph: CORE)
  aggregateDashboardConfig(filter: DashboardConfigFilter): DashboardConfigAggregateResult @join__field(graph: CORE)
  getDashboardPanelConfig(id: ID!): DashboardPanelConfig @join__field(graph: CORE)
  queryDashboardPanelConfig(filter: DashboardPanelConfigFilter, order: DashboardPanelConfigOrder, first: Int, offset: Int): [DashboardPanelConfig] @join__field(graph: CORE)
  aggregateDashboardPanelConfig(filter: DashboardPanelConfigFilter): DashboardPanelConfigAggregateResult @join__field(graph: CORE)
  getEquipment(id: ID!): Equipment @join__field(graph: CORE)
  queryEquipment(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment] @join__field(graph: CORE)
  aggregateEquipment(filter: EquipmentFilter): EquipmentAggregateResult @join__field(graph: CORE)
  getEquipmentNameAlias(id: ID!): EquipmentNameAlias @join__field(graph: CORE)
  queryEquipmentNameAlias(filter: EquipmentNameAliasFilter, order: EquipmentNameAliasOrder, first: Int, offset: Int): [EquipmentNameAlias] @join__field(graph: CORE)
  aggregateEquipmentNameAlias(filter: EquipmentNameAliasFilter): EquipmentNameAliasAggregateResult @join__field(graph: CORE)
  getPropertyNameAlias(id: ID!): PropertyNameAlias @join__field(graph: CORE)
  queryPropertyNameAlias(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias] @join__field(graph: CORE)
  aggregatePropertyNameAlias(filter: PropertyNameAliasFilter): PropertyNameAliasAggregateResult @join__field(graph: CORE)
  getPropertyValueAlias(id: ID!): PropertyValueAlias @join__field(graph: CORE)
  queryPropertyValueAlias(filter: PropertyValueAliasFilter, order: PropertyValueAliasOrder, first: Int, offset: Int): [PropertyValueAlias] @join__field(graph: CORE)
  aggregatePropertyValueAlias(filter: PropertyValueAliasFilter): PropertyValueAliasAggregateResult @join__field(graph: CORE)
  getEquipmentReasonOverride(id: ID!): EquipmentReasonOverride @join__field(graph: CORE)
  queryEquipmentReasonOverride(filter: EquipmentReasonOverrideFilter, order: EquipmentReasonOverrideOrder, first: Int, offset: Int): [EquipmentReasonOverride] @join__field(graph: CORE)
  aggregateEquipmentReasonOverride(filter: EquipmentReasonOverrideFilter): EquipmentReasonOverrideAggregateResult @join__field(graph: CORE)
  getEquipmentClass(id: ID!): EquipmentClass @join__field(graph: CORE)
  queryEquipmentClass(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass] @join__field(graph: CORE)
  aggregateEquipmentClass(filter: EquipmentClassFilter): EquipmentClassAggregateResult @join__field(graph: CORE)
  getProperty(id: ID!): Property @join__field(graph: CORE)
  queryProperty(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property] @join__field(graph: CORE)
  aggregateProperty(filter: PropertyFilter): PropertyAggregateResult @join__field(graph: CORE)
  getEquipmentPropertyOverride(id: ID!): EquipmentPropertyOverride @join__field(graph: CORE)
  queryEquipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride] @join__field(graph: CORE)
  aggregateEquipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter): EquipmentPropertyOverrideAggregateResult @join__field(graph: CORE)
  getEventDefinition(id: ID!): EventDefinition @join__field(graph: CORE)
  queryEventDefinition(filter: EventDefinitionFilter, order: EventDefinitionOrder, first: Int, offset: Int): [EventDefinition] @join__field(graph: CORE)
  aggregateEventDefinition(filter: EventDefinitionFilter): EventDefinitionAggregateResult @join__field(graph: CORE)
  getPayloadFieldDefinition(id: ID!): PayloadFieldDefinition @join__field(graph: CORE)
  queryPayloadFieldDefinition(filter: PayloadFieldDefinitionFilter, order: PayloadFieldDefinitionOrder, first: Int, offset: Int): [PayloadFieldDefinition] @join__field(graph: CORE)
  aggregatePayloadFieldDefinition(filter: PayloadFieldDefinitionFilter): PayloadFieldDefinitionAggregateResult @join__field(graph: CORE)
  getReason(id: ID!): Reason @join__field(graph: CORE)
  queryReason(filter: ReasonFilter, order: ReasonOrder, first: Int, offset: Int): [Reason] @join__field(graph: CORE)
  aggregateReason(filter: ReasonFilter): ReasonAggregateResult @join__field(graph: CORE)
  getReasonCategory(id: ID, code: String): ReasonCategory @join__field(graph: CORE)
  queryReasonCategory(filter: ReasonCategoryFilter, order: ReasonCategoryOrder, first: Int, offset: Int): [ReasonCategory] @join__field(graph: CORE)
  aggregateReasonCategory(filter: ReasonCategoryFilter): ReasonCategoryAggregateResult @join__field(graph: CORE)
  getMaterialClass(id: ID, code: String): MaterialClass @join__field(graph: CORE)
  queryMaterialClass(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass] @join__field(graph: CORE)
  aggregateMaterialClass(filter: MaterialClassFilter): MaterialClassAggregateResult @join__field(graph: CORE)
  getMaterialDefinition(id: ID, code: String): MaterialDefinition @join__field(graph: CORE)
  queryMaterialDefinition(filter: MaterialDefinitionFilter, order: MaterialDefinitionOrder, first: Int, offset: Int): [MaterialDefinition] @join__field(graph: CORE)
  aggregateMaterialDefinition(filter: MaterialDefinitionFilter): MaterialDefinitionAggregateResult @join__field(graph: CORE)
  getMaterialAlternate(id: ID!): MaterialAlternate @join__field(graph: CORE)
  queryMaterialAlternate(filter: MaterialAlternateFilter, order: MaterialAlternateOrder, first: Int, offset: Int): [MaterialAlternate] @join__field(graph: CORE)
  aggregateMaterialAlternate(filter: MaterialAlternateFilter): MaterialAlternateAggregateResult @join__field(graph: CORE)
  getCarrier(id: ID, code: String): Carrier @join__field(graph: CORE)
  queryCarrier(filter: CarrierFilter, order: CarrierOrder, first: Int, offset: Int): [Carrier] @join__field(graph: CORE)
  aggregateCarrier(filter: CarrierFilter): CarrierAggregateResult @join__field(graph: CORE)
  getMaterialLot(id: ID, code: String): MaterialLot @join__field(graph: CORE)
  queryMaterialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot] @join__field(graph: CORE)
  aggregateMaterialLot(filter: MaterialLotFilter): MaterialLotAggregateResult @join__field(graph: CORE)
  getMaterialSubLot(id: ID, code: String): MaterialSubLot @join__field(graph: CORE)
  queryMaterialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @join__field(graph: CORE)
  aggregateMaterialSubLot(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult @join__field(graph: CORE)
  getMaterialUnit(id: ID, serialNumber: String): MaterialUnit @join__field(graph: CORE)
  queryMaterialUnit(filter: MaterialUnitFilter, order: MaterialUnitOrder, first: Int, offset: Int): [MaterialUnit] @join__field(graph: CORE)
  aggregateMaterialUnit(filter: MaterialUnitFilter): MaterialUnitAggregateResult @join__field(graph: CORE)
  getInventoryTransaction(id: ID!): InventoryTransaction @join__field(graph: CORE)
  queryInventoryTransaction(filter: InventoryTransactionFilter, order: InventoryTransactionOrder, first: Int, offset: Int): [InventoryTransaction] @join__field(graph: CORE)
  aggregateInventoryTransaction(filter: InventoryTransactionFilter): InventoryTransactionAggregateResult @join__field(graph: CORE)
  getMaterialEquipment(id: ID, key: String): MaterialEquipment @join__field(graph: CORE)
  queryMaterialEquipment(filter: MaterialEquipmentFilter, order: MaterialEquipmentOrder, first: Int, offset: Int): [MaterialEquipment] @join__field(graph: CORE)
  aggregateMaterialEquipment(filter: MaterialEquipmentFilter): MaterialEquipmentAggregateResult @join__field(graph: CORE)
  getUnitOfMeasure(id: ID, code: String): UnitOfMeasure @join__field(graph: CORE)
  queryUnitOfMeasure(filter: UnitOfMeasureFilter, order: UnitOfMeasureOrder, first: Int, offset: Int): [UnitOfMeasure] @join__field(graph: CORE)
  aggregateUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasureAggregateResult @join__field(graph: CORE)
  getUnitOfMeasureConversion(id: ID!): UnitOfMeasureConversion @join__field(graph: CORE)
  queryUnitOfMeasureConversion(filter: UnitOfMeasureConversionFilter, order: UnitOfMeasureConversionOrder, first: Int, offset: Int): [UnitOfMeasureConversion] @join__field(graph: CORE)
  aggregateUnitOfMeasureConversion(filter: UnitOfMeasureConversionFilter): UnitOfMeasureConversionAggregateResult @join__field(graph: CORE)
  getMaterialStatus(id: ID, code: String): MaterialStatus @join__field(graph: CORE)
  queryMaterialStatus(filter: MaterialStatusFilter, order: MaterialStatusOrder, first: Int, offset: Int): [MaterialStatus] @join__field(graph: CORE)
  aggregateMaterialStatus(filter: MaterialStatusFilter): MaterialStatusAggregateResult @join__field(graph: CORE)
  getMaterialStateModel(id: ID, name: String): MaterialStateModel @join__field(graph: CORE)
  queryMaterialStateModel(filter: MaterialStateModelFilter, order: MaterialStateModelOrder, first: Int, offset: Int): [MaterialStateModel] @join__field(graph: CORE)
  aggregateMaterialStateModel(filter: MaterialStateModelFilter): MaterialStateModelAggregateResult @join__field(graph: CORE)
  getMaterialStateTransition(id: ID!): MaterialStateTransition @join__field(graph: CORE)
  queryMaterialStateTransition(filter: MaterialStateTransitionFilter, first: Int, offset: Int): [MaterialStateTransition] @join__field(graph: CORE)
  aggregateMaterialStateTransition(filter: MaterialStateTransitionFilter): MaterialStateTransitionAggregateResult @join__field(graph: CORE)
  getPersonnelClass(id: ID, name: String): PersonnelClass @join__field(graph: CORE)
  queryPersonnelClass(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass] @join__field(graph: CORE)
  aggregatePersonnelClass(filter: PersonnelClassFilter): PersonnelClassAggregateResult @join__field(graph: CORE)
  getPerson(id: ID, name: String): Person @join__field(graph: CORE)
  queryPerson(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person] @join__field(graph: CORE)
  aggregatePerson(filter: PersonFilter): PersonAggregateResult @join__field(graph: CORE)
  getTestSpecification(id: ID!): TestSpecification @join__field(graph: CORE)
  queryTestSpecification(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification] @join__field(graph: CORE)
  aggregateTestSpecification(filter: TestSpecificationFilter): TestSpecificationAggregateResult @join__field(graph: CORE)
  getTestResult(id: ID!): TestResult @join__field(graph: CORE)
  queryTestResult(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult] @join__field(graph: CORE)
  aggregateTestResult(filter: TestResultFilter): TestResultAggregateResult @join__field(graph: CORE)
  getWorkCalendarDefinitionEntry(id: ID!): WorkCalendarDefinitionEntry @join__field(graph: CORE)
  queryWorkCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter, order: WorkCalendarDefinitionEntryOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntry] @join__field(graph: CORE)
  aggregateWorkCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter): WorkCalendarDefinitionEntryAggregateResult @join__field(graph: CORE)
  getWorkCalendarEntry(id: ID!): WorkCalendarEntry @join__field(graph: CORE)
  queryWorkCalendarEntry(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry] @join__field(graph: CORE)
  aggregateWorkCalendarEntry(filter: WorkCalendarEntryFilter): WorkCalendarEntryAggregateResult @join__field(graph: CORE)
  getWorkCalendar(id: ID, name: String): WorkCalendar @join__field(graph: CORE)
  queryWorkCalendar(filter: WorkCalendarFilter, order: WorkCalendarOrder, first: Int, offset: Int): [WorkCalendar] @join__field(graph: CORE)
  aggregateWorkCalendar(filter: WorkCalendarFilter): WorkCalendarAggregateResult @join__field(graph: CORE)
  getWorkflowSpecification(id: ID!): WorkflowSpecification @join__field(graph: CORE)
  queryWorkflowSpecification(filter: WorkflowSpecificationFilter, order: WorkflowSpecificationOrder, first: Int, offset: Int): [WorkflowSpecification] @join__field(graph: CORE)
  aggregateWorkflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecificationAggregateResult @join__field(graph: CORE)
  getWorkflowInstance(id: ID!): WorkflowInstance @join__field(graph: CORE)
  queryWorkflowInstance(filter: WorkflowInstanceFilter, order: WorkflowInstanceOrder, first: Int, offset: Int): [WorkflowInstance] @join__field(graph: CORE)
  aggregateWorkflowInstance(filter: WorkflowInstanceFilter): WorkflowInstanceAggregateResult @join__field(graph: CORE)
  getWorkflowInstanceProperty(id: ID, key: String): WorkflowInstanceProperty @join__field(graph: CORE)
  queryWorkflowInstanceProperty(filter: WorkflowInstancePropertyFilter, order: WorkflowInstancePropertyOrder, first: Int, offset: Int): [WorkflowInstanceProperty] @join__field(graph: CORE)
  aggregateWorkflowInstanceProperty(filter: WorkflowInstancePropertyFilter): WorkflowInstancePropertyAggregateResult @join__field(graph: CORE)
  getWorkflowNode(id: ID!): WorkflowNode @join__field(graph: CORE)
  queryWorkflowNode(filter: WorkflowNodeFilter, order: WorkflowNodeOrder, first: Int, offset: Int): [WorkflowNode] @join__field(graph: CORE)
  aggregateWorkflowNode(filter: WorkflowNodeFilter): WorkflowNodeAggregateResult @join__field(graph: CORE)
  getWorkflowNodeInstance(id: ID!): WorkflowNodeInstance @join__field(graph: CORE)
  queryWorkflowNodeInstance(filter: WorkflowNodeInstanceFilter, order: WorkflowNodeInstanceOrder, first: Int, offset: Int): [WorkflowNodeInstance] @join__field(graph: CORE)
  aggregateWorkflowNodeInstance(filter: WorkflowNodeInstanceFilter): WorkflowNodeInstanceAggregateResult @join__field(graph: CORE)
  getWorkflowNodeEvent(id: ID!): WorkflowNodeEvent @join__field(graph: CORE)
  queryWorkflowNodeEvent(filter: WorkflowNodeEventFilter, order: WorkflowNodeEventOrder, first: Int, offset: Int): [WorkflowNodeEvent] @join__field(graph: CORE)
  aggregateWorkflowNodeEvent(filter: WorkflowNodeEventFilter): WorkflowNodeEventAggregateResult @join__field(graph: CORE)
  getWorkflowNodeType(id: ID!): WorkflowNodeType @join__field(graph: CORE)
  queryWorkflowNodeType(filter: WorkflowNodeTypeFilter, order: WorkflowNodeTypeOrder, first: Int, offset: Int): [WorkflowNodeType] @join__field(graph: CORE)
  aggregateWorkflowNodeType(filter: WorkflowNodeTypeFilter): WorkflowNodeTypeAggregateResult @join__field(graph: CORE)
  getWorkflowConnection(id: ID!): WorkflowConnection @join__field(graph: CORE)
  queryWorkflowConnection(filter: WorkflowConnectionFilter, order: WorkflowConnectionOrder, first: Int, offset: Int): [WorkflowConnection] @join__field(graph: CORE)
  aggregateWorkflowConnection(filter: WorkflowConnectionFilter): WorkflowConnectionAggregateResult @join__field(graph: CORE)
  getWorkflowConnectionType(id: ID!): WorkflowConnectionType @join__field(graph: CORE)
  queryWorkflowConnectionType(filter: WorkflowConnectionTypeFilter, order: WorkflowConnectionTypeOrder, first: Int, offset: Int): [WorkflowConnectionType] @join__field(graph: CORE)
  aggregateWorkflowConnectionType(filter: WorkflowConnectionTypeFilter): WorkflowConnectionTypeAggregateResult @join__field(graph: CORE)
  getWorkflowProperty(id: ID!): WorkflowProperty @join__field(graph: CORE)
  queryWorkflowProperty(filter: WorkflowPropertyFilter, order: WorkflowPropertyOrder, first: Int, offset: Int): [WorkflowProperty] @join__field(graph: CORE)
  aggregateWorkflowProperty(filter: WorkflowPropertyFilter): WorkflowPropertyAggregateResult @join__field(graph: CORE)
  getWorkflowPropertyInstance(id: ID!): WorkflowPropertyInstance @join__field(graph: CORE)
  queryWorkflowPropertyInstance(filter: WorkflowPropertyInstanceFilter, order: WorkflowPropertyInstanceOrder, first: Int, offset: Int): [WorkflowPropertyInstance] @join__field(graph: CORE)
  aggregateWorkflowPropertyInstance(filter: WorkflowPropertyInstanceFilter): WorkflowPropertyInstanceAggregateResult @join__field(graph: CORE)
  getWorkflowPropertyValue(id: ID!): WorkflowPropertyValue @join__field(graph: CORE)
  queryWorkflowPropertyValue(filter: WorkflowPropertyValueFilter, order: WorkflowPropertyValueOrder, first: Int, offset: Int): [WorkflowPropertyValue] @join__field(graph: CORE)
  aggregateWorkflowPropertyValue(filter: WorkflowPropertyValueFilter): WorkflowPropertyValueAggregateResult @join__field(graph: CORE)
  getForm(id: ID, name: String): Form @join__field(graph: CORE)
  queryForm(filter: FormFilter, order: FormOrder, first: Int, offset: Int): [Form] @join__field(graph: CORE)
  aggregateForm(filter: FormFilter): FormAggregateResult @join__field(graph: CORE)
  getASNStaging(id: ID!): ASNStaging @join__field(graph: CORE)
  queryASNStaging(filter: ASNStagingFilter, order: ASNStagingOrder, first: Int, offset: Int): [ASNStaging] @join__field(graph: CORE)
  aggregateASNStaging(filter: ASNStagingFilter): ASNStagingAggregateResult @join__field(graph: CORE)
  getPartner(id: ID!): Partner @join__field(graph: CORE)
  queryPartner(filter: PartnerFilter, order: PartnerOrder, first: Int, offset: Int): [Partner] @join__field(graph: CORE)
  aggregatePartner(filter: PartnerFilter): PartnerAggregateResult @join__field(graph: CORE)
  getInventoryHandlingPolicy(id: ID, name: String): InventoryHandlingPolicy @join__field(graph: CORE)
  queryInventoryHandlingPolicy(filter: InventoryHandlingPolicyFilter, order: InventoryHandlingPolicyOrder, first: Int, offset: Int): [InventoryHandlingPolicy] @join__field(graph: CORE)
  aggregateInventoryHandlingPolicy(filter: InventoryHandlingPolicyFilter): InventoryHandlingPolicyAggregateResult @join__field(graph: CORE)
  getInventoryHandlingRule(id: ID!): InventoryHandlingRule @join__field(graph: CORE)
  queryInventoryHandlingRule(filter: InventoryHandlingRuleFilter, first: Int, offset: Int): [InventoryHandlingRule] @join__field(graph: CORE)
  aggregateInventoryHandlingRule(filter: InventoryHandlingRuleFilter): InventoryHandlingRuleAggregateResult @join__field(graph: CORE)
  getAddress(id: ID!): Address @join__field(graph: CORE)
  queryAddress(filter: AddressFilter, order: AddressOrder, first: Int, offset: Int): [Address] @join__field(graph: CORE)
  aggregateAddress(filter: AddressFilter): AddressAggregateResult @join__field(graph: CORE)
  getDelivery(id: ID!): Delivery @join__field(graph: CORE)
  queryDelivery(filter: DeliveryFilter, order: DeliveryOrder, first: Int, offset: Int): [Delivery] @join__field(graph: CORE)
  aggregateDelivery(filter: DeliveryFilter): DeliveryAggregateResult @join__field(graph: CORE)
  getOrder(id: ID!): Order @join__field(graph: CORE)
  queryOrder(filter: OrderFilter, order: OrderOrder, first: Int, offset: Int): [Order] @join__field(graph: CORE)
  aggregateOrder(filter: OrderFilter): OrderAggregateResult @join__field(graph: CORE)
  getOrderLine(id: ID!): OrderLine @join__field(graph: CORE)
  queryOrderLine(filter: OrderLineFilter, order: OrderLineOrder, first: Int, offset: Int): [OrderLine] @join__field(graph: CORE)
  aggregateOrderLine(filter: OrderLineFilter): OrderLineAggregateResult @join__field(graph: CORE)
  getShipment(id: ID!): Shipment @join__field(graph: CORE)
  queryShipment(filter: ShipmentFilter, order: ShipmentOrder, first: Int, offset: Int): [Shipment] @join__field(graph: CORE)
  aggregateShipment(filter: ShipmentFilter): ShipmentAggregateResult @join__field(graph: CORE)
  getShipmentItem(id: ID!): ShipmentItem @join__field(graph: CORE)
  queryShipmentItem(filter: ShipmentItemFilter, order: ShipmentItemOrder, first: Int, offset: Int): [ShipmentItem] @join__field(graph: CORE)
  aggregateShipmentItem(filter: ShipmentItemFilter): ShipmentItemAggregateResult @join__field(graph: CORE)
  getBox(id: ID!): Box @join__field(graph: CORE)
  queryBox(filter: BoxFilter, order: BoxOrder, first: Int, offset: Int): [Box] @join__field(graph: CORE)
  aggregateBox(filter: BoxFilter): BoxAggregateResult @join__field(graph: CORE)
  getGeneralLedgerAccount(id: ID, code: String): GeneralLedgerAccount @join__field(graph: CORE)
  queryGeneralLedgerAccount(filter: GeneralLedgerAccountFilter, order: GeneralLedgerAccountOrder, first: Int, offset: Int): [GeneralLedgerAccount] @join__field(graph: CORE)
  aggregateGeneralLedgerAccount(filter: GeneralLedgerAccountFilter): GeneralLedgerAccountAggregateResult @join__field(graph: CORE)
  getAllEventsInTimeRange(filter: AllEventsInTimeRangeFilter!): [EventsByField] @join__field(graph: PROFILES)
}

type Reason
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
  @join__type(graph: PROFILES, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  class: ReasonClass! @join__field(graph: CORE)
  category(filter: ReasonCategoryFilter): ReasonCategory @join__field(graph: CORE)
  label: String! @join__field(graph: CORE)
  text: String! @join__field(graph: CORE)
  erpCode: String! @join__field(graph: CORE)
  standardValue: Float @join__field(graph: CORE)
  valueUoM(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: CORE)
  parent(filter: ReasonFilter): Reason @join__field(graph: CORE)
  children(filter: ReasonFilter, order: ReasonOrder, first: Int, offset: Int): [Reason] @join__field(graph: CORE)
  equipmentClass(filter: EquipmentClassFilter): EquipmentClass @join__field(graph: CORE)
  equipment(filter: EquipmentFilter): Equipment @join__field(graph: CORE)
  equipmentOverrides(filter: EquipmentReasonOverrideFilter, order: EquipmentReasonOverrideOrder, first: Int, offset: Int): [EquipmentReasonOverride] @join__field(graph: CORE)
  childrenAggregate(filter: ReasonFilter): ReasonAggregateResult @join__field(graph: CORE)
  equipmentOverridesAggregate(filter: EquipmentReasonOverrideFilter): EquipmentReasonOverrideAggregateResult @join__field(graph: CORE)
}

type ReasonAggregateResult {
  count: Int
  labelMin: String
  labelMax: String
  textMin: String
  textMax: String
  erpCodeMin: String
  erpCodeMax: String
  standardValueMin: Float
  standardValueMax: Float
  standardValueSum: Float
  standardValueAvg: Float
}

type ReasonCategory
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  reason(filter: ReasonFilter, order: ReasonOrder, first: Int, offset: Int): [Reason] @join__field(graph: CORE)
  code: String! @join__field(graph: CORE)
  timeCategory: TimeCategory! @join__field(graph: CORE)
  reasonAggregate(filter: ReasonFilter): ReasonAggregateResult @join__field(graph: CORE)
}

type ReasonCategoryAggregateResult {
  count: Int
  codeMin: String
  codeMax: String
}

input ReasonCategoryFilter {
  id: [ID!]
  isActive: Boolean
  code: StringHashFilter
  has: [ReasonCategoryHasFilter]
  and: [ReasonCategoryFilter]
  or: [ReasonCategoryFilter]
  not: ReasonCategoryFilter
}

enum ReasonCategoryHasFilter {
  isActive
  reason
  code
  timeCategory
}

input ReasonCategoryOrder {
  asc: ReasonCategoryOrderable
  desc: ReasonCategoryOrderable
  then: ReasonCategoryOrder
}

enum ReasonCategoryOrderable {
  code
}

input ReasonCategoryPatch {
  isActive: Boolean
  reason: [ReasonRef]
  timeCategory: TimeCategory
}

input ReasonCategoryRef {
  id: ID
  isActive: Boolean
  reason: [ReasonRef]
  code: String
  timeCategory: TimeCategory
}

enum ReasonClass {
  Time
  Scrap
}

input ReasonClass_hash {
  eq: ReasonClass
  in: [ReasonClass]
}

input ReasonFilter {
  id: [ID!]
  isActive: Boolean
  class: ReasonClass_hash
  label: StringHashFilter
  text: StringHashFilter
  erpCode: StringHashFilter
  has: [ReasonHasFilter]
  and: [ReasonFilter]
  or: [ReasonFilter]
  not: ReasonFilter
}

enum ReasonHasFilter {
  isActive
  class
  category
  label
  text
  erpCode
  standardValue
  valueUoM
  parent
  children
  equipmentClass
  equipment
  equipmentOverrides
}

input ReasonOrder {
  asc: ReasonOrderable
  desc: ReasonOrderable
  then: ReasonOrder
}

enum ReasonOrderable {
  label
  text
  erpCode
  standardValue
}

input ReasonPatch {
  isActive: Boolean
  class: ReasonClass
  category: ReasonCategoryRef
  label: String
  text: String
  erpCode: String
  standardValue: Float
  valueUoM: UnitOfMeasureRef
  parent: ReasonRef
  children: [ReasonRef]
  equipmentClass: EquipmentClassRef
  equipment: EquipmentRef
  equipmentOverrides: [EquipmentReasonOverrideRef]
}

input ReasonRef {
  id: ID
  isActive: Boolean
  class: ReasonClass
  category: ReasonCategoryRef
  label: String
  text: String
  erpCode: String
  standardValue: Float
  valueUoM: UnitOfMeasureRef
  parent: ReasonRef
  children: [ReasonRef]
  equipmentClass: EquipmentClassRef
  equipment: EquipmentRef
  equipmentOverrides: [EquipmentReasonOverrideRef]
}

type RequestState
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
}

type RequestStateAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
}

input RequestStateFilter {
  id: [ID!]
  isActive: Boolean
  name: StringHashFilter
  has: [RequestStateHasFilter]
  and: [RequestStateFilter]
  or: [RequestStateFilter]
  not: RequestStateFilter
}

enum RequestStateHasFilter {
  isActive
  name
  description
}

input RequestStateOrder {
  asc: RequestStateOrderable
  desc: RequestStateOrderable
  then: RequestStateOrder
}

enum RequestStateOrderable {
  name
  description
}

input RequestStatePatch {
  isActive: Boolean
  description: String
}

input RequestStateRef {
  id: ID
  isActive: Boolean
  name: String
  description: String
}

type Role {
  name: String!
  hasMembers(filter: UserRoleFilter, first: Int, offset: Int): [UserRole]
  hasGrantedRights(filter: AccessRightFilter, first: Int, offset: Int): [AccessRight]
  isActive: Boolean
  workflowNodes(filter: WorkflowNodeFilter, order: WorkflowNodeOrder, first: Int, offset: Int): [WorkflowNode]
  hasMembersAggregate(filter: UserRoleFilter): UserRoleAggregateResult
  hasGrantedRightsAggregate(filter: AccessRightFilter): AccessRightAggregateResult
  workflowNodesAggregate(filter: WorkflowNodeFilter): WorkflowNodeAggregateResult
}

type RoleAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
}

input RoleFilter {
  name: StringHashFilter
  has: [RoleHasFilter]
  and: [RoleFilter]
  or: [RoleFilter]
  not: RoleFilter
}

enum RoleHasFilter {
  name
  hasMembers
  hasGrantedRights
  isActive
  workflowNodes
}

input RoleOrder {
  asc: RoleOrderable
  desc: RoleOrderable
  then: RoleOrder
}

enum RoleOrderable {
  name
}

input RolePatch {
  hasMembers: [UserRoleRef]
  hasGrantedRights: [AccessRightRef]
  isActive: Boolean
  workflowNodes: [WorkflowNodeRef]
}

input RoleRef {
  name: String
  hasMembers: [UserRoleRef]
  hasGrantedRights: [AccessRightRef]
  isActive: Boolean
  workflowNodes: [WorkflowNodeRef]
}

enum RulesetTriggerOption {
  ORDER_START
  ORDER_END
}

"""represents a rate at a timestamp"""
type RunRate {
  time: DateTime
  rate: Float
}

"""the filter required to return the requiredRunRate type"""
input RunRateFilter {
  """
  the run rate required over the total course of the job response to meet the quantity target
  """
  TargetRunRate: Float

  """the scheduled finish of the job response"""
  ScheduledFinish: DateTime
}

"""a summary of the run rate log"""
type RunRateSummary {
  """the run rate at the time of query"""
  currentRunRate: Float

  """the average run rate over the course of the job response queried from"""
  avgRunRate: Float

  """
  the run rate required to reach the job orders target before the scheduled end time.
  requires both targetRunRate and scheduledFinish to be passed through the filter
  """
  requiredRunRate: Float

  """
  the raw run rate log over the course of the job response interpolated to every minute
  """
  interpolatedRunRate: [RunRate]
}

type SegmentDependency
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
  from(filter: OperationsSegmentFilter): OperationsSegment! @join__field(graph: CORE)
  to(filter: OperationsSegmentFilter): OperationsSegment! @join__field(graph: CORE)
  dependencyType: DependencyType @join__field(graph: CORE)
  dependencyFactor: Float @join__field(graph: CORE)
  factorUoM(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: CORE)
  condition: String @join__field(graph: CORE)
  transitionEventRuleset(filter: TransitionEventRulesetFilter): TransitionEventRuleset @join__field(graph: CORE)
}

type SegmentDependencyAggregateResult {
  count: Int
  descriptionMin: String
  descriptionMax: String
  dependencyFactorMin: Float
  dependencyFactorMax: Float
  dependencyFactorSum: Float
  dependencyFactorAvg: Float
  conditionMin: String
  conditionMax: String
}

input SegmentDependencyFilter {
  id: [ID!]
  isActive: Boolean
  has: [SegmentDependencyHasFilter]
  and: [SegmentDependencyFilter]
  or: [SegmentDependencyFilter]
  not: SegmentDependencyFilter
}

enum SegmentDependencyHasFilter {
  isActive
  description
  from
  to
  dependencyType
  dependencyFactor
  factorUoM
  condition
  transitionEventRuleset
}

input SegmentDependencyOrder {
  asc: SegmentDependencyOrderable
  desc: SegmentDependencyOrderable
  then: SegmentDependencyOrder
}

enum SegmentDependencyOrderable {
  description
  dependencyFactor
  condition
}

input SegmentDependencyPatch {
  isActive: Boolean
  description: String
  from: OperationsSegmentRef
  to: OperationsSegmentRef
  dependencyType: DependencyType
  dependencyFactor: Float
  factorUoM: UnitOfMeasureRef
  condition: String
  transitionEventRuleset: TransitionEventRulesetRef
}

input SegmentDependencyRef {
  id: ID
  isActive: Boolean
  description: String
  from: OperationsSegmentRef
  to: OperationsSegmentRef
  dependencyType: DependencyType
  dependencyFactor: Float
  factorUoM: UnitOfMeasureRef
  condition: String
  transitionEventRuleset: TransitionEventRulesetRef
}

type SegmentInvoiceSetting
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  partner(filter: PartnerFilter): Partner @join__field(graph: CORE)
  costPerHour: Float @join__field(graph: CORE)
  costPerUnit: Float @join__field(graph: CORE)
}

type SegmentInvoiceSettingAggregateResult {
  count: Int
  costPerHourMin: Float
  costPerHourMax: Float
  costPerHourSum: Float
  costPerHourAvg: Float
  costPerUnitMin: Float
  costPerUnitMax: Float
  costPerUnitSum: Float
  costPerUnitAvg: Float
}

input SegmentInvoiceSettingFilter {
  id: [ID!]
  has: [SegmentInvoiceSettingHasFilter]
  and: [SegmentInvoiceSettingFilter]
  or: [SegmentInvoiceSettingFilter]
  not: SegmentInvoiceSettingFilter
}

enum SegmentInvoiceSettingHasFilter {
  partner
  costPerHour
  costPerUnit
}

input SegmentInvoiceSettingOrder {
  asc: SegmentInvoiceSettingOrderable
  desc: SegmentInvoiceSettingOrderable
  then: SegmentInvoiceSettingOrder
}

enum SegmentInvoiceSettingOrderable {
  costPerHour
  costPerUnit
}

input SegmentInvoiceSettingPatch {
  partner: PartnerRef
  costPerHour: Float
  costPerUnit: Float
}

input SegmentInvoiceSettingRef {
  id: ID
  partner: PartnerRef
  costPerHour: Float
  costPerUnit: Float
}

enum SegmentType {
  USER_TASK
  SYSTEM_TASK
  EMBED_SUBPROCESS
}

"""
A shipment represents a consignment of goods being sent or received into a warehouse
"""
type Shipment
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  type: ShipmentType! @join__field(graph: CORE)
  transportCompany: TransportCompany @join__field(graph: CORE)
  transportCompanyShipmentId: String @join__field(graph: CORE)
  transportCompanyProductCode: String @join__field(graph: CORE)
  reference: String @join__field(graph: CORE)
  items(filter: ShipmentItemFilter, order: ShipmentItemOrder, first: Int, offset: Int): [ShipmentItem] @join__field(graph: CORE)
  customerReference: String @join__field(graph: CORE)
  emailTrackingEnabled: Boolean @join__field(graph: CORE)
  from(filter: AddressFilter): Address @join__field(graph: CORE)
  to(filter: AddressFilter): Address @join__field(graph: CORE)
  order(filter: OrderFilter): Order! @join__field(graph: CORE)
  warehouse(filter: EquipmentFilter): Equipment! @join__field(graph: CORE)
  consignmentNumber: String @join__field(graph: CORE)
  properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property] @join__field(graph: CORE)
  dateTimeReceivedUTC: DateTime @join__field(graph: CORE)
  dateTimeDeliveredUTC: DateTime @join__field(graph: CORE)
  dateTimePackedUTC: DateTime @join__field(graph: CORE)
  dateTimeCreatedUTC: DateTime @join__field(graph: CORE)
  delivered(filter: DeliveryFilter): Delivery @join__field(graph: CORE)
  itemsAggregate(filter: ShipmentItemFilter): ShipmentItemAggregateResult @join__field(graph: CORE)
  propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult @join__field(graph: CORE)
}

type ShipmentAggregateResult {
  count: Int
  transportCompanyShipmentIdMin: String
  transportCompanyShipmentIdMax: String
  transportCompanyProductCodeMin: String
  transportCompanyProductCodeMax: String
  referenceMin: String
  referenceMax: String
  customerReferenceMin: String
  customerReferenceMax: String
  consignmentNumberMin: String
  consignmentNumberMax: String
  dateTimeReceivedUTCMin: DateTime
  dateTimeReceivedUTCMax: DateTime
  dateTimeDeliveredUTCMin: DateTime
  dateTimeDeliveredUTCMax: DateTime
  dateTimePackedUTCMin: DateTime
  dateTimePackedUTCMax: DateTime
  dateTimeCreatedUTCMin: DateTime
  dateTimeCreatedUTCMax: DateTime
}

input ShipmentFilter {
  id: [ID!]
  isActive: Boolean
  type: ShipmentType_hash
  reference: StringHashFilter_StringRegExpFilter
  consignmentNumber: StringFullTextFilter_StringHashFilter
  dateTimeReceivedUTC: DateTimeFilter
  dateTimeDeliveredUTC: DateTimeFilter
  dateTimePackedUTC: DateTimeFilter
  dateTimeCreatedUTC: DateTimeFilter
  has: [ShipmentHasFilter]
  and: [ShipmentFilter]
  or: [ShipmentFilter]
  not: ShipmentFilter
}

enum ShipmentHasFilter {
  isActive
  type
  transportCompany
  transportCompanyShipmentId
  transportCompanyProductCode
  reference
  items
  customerReference
  emailTrackingEnabled
  from
  to
  order
  warehouse
  consignmentNumber
  properties
  dateTimeReceivedUTC
  dateTimeDeliveredUTC
  dateTimePackedUTC
  dateTimeCreatedUTC
  delivered
}

"""
A shipment item represents an individual package or line item within the shipment
"""
type ShipmentItem
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
  @join__type(graph: PROFILES, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  transportCompanyItemReference: String @join__field(graph: CORE)
  transportCompanyItemId: String @join__field(graph: CORE)
  trackingDetailsArticleId: String @join__field(graph: CORE)
  trackingDetailsBarcodeId: String @join__field(graph: CORE)
  trackingDetailsConsignmentId: String @join__field(graph: CORE)
  shipment(filter: ShipmentFilter): Shipment @join__field(graph: CORE)
  status: ShipmentItemStatus! @join__field(graph: CORE)
  material(filter: MaterialDefinitionFilter): MaterialDefinition @join__field(graph: CORE)
  transactions(filter: InventoryTransactionFilter, order: InventoryTransactionOrder, first: Int, offset: Int): [InventoryTransaction] @join__field(graph: CORE)
  plannedQuantity: Int @join__field(graph: CORE)
  isParcel: Boolean @join__field(graph: CORE)
  bin(filter: EquipmentFilter): Equipment @join__field(graph: CORE)
  box(filter: BoxFilter): Box @join__field(graph: CORE)
  weightKg: Float @join__field(graph: CORE)
  transactionsAggregate(filter: InventoryTransactionFilter): InventoryTransactionAggregateResult @join__field(graph: CORE)
  packedQty: Int @join__field(graph: PROFILES)
}

type ShipmentItemAggregateResult {
  count: Int
  transportCompanyItemReferenceMin: String
  transportCompanyItemReferenceMax: String
  transportCompanyItemIdMin: String
  transportCompanyItemIdMax: String
  trackingDetailsArticleIdMin: String
  trackingDetailsArticleIdMax: String
  trackingDetailsBarcodeIdMin: String
  trackingDetailsBarcodeIdMax: String
  trackingDetailsConsignmentIdMin: String
  trackingDetailsConsignmentIdMax: String
  plannedQuantityMin: Int
  plannedQuantityMax: Int
  plannedQuantitySum: Int
  plannedQuantityAvg: Float
  weightKgMin: Float
  weightKgMax: Float
  weightKgSum: Float
  weightKgAvg: Float
}

input ShipmentItemFilter {
  id: [ID!]
  isActive: Boolean
  isParcel: Boolean
  has: [ShipmentItemHasFilter]
  and: [ShipmentItemFilter]
  or: [ShipmentItemFilter]
  not: ShipmentItemFilter
}

enum ShipmentItemHasFilter {
  isActive
  transportCompanyItemReference
  transportCompanyItemId
  trackingDetailsArticleId
  trackingDetailsBarcodeId
  trackingDetailsConsignmentId
  shipment
  status
  material
  transactions
  plannedQuantity
  isParcel
  bin
  box
  weightKg
}

input ShipmentItemOrder {
  asc: ShipmentItemOrderable
  desc: ShipmentItemOrderable
  then: ShipmentItemOrder
}

enum ShipmentItemOrderable {
  transportCompanyItemReference
  transportCompanyItemId
  trackingDetailsArticleId
  trackingDetailsBarcodeId
  trackingDetailsConsignmentId
  plannedQuantity
  weightKg
}

input ShipmentItemPatch {
  isActive: Boolean
  transportCompanyItemReference: String
  transportCompanyItemId: String
  trackingDetailsArticleId: String
  trackingDetailsBarcodeId: String
  trackingDetailsConsignmentId: String
  shipment: ShipmentRef
  status: ShipmentItemStatus
  material: MaterialDefinitionRef
  transactions: [InventoryTransactionRef]
  plannedQuantity: Int
  isParcel: Boolean
  bin: EquipmentRef
  box: BoxRef
  weightKg: Float
}

input ShipmentItemRef {
  id: ID
  isActive: Boolean
  transportCompanyItemReference: String
  transportCompanyItemId: String
  trackingDetailsArticleId: String
  trackingDetailsBarcodeId: String
  trackingDetailsConsignmentId: String
  shipment: ShipmentRef
  status: ShipmentItemStatus
  material: MaterialDefinitionRef
  transactions: [InventoryTransactionRef]
  plannedQuantity: Int
  isParcel: Boolean
  bin: EquipmentRef
  box: BoxRef
  weightKg: Float
}

enum ShipmentItemStatus {
  CREATED
  PACKED
  SHIPPED
  DELIVERED
  DELETED
}

input ShipmentOrder {
  asc: ShipmentOrderable
  desc: ShipmentOrderable
  then: ShipmentOrder
}

enum ShipmentOrderable {
  transportCompanyShipmentId
  transportCompanyProductCode
  reference
  customerReference
  consignmentNumber
  dateTimeReceivedUTC
  dateTimeDeliveredUTC
  dateTimePackedUTC
  dateTimeCreatedUTC
}

input ShipmentPatch {
  isActive: Boolean
  type: ShipmentType
  transportCompany: TransportCompany
  transportCompanyShipmentId: String
  transportCompanyProductCode: String
  reference: String
  items: [ShipmentItemRef]
  customerReference: String
  emailTrackingEnabled: Boolean
  from: AddressRef
  to: AddressRef
  order: OrderRef
  warehouse: EquipmentRef
  consignmentNumber: String
  properties: [PropertyRef]
  dateTimeReceivedUTC: DateTime
  dateTimeDeliveredUTC: DateTime
  dateTimePackedUTC: DateTime
  dateTimeCreatedUTC: DateTime
  delivered: DeliveryRef
}

input ShipmentRef {
  id: ID
  isActive: Boolean
  type: ShipmentType
  transportCompany: TransportCompany
  transportCompanyShipmentId: String
  transportCompanyProductCode: String
  reference: String
  items: [ShipmentItemRef]
  customerReference: String
  emailTrackingEnabled: Boolean
  from: AddressRef
  to: AddressRef
  order: OrderRef
  warehouse: EquipmentRef
  consignmentNumber: String
  properties: [PropertyRef]
  dateTimeReceivedUTC: DateTime
  dateTimeDeliveredUTC: DateTime
  dateTimePackedUTC: DateTime
  dateTimeCreatedUTC: DateTime
  delivered: DeliveryRef
}

enum ShipmentType {
  INBOUND
  OUTBOUND
  RETURN
}

input ShipmentType_hash {
  eq: ShipmentType
  in: [ShipmentType]
}

type StateEventRuleset {
  id: ID!
  name: String!
  triggerWhen: [RulesetTriggerOption]
  segment(filter: OperationsSegmentFilter): OperationsSegment
  targetState: String!
  eventDefs(filter: EventDefinitionFilter, order: EventDefinitionOrder, first: Int, offset: Int): [EventDefinition]
  eventDefsAggregate(filter: EventDefinitionFilter): EventDefinitionAggregateResult
}

type StateEventRulesetAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  targetStateMin: String
  targetStateMax: String
}

input StateEventRulesetFilter {
  id: [ID!]
  has: [StateEventRulesetHasFilter]
  and: [StateEventRulesetFilter]
  or: [StateEventRulesetFilter]
  not: StateEventRulesetFilter
}

enum StateEventRulesetHasFilter {
  name
  triggerWhen
  segment
  targetState
  eventDefs
}

input StateEventRulesetOrder {
  asc: StateEventRulesetOrderable
  desc: StateEventRulesetOrderable
  then: StateEventRulesetOrder
}

enum StateEventRulesetOrderable {
  name
  targetState
}

input StateEventRulesetPatch {
  name: String
  triggerWhen: [RulesetTriggerOption]
  segment: OperationsSegmentRef
  targetState: String
  eventDefs: [EventDefinitionRef]
}

input StateEventRulesetRef {
  id: ID
  name: String
  triggerWhen: [RulesetTriggerOption]
  segment: OperationsSegmentRef
  targetState: String
  eventDefs: [EventDefinitionRef]
}

enum StockType {
  NEW_STOCK
  REPAIRED
  RETURNED
}

input StockType_hash {
  eq: StockType
  in: [StockType]
}

input StringExactFilter {
  eq: String
  in: [String]
  le: String
  lt: String
  ge: String
  gt: String
  between: StringRange
}

input StringFullTextFilter {
  alloftext: String
  anyoftext: String
}

input StringFullTextFilter_StringHashFilter {
  alloftext: String
  anyoftext: String
  eq: String
  in: [String]
}

input StringHashFilter {
  eq: String
  in: [String]
}

input StringHashFilter_StringRegExpFilter {
  eq: String
  in: [String]
  regexp: String
}

input StringRange {
  min: String!
  max: String!
}

input StringRegExpFilter {
  regexp: String
}

input StringTermFilter {
  allofterms: String
  anyofterms: String
}

type TestResult
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
  result: String @join__field(graph: CORE)
  uom(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: CORE)
  testDateTime: DateTime @join__field(graph: CORE)
}

type TestResultAggregateResult {
  count: Int
  descriptionMin: String
  descriptionMax: String
  resultMin: String
  resultMax: String
  testDateTimeMin: DateTime
  testDateTimeMax: DateTime
}

input TestResultFilter {
  id: [ID!]
  isActive: Boolean
  has: [TestResultHasFilter]
  and: [TestResultFilter]
  or: [TestResultFilter]
  not: TestResultFilter
}

enum TestResultHasFilter {
  isActive
  description
  result
  uom
  testDateTime
}

input TestResultOrder {
  asc: TestResultOrderable
  desc: TestResultOrderable
  then: TestResultOrder
}

enum TestResultOrderable {
  description
  result
  testDateTime
}

input TestResultPatch {
  isActive: Boolean
  description: String
  result: String
  uom: UnitOfMeasureRef
  testDateTime: DateTime
}

input TestResultRef {
  id: ID
  isActive: Boolean
  description: String
  result: String
  uom: UnitOfMeasureRef
  testDateTime: DateTime
}

type TestSpecification
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
  version: String @join__field(graph: CORE)
}

type TestSpecificationAggregateResult {
  count: Int
  descriptionMin: String
  descriptionMax: String
  versionMin: String
  versionMax: String
}

input TestSpecificationFilter {
  id: [ID!]
  isActive: Boolean
  has: [TestSpecificationHasFilter]
  and: [TestSpecificationFilter]
  or: [TestSpecificationFilter]
  not: TestSpecificationFilter
}

enum TestSpecificationHasFilter {
  isActive
  description
  version
}

input TestSpecificationOrder {
  asc: TestSpecificationOrderable
  desc: TestSpecificationOrderable
  then: TestSpecificationOrder
}

enum TestSpecificationOrderable {
  description
  version
}

input TestSpecificationPatch {
  isActive: Boolean
  description: String
  version: String
}

input TestSpecificationRef {
  id: ID
  isActive: Boolean
  description: String
  version: String
}

"""
Time Category abbreviations are defined in ISO 22400 and are used
to calculate the ISO standard KPI
"""
enum TimeCategory {
  """
  APT is the actual production time is the time during a work unit is producing. It includes only the value-adding functions.
  """
  APT

  """
  AUST is the actual setup time is the time actually consumed for the preparation of an order at a work unit.
  """
  AUST

  """
  ADET is the actual unit delay times are actual times associated with malfunction-caused interrupts, minor stoppages,
  and other unplanned time intervals that occur while tasks are being completed that lead to unwanted extension
  of the order processing time
  """
  ADET

  """
  ADOT is the actual unit down time is the time when the work unit is not running with orders, although it is available.
  """
  ADOT

  """
  PSDT is the time in which the work unit is planned to be out of operation
  """
  PSDT

  """
  PDOT is time, included in the planned operation time, in which the work unit is planned for no operations within the operation time period
  """
  PDOT

  """
  TTR is the time interval during which an item is in a down state due to a failure (IEC 60050-191)
  """
  TTR
}

input TimeRangeFilter {
  from: DateTime
  to: DateTime
}

type TransitionEventRuleset {
  id: ID!
  name: String!
  segmentDependency(filter: SegmentDependencyFilter): SegmentDependency
  eventDefs(filter: EventDefinitionFilter, order: EventDefinitionOrder, first: Int, offset: Int): [EventDefinition]
  eventDefsAggregate(filter: EventDefinitionFilter): EventDefinitionAggregateResult
}

type TransitionEventRulesetAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
}

input TransitionEventRulesetFilter {
  id: [ID!]
  has: [TransitionEventRulesetHasFilter]
  and: [TransitionEventRulesetFilter]
  or: [TransitionEventRulesetFilter]
  not: TransitionEventRulesetFilter
}

enum TransitionEventRulesetHasFilter {
  name
  segmentDependency
  eventDefs
}

input TransitionEventRulesetOrder {
  asc: TransitionEventRulesetOrderable
  desc: TransitionEventRulesetOrderable
  then: TransitionEventRulesetOrder
}

enum TransitionEventRulesetOrderable {
  name
}

input TransitionEventRulesetPatch {
  name: String
  segmentDependency: SegmentDependencyRef
  eventDefs: [EventDefinitionRef]
}

input TransitionEventRulesetRef {
  id: ID
  name: String
  segmentDependency: SegmentDependencyRef
  eventDefs: [EventDefinitionRef]
}

"""
Companies that we have API integration with should be listed here.
Manual is used to indicate that no API is available.
"""
enum TransportCompany {
  AUSPOST
  MANUAL
}

type UnitOfMeasure
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  code: String! @join__field(graph: CORE)
  dataType: DataType @join__field(graph: CORE)
}

type UnitOfMeasureAggregateResult {
  count: Int
  codeMin: String
  codeMax: String
}

type UnitOfMeasureConversion
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  fromUoM(filter: UnitOfMeasureFilter): UnitOfMeasure! @join__field(graph: CORE)
  toUoM(filter: UnitOfMeasureFilter): UnitOfMeasure! @join__field(graph: CORE)
  numerator: Float! @join__field(graph: CORE)
  denominator: Float! @join__field(graph: CORE)
  material(filter: MaterialDefinitionFilter): MaterialDefinition! @join__field(graph: CORE)
}

type UnitOfMeasureConversionAggregateResult {
  count: Int
  numeratorMin: Float
  numeratorMax: Float
  numeratorSum: Float
  numeratorAvg: Float
  denominatorMin: Float
  denominatorMax: Float
  denominatorSum: Float
  denominatorAvg: Float
}

input UnitOfMeasureConversionFilter {
  id: [ID!]
  isActive: Boolean
  has: [UnitOfMeasureConversionHasFilter]
  and: [UnitOfMeasureConversionFilter]
  or: [UnitOfMeasureConversionFilter]
  not: UnitOfMeasureConversionFilter
}

enum UnitOfMeasureConversionHasFilter {
  isActive
  fromUoM
  toUoM
  numerator
  denominator
  material
}

input UnitOfMeasureConversionOrder {
  asc: UnitOfMeasureConversionOrderable
  desc: UnitOfMeasureConversionOrderable
  then: UnitOfMeasureConversionOrder
}

enum UnitOfMeasureConversionOrderable {
  numerator
  denominator
}

input UnitOfMeasureConversionPatch {
  isActive: Boolean
  fromUoM: UnitOfMeasureRef
  toUoM: UnitOfMeasureRef
  numerator: Float
  denominator: Float
  material: MaterialDefinitionRef
}

input UnitOfMeasureConversionRef {
  id: ID
  isActive: Boolean
  fromUoM: UnitOfMeasureRef
  toUoM: UnitOfMeasureRef
  numerator: Float
  denominator: Float
  material: MaterialDefinitionRef
}

input UnitOfMeasureFilter {
  id: [ID!]
  isActive: Boolean
  code: StringHashFilter
  has: [UnitOfMeasureHasFilter]
  and: [UnitOfMeasureFilter]
  or: [UnitOfMeasureFilter]
  not: UnitOfMeasureFilter
}

enum UnitOfMeasureHasFilter {
  isActive
  code
  dataType
}

input UnitOfMeasureOrder {
  asc: UnitOfMeasureOrderable
  desc: UnitOfMeasureOrderable
  then: UnitOfMeasureOrder
}

enum UnitOfMeasureOrderable {
  code
}

input UnitOfMeasurePatch {
  isActive: Boolean
  dataType: DataType
}

input UnitOfMeasureRef {
  id: ID
  isActive: Boolean
  code: String
  dataType: DataType
}

input UpdateAccessRightInput {
  filter: AccessRightFilter!
  set: AccessRightPatch
  remove: AccessRightPatch
}

type UpdateAccessRightPayload {
  accessRight(filter: AccessRightFilter, first: Int, offset: Int): [AccessRight]
  numUids: Int
}

input UpdateACLInput {
  filter: ACLFilter!
  set: ACLPatch
  remove: ACLPatch
}

type UpdateACLPayload {
  aCL(filter: ACLFilter, first: Int, offset: Int): [ACL]
  numUids: Int
}

input UpdateAddressInput {
  filter: AddressFilter!
  set: AddressPatch
  remove: AddressPatch
}

type UpdateAddressPayload {
  address(filter: AddressFilter, order: AddressOrder, first: Int, offset: Int): [Address]
  numUids: Int
}

input UpdateASNStagingInput {
  filter: ASNStagingFilter!
  set: ASNStagingPatch
  remove: ASNStagingPatch
}

type UpdateASNStagingPayload {
  aSNStaging(filter: ASNStagingFilter, order: ASNStagingOrder, first: Int, offset: Int): [ASNStaging]
  numUids: Int
}

input UpdateBillOfMaterialInput {
  filter: BillOfMaterialFilter!
  set: BillOfMaterialPatch
  remove: BillOfMaterialPatch
}

type UpdateBillOfMaterialPayload {
  billOfMaterial(filter: BillOfMaterialFilter, order: BillOfMaterialOrder, first: Int, offset: Int): [BillOfMaterial]
  numUids: Int
}

input UpdateBoxInput {
  filter: BoxFilter!
  set: BoxPatch
  remove: BoxPatch
}

type UpdateBoxPayload {
  box(filter: BoxFilter, order: BoxOrder, first: Int, offset: Int): [Box]
  numUids: Int
}

input UpdateCarrierInput {
  filter: CarrierFilter!
  set: CarrierPatch
  remove: CarrierPatch
}

type UpdateCarrierPayload {
  carrier(filter: CarrierFilter, order: CarrierOrder, first: Int, offset: Int): [Carrier]
  numUids: Int
}

input UpdateDashboardConfigInput {
  filter: DashboardConfigFilter!
  set: DashboardConfigPatch
  remove: DashboardConfigPatch
}

type UpdateDashboardConfigPayload {
  dashboardConfig(filter: DashboardConfigFilter, order: DashboardConfigOrder, first: Int, offset: Int): [DashboardConfig]
  numUids: Int
}

input UpdateDashboardPanelConfigInput {
  filter: DashboardPanelConfigFilter!
  set: DashboardPanelConfigPatch
  remove: DashboardPanelConfigPatch
}

type UpdateDashboardPanelConfigPayload {
  dashboardPanelConfig(filter: DashboardPanelConfigFilter, order: DashboardPanelConfigOrder, first: Int, offset: Int): [DashboardPanelConfig]
  numUids: Int
}

input UpdateDeliveryInput {
  filter: DeliveryFilter!
  set: DeliveryPatch
  remove: DeliveryPatch
}

type UpdateDeliveryPayload {
  delivery(filter: DeliveryFilter, order: DeliveryOrder, first: Int, offset: Int): [Delivery]
  numUids: Int
}

type UpdatedOrderStatus {
  equipment: Equipment
  eventStartTime: DateTime
  updateType: String
}

input UpdateEquipmentClassInput {
  filter: EquipmentClassFilter!
  set: EquipmentClassPatch
  remove: EquipmentClassPatch
}

type UpdateEquipmentClassPayload {
  equipmentClass(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass]
  numUids: Int
}

input UpdateEquipmentInput {
  filter: EquipmentFilter!
  set: EquipmentPatch
  remove: EquipmentPatch
}

input UpdateEquipmentNameAliasInput {
  filter: EquipmentNameAliasFilter!
  set: EquipmentNameAliasPatch
  remove: EquipmentNameAliasPatch
}

type UpdateEquipmentNameAliasPayload {
  equipmentNameAlias(filter: EquipmentNameAliasFilter, order: EquipmentNameAliasOrder, first: Int, offset: Int): [EquipmentNameAlias]
  numUids: Int
}

type UpdateEquipmentPayload {
  equipment(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment]
  numUids: Int
}

input UpdateEquipmentPropertyOverrideInput {
  filter: EquipmentPropertyOverrideFilter!
  set: EquipmentPropertyOverridePatch
  remove: EquipmentPropertyOverridePatch
}

type UpdateEquipmentPropertyOverridePayload {
  equipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride]
  numUids: Int
}

input UpdateEquipmentReasonOverrideInput {
  filter: EquipmentReasonOverrideFilter!
  set: EquipmentReasonOverridePatch
  remove: EquipmentReasonOverridePatch
}

type UpdateEquipmentReasonOverridePayload {
  equipmentReasonOverride(filter: EquipmentReasonOverrideFilter, order: EquipmentReasonOverrideOrder, first: Int, offset: Int): [EquipmentReasonOverride]
  numUids: Int
}

input UpdateEquipmentSpecificationInput {
  filter: EquipmentSpecificationFilter!
  set: EquipmentSpecificationPatch
  remove: EquipmentSpecificationPatch
}

type UpdateEquipmentSpecificationPayload {
  equipmentSpecification(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification]
  numUids: Int
}

input UpdateEventDefinitionInput {
  filter: EventDefinitionFilter!
  set: EventDefinitionPatch
  remove: EventDefinitionPatch
}

type UpdateEventDefinitionPayload {
  eventDefinition(filter: EventDefinitionFilter, order: EventDefinitionOrder, first: Int, offset: Int): [EventDefinition]
  numUids: Int
}

input UpdateEventLogInput {
  filter: EventLogFilter!
  set: EventLogPatch
  remove: EventLogPatch
}

type UpdateEventLogPayload {
  eventLog(filter: EventLogFilter, order: EventLogOrder, first: Int, offset: Int): [EventLog]
  numUids: Int
}

input UpdateFormInput {
  filter: FormFilter!
  set: FormPatch
  remove: FormPatch
}

type UpdateFormPayload {
  form(filter: FormFilter, order: FormOrder, first: Int, offset: Int): [Form]
  numUids: Int
}

input UpdateGeneralLedgerAccountInput {
  filter: GeneralLedgerAccountFilter!
  set: GeneralLedgerAccountPatch
  remove: GeneralLedgerAccountPatch
}

type UpdateGeneralLedgerAccountPayload {
  generalLedgerAccount(filter: GeneralLedgerAccountFilter, order: GeneralLedgerAccountOrder, first: Int, offset: Int): [GeneralLedgerAccount]
  numUids: Int
}

input UpdateInventoryHandlingPolicyInput {
  filter: InventoryHandlingPolicyFilter!
  set: InventoryHandlingPolicyPatch
  remove: InventoryHandlingPolicyPatch
}

type UpdateInventoryHandlingPolicyPayload {
  inventoryHandlingPolicy(filter: InventoryHandlingPolicyFilter, order: InventoryHandlingPolicyOrder, first: Int, offset: Int): [InventoryHandlingPolicy]
  numUids: Int
}

input UpdateInventoryHandlingRuleInput {
  filter: InventoryHandlingRuleFilter!
  set: InventoryHandlingRulePatch
  remove: InventoryHandlingRulePatch
}

type UpdateInventoryHandlingRulePayload {
  inventoryHandlingRule(filter: InventoryHandlingRuleFilter, first: Int, offset: Int): [InventoryHandlingRule]
  numUids: Int
}

input UpdateInventoryTransactionInput {
  filter: InventoryTransactionFilter!
  set: InventoryTransactionPatch
  remove: InventoryTransactionPatch
}

type UpdateInventoryTransactionPayload {
  inventoryTransaction(filter: InventoryTransactionFilter, order: InventoryTransactionOrder, first: Int, offset: Int): [InventoryTransaction]
  numUids: Int
}

input UpdateJobOrderInput {
  filter: JobOrderFilter!
  set: JobOrderPatch
  remove: JobOrderPatch
}

input UpdateJobOrderNoteInput {
  filter: JobOrderNoteFilter!
  set: JobOrderNotePatch
  remove: JobOrderNotePatch
}

type UpdateJobOrderNotePayload {
  jobOrderNote(filter: JobOrderNoteFilter, order: JobOrderNoteOrder, first: Int, offset: Int): [JobOrderNote]
  numUids: Int
}

type UpdateJobOrderPayload {
  jobOrder(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder]
  numUids: Int
}

input UpdateJobResponseInput {
  filter: JobResponseFilter!
  set: JobResponsePatch
  remove: JobResponsePatch
}

type UpdateJobResponsePayload {
  jobResponse(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse]
  numUids: Int
}

input UpdateLibreServiceInput {
  filter: LibreServiceFilter!
  set: LibreServicePatch
  remove: LibreServicePatch
}

type UpdateLibreServicePayload {
  libreService(filter: LibreServiceFilter, order: LibreServiceOrder, first: Int, offset: Int): [LibreService]
  numUids: Int
}

input UpdateMaterialAlternateInput {
  filter: MaterialAlternateFilter!
  set: MaterialAlternatePatch
  remove: MaterialAlternatePatch
}

type UpdateMaterialAlternatePayload {
  materialAlternate(filter: MaterialAlternateFilter, order: MaterialAlternateOrder, first: Int, offset: Int): [MaterialAlternate]
  numUids: Int
}

input UpdateMaterialClassInput {
  filter: MaterialClassFilter!
  set: MaterialClassPatch
  remove: MaterialClassPatch
}

type UpdateMaterialClassPayload {
  materialClass(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass]
  numUids: Int
}

input UpdateMaterialDefinitionInput {
  filter: MaterialDefinitionFilter!
  set: MaterialDefinitionPatch
  remove: MaterialDefinitionPatch
}

type UpdateMaterialDefinitionPayload {
  materialDefinition(filter: MaterialDefinitionFilter, order: MaterialDefinitionOrder, first: Int, offset: Int): [MaterialDefinition]
  numUids: Int
}

input UpdateMaterialEquipmentInput {
  filter: MaterialEquipmentFilter!
  set: MaterialEquipmentPatch
  remove: MaterialEquipmentPatch
}

type UpdateMaterialEquipmentPayload {
  materialEquipment(filter: MaterialEquipmentFilter, order: MaterialEquipmentOrder, first: Int, offset: Int): [MaterialEquipment]
  numUids: Int
}

input UpdateMaterialEventRulesetInput {
  filter: MaterialEventRulesetFilter!
  set: MaterialEventRulesetPatch
  remove: MaterialEventRulesetPatch
}

type UpdateMaterialEventRulesetPayload {
  materialEventRuleset(filter: MaterialEventRulesetFilter, order: MaterialEventRulesetOrder, first: Int, offset: Int): [MaterialEventRuleset]
  numUids: Int
}

input UpdateMaterialLotInput {
  filter: MaterialLotFilter!
  set: MaterialLotPatch
  remove: MaterialLotPatch
}

type UpdateMaterialLotPayload {
  materialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot]
  numUids: Int
}

input UpdateMaterialSpecificationInput {
  filter: MaterialSpecificationFilter!
  set: MaterialSpecificationPatch
  remove: MaterialSpecificationPatch
}

type UpdateMaterialSpecificationPayload {
  materialSpecification(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
  numUids: Int
}

input UpdateMaterialStateModelInput {
  filter: MaterialStateModelFilter!
  set: MaterialStateModelPatch
  remove: MaterialStateModelPatch
}

type UpdateMaterialStateModelPayload {
  materialStateModel(filter: MaterialStateModelFilter, order: MaterialStateModelOrder, first: Int, offset: Int): [MaterialStateModel]
  numUids: Int
}

input UpdateMaterialStateTransitionInput {
  filter: MaterialStateTransitionFilter!
  set: MaterialStateTransitionPatch
  remove: MaterialStateTransitionPatch
}

type UpdateMaterialStateTransitionPayload {
  materialStateTransition(filter: MaterialStateTransitionFilter, first: Int, offset: Int): [MaterialStateTransition]
  numUids: Int
}

input UpdateMaterialStatusInput {
  filter: MaterialStatusFilter!
  set: MaterialStatusPatch
  remove: MaterialStatusPatch
}

type UpdateMaterialStatusPayload {
  materialStatus(filter: MaterialStatusFilter, order: MaterialStatusOrder, first: Int, offset: Int): [MaterialStatus]
  numUids: Int
}

input UpdateMaterialSubLotInput {
  filter: MaterialSubLotFilter!
  set: MaterialSubLotPatch
  remove: MaterialSubLotPatch
}

type UpdateMaterialSubLotPayload {
  materialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
  numUids: Int
}

input UpdateMaterialUnitInput {
  filter: MaterialUnitFilter!
  set: MaterialUnitPatch
  remove: MaterialUnitPatch
}

type UpdateMaterialUnitPayload {
  materialUnit(filter: MaterialUnitFilter, order: MaterialUnitOrder, first: Int, offset: Int): [MaterialUnit]
  numUids: Int
}

input UpdateMenuInput {
  filter: MenuFilter!
  set: MenuPatch
  remove: MenuPatch
}

type UpdateMenuPayload {
  menu(filter: MenuFilter, order: MenuOrder, first: Int, offset: Int): [Menu]
  numUids: Int
}

input UpdateOperationsDefinitionInput {
  filter: OperationsDefinitionFilter!
  set: OperationsDefinitionPatch
  remove: OperationsDefinitionPatch
}

type UpdateOperationsDefinitionPayload {
  operationsDefinition(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition]
  numUids: Int
}

input UpdateOperationsRequestInput {
  filter: OperationsRequestFilter!
  set: OperationsRequestPatch
  remove: OperationsRequestPatch
}

type UpdateOperationsRequestPayload {
  operationsRequest(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest]
  numUids: Int
}

input UpdateOperationsSegmentInput {
  filter: OperationsSegmentFilter!
  set: OperationsSegmentPatch
  remove: OperationsSegmentPatch
}

type UpdateOperationsSegmentPayload {
  operationsSegment(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment]
  numUids: Int
}

input UpdateOrderInput {
  filter: OrderFilter!
  set: OrderPatch
  remove: OrderPatch
}

input UpdateOrderLineInput {
  filter: OrderLineFilter!
  set: OrderLinePatch
  remove: OrderLinePatch
}

type UpdateOrderLinePayload {
  orderLine(filter: OrderLineFilter, order: OrderLineOrder, first: Int, offset: Int): [OrderLine]
  numUids: Int
}

type UpdateOrderPayload {
  order(filter: OrderFilter, order: OrderOrder, first: Int, offset: Int): [Order]
  numUids: Int
}

input UpdateOrderStartRulesetInput {
  filter: OrderStartRulesetFilter!
  set: OrderStartRulesetPatch
  remove: OrderStartRulesetPatch
}

type UpdateOrderStartRulesetPayload {
  orderStartRuleset(filter: OrderStartRulesetFilter, order: OrderStartRulesetOrder, first: Int, offset: Int): [OrderStartRuleset]
  numUids: Int
}

input UpdateOrderStatusInput {
  equipment: ExtEquipmentRef!
  eventStartTime: DateTime!
  updateType: String!
}

input UpdatePartnerInput {
  filter: PartnerFilter!
  set: PartnerPatch
  remove: PartnerPatch
}

type UpdatePartnerPayload {
  partner(filter: PartnerFilter, order: PartnerOrder, first: Int, offset: Int): [Partner]
  numUids: Int
}

input UpdatePayloadFieldDefinitionInput {
  filter: PayloadFieldDefinitionFilter!
  set: PayloadFieldDefinitionPatch
  remove: PayloadFieldDefinitionPatch
}

type UpdatePayloadFieldDefinitionPayload {
  payloadFieldDefinition(filter: PayloadFieldDefinitionFilter, order: PayloadFieldDefinitionOrder, first: Int, offset: Int): [PayloadFieldDefinition]
  numUids: Int
}

input UpdatePersonInput {
  filter: PersonFilter!
  set: PersonPatch
  remove: PersonPatch
}

input UpdatePersonnelClassInput {
  filter: PersonnelClassFilter!
  set: PersonnelClassPatch
  remove: PersonnelClassPatch
}

type UpdatePersonnelClassPayload {
  personnelClass(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass]
  numUids: Int
}

input UpdatePersonnelSpecificationInput {
  filter: PersonnelSpecificationFilter!
  set: PersonnelSpecificationPatch
  remove: PersonnelSpecificationPatch
}

type UpdatePersonnelSpecificationPayload {
  personnelSpecification(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification]
  numUids: Int
}

type UpdatePersonPayload {
  person(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
  numUids: Int
}

input UpdatePropertyInput {
  filter: PropertyFilter!
  set: PropertyPatch
  remove: PropertyPatch
}

input UpdatePropertyNameAliasInput {
  filter: PropertyNameAliasFilter!
  set: PropertyNameAliasPatch
  remove: PropertyNameAliasPatch
}

type UpdatePropertyNameAliasPayload {
  propertyNameAlias(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias]
  numUids: Int
}

type UpdatePropertyPayload {
  property(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property]
  numUids: Int
}

input UpdatePropertyValueAliasInput {
  filter: PropertyValueAliasFilter!
  set: PropertyValueAliasPatch
  remove: PropertyValueAliasPatch
}

type UpdatePropertyValueAliasPayload {
  propertyValueAlias(filter: PropertyValueAliasFilter, order: PropertyValueAliasOrder, first: Int, offset: Int): [PropertyValueAlias]
  numUids: Int
}

input UpdateQuantityLogInput {
  filter: QuantityLogFilter!
  set: QuantityLogPatch
  remove: QuantityLogPatch
}

type UpdateQuantityLogPayload {
  quantityLog(filter: QuantityLogFilter, order: QuantityLogOrder, first: Int, offset: Int): [QuantityLog]
  numUids: Int
}

input UpdateReasonCategoryInput {
  filter: ReasonCategoryFilter!
  set: ReasonCategoryPatch
  remove: ReasonCategoryPatch
}

type UpdateReasonCategoryPayload {
  reasonCategory(filter: ReasonCategoryFilter, order: ReasonCategoryOrder, first: Int, offset: Int): [ReasonCategory]
  numUids: Int
}

input UpdateReasonInput {
  filter: ReasonFilter!
  set: ReasonPatch
  remove: ReasonPatch
}

type UpdateReasonPayload {
  reason(filter: ReasonFilter, order: ReasonOrder, first: Int, offset: Int): [Reason]
  numUids: Int
}

input UpdateRequestStateInput {
  filter: RequestStateFilter!
  set: RequestStatePatch
  remove: RequestStatePatch
}

type UpdateRequestStatePayload {
  requestState(filter: RequestStateFilter, order: RequestStateOrder, first: Int, offset: Int): [RequestState]
  numUids: Int
}

input UpdateRoleInput {
  filter: RoleFilter!
  set: RolePatch
  remove: RolePatch
}

type UpdateRolePayload {
  role(filter: RoleFilter, order: RoleOrder, first: Int, offset: Int): [Role]
  numUids: Int
}

input UpdateSegmentDependencyInput {
  filter: SegmentDependencyFilter!
  set: SegmentDependencyPatch
  remove: SegmentDependencyPatch
}

type UpdateSegmentDependencyPayload {
  segmentDependency(filter: SegmentDependencyFilter, order: SegmentDependencyOrder, first: Int, offset: Int): [SegmentDependency]
  numUids: Int
}

input UpdateSegmentInvoiceSettingInput {
  filter: SegmentInvoiceSettingFilter!
  set: SegmentInvoiceSettingPatch
  remove: SegmentInvoiceSettingPatch
}

type UpdateSegmentInvoiceSettingPayload {
  segmentInvoiceSetting(filter: SegmentInvoiceSettingFilter, order: SegmentInvoiceSettingOrder, first: Int, offset: Int): [SegmentInvoiceSetting]
  numUids: Int
}

input UpdateShipmentInput {
  filter: ShipmentFilter!
  set: ShipmentPatch
  remove: ShipmentPatch
}

input UpdateShipmentItemInput {
  filter: ShipmentItemFilter!
  set: ShipmentItemPatch
  remove: ShipmentItemPatch
}

type UpdateShipmentItemPayload {
  shipmentItem(filter: ShipmentItemFilter, order: ShipmentItemOrder, first: Int, offset: Int): [ShipmentItem]
  numUids: Int
}

type UpdateShipmentPayload {
  shipment(filter: ShipmentFilter, order: ShipmentOrder, first: Int, offset: Int): [Shipment]
  numUids: Int
}

input UpdateStateEventRulesetInput {
  filter: StateEventRulesetFilter!
  set: StateEventRulesetPatch
  remove: StateEventRulesetPatch
}

type UpdateStateEventRulesetPayload {
  stateEventRuleset(filter: StateEventRulesetFilter, order: StateEventRulesetOrder, first: Int, offset: Int): [StateEventRuleset]
  numUids: Int
}

input UpdateTestResultInput {
  filter: TestResultFilter!
  set: TestResultPatch
  remove: TestResultPatch
}

type UpdateTestResultPayload {
  testResult(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
  numUids: Int
}

input UpdateTestSpecificationInput {
  filter: TestSpecificationFilter!
  set: TestSpecificationPatch
  remove: TestSpecificationPatch
}

type UpdateTestSpecificationPayload {
  testSpecification(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
  numUids: Int
}

input UpdateTransitionEventRulesetInput {
  filter: TransitionEventRulesetFilter!
  set: TransitionEventRulesetPatch
  remove: TransitionEventRulesetPatch
}

type UpdateTransitionEventRulesetPayload {
  transitionEventRuleset(filter: TransitionEventRulesetFilter, order: TransitionEventRulesetOrder, first: Int, offset: Int): [TransitionEventRuleset]
  numUids: Int
}

input UpdateUnitOfMeasureConversionInput {
  filter: UnitOfMeasureConversionFilter!
  set: UnitOfMeasureConversionPatch
  remove: UnitOfMeasureConversionPatch
}

type UpdateUnitOfMeasureConversionPayload {
  unitOfMeasureConversion(filter: UnitOfMeasureConversionFilter, order: UnitOfMeasureConversionOrder, first: Int, offset: Int): [UnitOfMeasureConversion]
  numUids: Int
}

input UpdateUnitOfMeasureInput {
  filter: UnitOfMeasureFilter!
  set: UnitOfMeasurePatch
  remove: UnitOfMeasurePatch
}

type UpdateUnitOfMeasurePayload {
  unitOfMeasure(filter: UnitOfMeasureFilter, order: UnitOfMeasureOrder, first: Int, offset: Int): [UnitOfMeasure]
  numUids: Int
}

input UpdateUserInput {
  filter: UserFilter!
  set: UserPatch
  remove: UserPatch
}

type UpdateUserPayload {
  user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  numUids: Int
}

input UpdateUserRoleInput {
  filter: UserRoleFilter!
  set: UserRolePatch
  remove: UserRolePatch
}

type UpdateUserRolePayload {
  userRole(filter: UserRoleFilter, first: Int, offset: Int): [UserRole]
  numUids: Int
}

input UpdateWorkCalendarDefinitionEntryInput {
  filter: WorkCalendarDefinitionEntryFilter!
  set: WorkCalendarDefinitionEntryPatch
  remove: WorkCalendarDefinitionEntryPatch
}

type UpdateWorkCalendarDefinitionEntryPayload {
  workCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter, order: WorkCalendarDefinitionEntryOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntry]
  numUids: Int
}

input UpdateWorkCalendarEntryInput {
  filter: WorkCalendarEntryFilter!
  set: WorkCalendarEntryPatch
  remove: WorkCalendarEntryPatch
}

type UpdateWorkCalendarEntryPayload {
  workCalendarEntry(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry]
  numUids: Int
}

input UpdateWorkCalendarInput {
  filter: WorkCalendarFilter!
  set: WorkCalendarPatch
  remove: WorkCalendarPatch
}

type UpdateWorkCalendarPayload {
  workCalendar(filter: WorkCalendarFilter, order: WorkCalendarOrder, first: Int, offset: Int): [WorkCalendar]
  numUids: Int
}

input UpdateWorkDirectiveInput {
  filter: WorkDirectiveFilter!
  set: WorkDirectivePatch
  remove: WorkDirectivePatch
}

type UpdateWorkDirectivePayload {
  workDirective(filter: WorkDirectiveFilter, order: WorkDirectiveOrder, first: Int, offset: Int): [WorkDirective]
  numUids: Int
}

input UpdateWorkflowConnectionInput {
  filter: WorkflowConnectionFilter!
  set: WorkflowConnectionPatch
  remove: WorkflowConnectionPatch
}

type UpdateWorkflowConnectionPayload {
  workflowConnection(filter: WorkflowConnectionFilter, order: WorkflowConnectionOrder, first: Int, offset: Int): [WorkflowConnection]
  numUids: Int
}

input UpdateWorkflowConnectionTypeInput {
  filter: WorkflowConnectionTypeFilter!
  set: WorkflowConnectionTypePatch
  remove: WorkflowConnectionTypePatch
}

type UpdateWorkflowConnectionTypePayload {
  workflowConnectionType(filter: WorkflowConnectionTypeFilter, order: WorkflowConnectionTypeOrder, first: Int, offset: Int): [WorkflowConnectionType]
  numUids: Int
}

input UpdateWorkflowInstanceInput {
  filter: WorkflowInstanceFilter!
  set: WorkflowInstancePatch
  remove: WorkflowInstancePatch
}

type UpdateWorkflowInstancePayload {
  workflowInstance(filter: WorkflowInstanceFilter, order: WorkflowInstanceOrder, first: Int, offset: Int): [WorkflowInstance]
  numUids: Int
}

input UpdateWorkflowInstancePropertyInput {
  filter: WorkflowInstancePropertyFilter!
  set: WorkflowInstancePropertyPatch
  remove: WorkflowInstancePropertyPatch
}

type UpdateWorkflowInstancePropertyPayload {
  workflowInstanceProperty(filter: WorkflowInstancePropertyFilter, order: WorkflowInstancePropertyOrder, first: Int, offset: Int): [WorkflowInstanceProperty]
  numUids: Int
}

input UpdateWorkflowNodeEventInput {
  filter: WorkflowNodeEventFilter!
  set: WorkflowNodeEventPatch
  remove: WorkflowNodeEventPatch
}

type UpdateWorkflowNodeEventPayload {
  workflowNodeEvent(filter: WorkflowNodeEventFilter, order: WorkflowNodeEventOrder, first: Int, offset: Int): [WorkflowNodeEvent]
  numUids: Int
}

input UpdateWorkflowNodeInput {
  filter: WorkflowNodeFilter!
  set: WorkflowNodePatch
  remove: WorkflowNodePatch
}

input UpdateWorkflowNodeInstanceInput {
  filter: WorkflowNodeInstanceFilter!
  set: WorkflowNodeInstancePatch
  remove: WorkflowNodeInstancePatch
}

type UpdateWorkflowNodeInstancePayload {
  workflowNodeInstance(filter: WorkflowNodeInstanceFilter, order: WorkflowNodeInstanceOrder, first: Int, offset: Int): [WorkflowNodeInstance]
  numUids: Int
}

type UpdateWorkflowNodePayload {
  workflowNode(filter: WorkflowNodeFilter, order: WorkflowNodeOrder, first: Int, offset: Int): [WorkflowNode]
  numUids: Int
}

input UpdateWorkflowNodeTypeInput {
  filter: WorkflowNodeTypeFilter!
  set: WorkflowNodeTypePatch
  remove: WorkflowNodeTypePatch
}

type UpdateWorkflowNodeTypePayload {
  workflowNodeType(filter: WorkflowNodeTypeFilter, order: WorkflowNodeTypeOrder, first: Int, offset: Int): [WorkflowNodeType]
  numUids: Int
}

input UpdateWorkflowPropertyInput {
  filter: WorkflowPropertyFilter!
  set: WorkflowPropertyPatch
  remove: WorkflowPropertyPatch
}

input UpdateWorkflowPropertyInstanceInput {
  filter: WorkflowPropertyInstanceFilter!
  set: WorkflowPropertyInstancePatch
  remove: WorkflowPropertyInstancePatch
}

type UpdateWorkflowPropertyInstancePayload {
  workflowPropertyInstance(filter: WorkflowPropertyInstanceFilter, order: WorkflowPropertyInstanceOrder, first: Int, offset: Int): [WorkflowPropertyInstance]
  numUids: Int
}

type UpdateWorkflowPropertyPayload {
  workflowProperty(filter: WorkflowPropertyFilter, order: WorkflowPropertyOrder, first: Int, offset: Int): [WorkflowProperty]
  numUids: Int
}

input UpdateWorkflowPropertyValueInput {
  filter: WorkflowPropertyValueFilter!
  set: WorkflowPropertyValuePatch
  remove: WorkflowPropertyValuePatch
}

type UpdateWorkflowPropertyValuePayload {
  workflowPropertyValue(filter: WorkflowPropertyValueFilter, order: WorkflowPropertyValueOrder, first: Int, offset: Int): [WorkflowPropertyValue]
  numUids: Int
}

input UpdateWorkflowSpecificationInput {
  filter: WorkflowSpecificationFilter!
  set: WorkflowSpecificationPatch
  remove: WorkflowSpecificationPatch
}

type UpdateWorkflowSpecificationPayload {
  workflowSpecification(filter: WorkflowSpecificationFilter, order: WorkflowSpecificationOrder, first: Int, offset: Int): [WorkflowSpecification]
  numUids: Int
}

input UpdateWorkMasterInput {
  filter: WorkMasterFilter!
  set: WorkMasterPatch
  remove: WorkMasterPatch
}

type UpdateWorkMasterPayload {
  workMaster(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster]
  numUids: Int
}

type User {
  id: ID!
  username: String!
  name: String
  isType: UserType!
  hasRole(filter: UserRoleFilter, first: Int, offset: Int): [UserRole]
  tasks(filter: WorkflowNodeInstanceFilter, order: WorkflowNodeInstanceOrder, first: Int, offset: Int): [WorkflowNodeInstance]
  isActive: Boolean
  hasRoleAggregate(filter: UserRoleFilter): UserRoleAggregateResult
  tasksAggregate(filter: WorkflowNodeInstanceFilter): WorkflowNodeInstanceAggregateResult
}

type UserAggregateResult {
  count: Int
  usernameMin: String
  usernameMax: String
  nameMin: String
  nameMax: String
}

input UserFilter {
  id: [ID!]
  username: StringHashFilter
  isType: UserType_hash
  has: [UserHasFilter]
  and: [UserFilter]
  or: [UserFilter]
  not: UserFilter
}

enum UserHasFilter {
  username
  name
  isType
  hasRole
  tasks
  isActive
}

input UserOrder {
  asc: UserOrderable
  desc: UserOrderable
  then: UserOrder
}

enum UserOrderable {
  username
  name
}

input UserPatch {
  name: String
  isType: UserType
  hasRole: [UserRoleRef]
  tasks: [WorkflowNodeInstanceRef]
  isActive: Boolean
}

input UserRef {
  id: ID
  username: String
  name: String
  isType: UserType
  hasRole: [UserRoleRef]
  tasks: [WorkflowNodeInstanceRef]
  isActive: Boolean
}

type UserRole {
  id: ID!
  role(filter: RoleFilter): Role!
  user(filter: UserFilter): User!
  responsibilities(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment]!
  isActive: Boolean
  responsibilitiesAggregate(filter: EquipmentFilter): EquipmentAggregateResult
}

type UserRoleAggregateResult {
  count: Int
}

input UserRoleFilter {
  id: [ID!]
  has: [UserRoleHasFilter]
  and: [UserRoleFilter]
  or: [UserRoleFilter]
  not: UserRoleFilter
}

enum UserRoleHasFilter {
  role
  user
  responsibilities
  isActive
}

input UserRolePatch {
  role: RoleRef
  user: UserRef
  responsibilities: [EquipmentRef]
  isActive: Boolean
}

input UserRoleRef {
  id: ID
  role: RoleRef
  user: UserRef
  responsibilities: [EquipmentRef]
  isActive: Boolean
}

enum UserType {
  USER
  ADMIN
}

input UserType_hash {
  eq: UserType
  in: [UserType]
}

enum Weekday {
  MO
  TU
  WE
  TH
  FR
  SA
  SU
}

input WithinFilter {
  polygon: PolygonRef!
}

type WorkCalendar
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
  definition(filter: WorkCalendarDefinitionEntryFilter, order: WorkCalendarDefinitionEntryOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntry] @join__field(graph: CORE)
  entries(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry] @join__field(graph: CORE)
  equipment(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment] @join__field(graph: CORE)
  definitionAggregate(filter: WorkCalendarDefinitionEntryFilter): WorkCalendarDefinitionEntryAggregateResult @join__field(graph: CORE)
  entriesAggregate(filter: WorkCalendarEntryFilter): WorkCalendarEntryAggregateResult @join__field(graph: CORE)
  equipmentAggregate(filter: EquipmentFilter): EquipmentAggregateResult @join__field(graph: CORE)
}

type WorkCalendarAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
}

"""
Work Calendar domain describes the definition of shift patterns and non-working days
The Work Calendar Definition defines the rule used to determine work calendar entries.
It contains the recurrence time for the rule, the duration of the entry, the entry type, and properties associated with the entry.
Standard Entry Types include Working Time and Non-Working Time. The entry may include property definitions.
The definition uses the rrule.js library to generate calendar events, and the fields available match
the configuration fields required by rrule.js
"""
type WorkCalendarDefinitionEntry
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
  hierarchyScope(filter: EquipmentFilter): Equipment @join__field(graph: CORE)
  freq: Frequency! @join__field(graph: CORE)
  startDateTime: DateTime! @join__field(graph: CORE)
  endDateTime: DateTime @join__field(graph: CORE)
  count: Int @join__field(graph: CORE)
  interval: Int @join__field(graph: CORE)
  wkst: Weekday @join__field(graph: CORE)
  byWeekDay: [Weekday] @join__field(graph: CORE)
  byMonth: [Int] @join__field(graph: CORE)
  bySetPos: [Int] @join__field(graph: CORE)
  byMonthDay: [Int] @join__field(graph: CORE)
  byYearDay: [Int] @join__field(graph: CORE)
  byWeekNo: [Int] @join__field(graph: CORE)
  byHour: [Int] @join__field(graph: CORE)
  byMinute: [Int] @join__field(graph: CORE)
  bySecond: [Int] @join__field(graph: CORE)
  duration: String @join__field(graph: CORE)
  entryType: WorkCalendarEntryType! @join__field(graph: CORE)
  properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property] @join__field(graph: CORE)
  calendarEntries(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry] @join__field(graph: CORE)
  workCalendar(filter: WorkCalendarFilter): WorkCalendar @join__field(graph: CORE)
  propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult @join__field(graph: CORE)
  calendarEntriesAggregate(filter: WorkCalendarEntryFilter): WorkCalendarEntryAggregateResult @join__field(graph: CORE)
}

type WorkCalendarDefinitionEntryAggregateResult {
  count: Int
  descriptionMin: String
  descriptionMax: String
  startDateTimeMin: DateTime
  startDateTimeMax: DateTime
  endDateTimeMin: DateTime
  endDateTimeMax: DateTime
  countMin: Int
  countMax: Int
  countSum: Int
  countAvg: Float
  intervalMin: Int
  intervalMax: Int
  intervalSum: Int
  intervalAvg: Float
  durationMin: String
  durationMax: String
}

input WorkCalendarDefinitionEntryFilter {
  id: [ID!]
  isActive: Boolean
  has: [WorkCalendarDefinitionEntryHasFilter]
  and: [WorkCalendarDefinitionEntryFilter]
  or: [WorkCalendarDefinitionEntryFilter]
  not: WorkCalendarDefinitionEntryFilter
}

enum WorkCalendarDefinitionEntryHasFilter {
  isActive
  description
  hierarchyScope
  freq
  startDateTime
  endDateTime
  count
  interval
  wkst
  byWeekDay
  byMonth
  bySetPos
  byMonthDay
  byYearDay
  byWeekNo
  byHour
  byMinute
  bySecond
  duration
  entryType
  properties
  calendarEntries
  workCalendar
}

input WorkCalendarDefinitionEntryOrder {
  asc: WorkCalendarDefinitionEntryOrderable
  desc: WorkCalendarDefinitionEntryOrderable
  then: WorkCalendarDefinitionEntryOrder
}

enum WorkCalendarDefinitionEntryOrderable {
  description
  startDateTime
  endDateTime
  count
  interval
  duration
}

input WorkCalendarDefinitionEntryPatch {
  isActive: Boolean
  description: String
  hierarchyScope: EquipmentRef
  freq: Frequency
  startDateTime: DateTime
  endDateTime: DateTime
  count: Int
  interval: Int
  wkst: Weekday
  byWeekDay: [Weekday]
  byMonth: [Int]
  bySetPos: [Int]
  byMonthDay: [Int]
  byYearDay: [Int]
  byWeekNo: [Int]
  byHour: [Int]
  byMinute: [Int]
  bySecond: [Int]
  duration: String
  entryType: WorkCalendarEntryType
  properties: [PropertyRef]
  calendarEntries: [WorkCalendarEntryRef]
  workCalendar: WorkCalendarRef
}

input WorkCalendarDefinitionEntryRef {
  id: ID
  isActive: Boolean
  description: String
  hierarchyScope: EquipmentRef
  freq: Frequency
  startDateTime: DateTime
  endDateTime: DateTime
  count: Int
  interval: Int
  wkst: Weekday
  byWeekDay: [Weekday]
  byMonth: [Int]
  bySetPos: [Int]
  byMonthDay: [Int]
  byYearDay: [Int]
  byWeekNo: [Int]
  byHour: [Int]
  byMinute: [Int]
  bySecond: [Int]
  duration: String
  entryType: WorkCalendarEntryType
  properties: [PropertyRef]
  calendarEntries: [WorkCalendarEntryRef]
  workCalendar: WorkCalendarRef
}

type WorkCalendarEntry
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
  @join__type(graph: PROFILES, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
  definition(filter: WorkCalendarDefinitionEntryFilter): WorkCalendarDefinitionEntry @join__field(graph: CORE)
  hierarchyScope(filter: EquipmentFilter): Equipment @join__field(graph: CORE)
  startDateTime: DateTime! @join__field(graph: CORE)
  finishDateTime: DateTime! @join__field(graph: CORE)
  entryType: WorkCalendarEntryType! @join__field(graph: CORE)
  properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property] @join__field(graph: CORE)
  workCalendar(filter: WorkCalendarFilter): WorkCalendar @join__field(graph: CORE)
  propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult @join__field(graph: CORE)
  elapsedDuration: Int @join__field(graph: PROFILES, requires: "startDateTime finishDateTime")
}

type WorkCalendarEntryAggregateResult {
  count: Int
  descriptionMin: String
  descriptionMax: String
  startDateTimeMin: DateTime
  startDateTimeMax: DateTime
  finishDateTimeMin: DateTime
  finishDateTimeMax: DateTime
}

input WorkCalendarEntryFilter {
  id: [ID!]
  isActive: Boolean
  startDateTime: DateTimeFilter
  finishDateTime: DateTimeFilter
  entryType: WorkCalendarEntryType_hash
  has: [WorkCalendarEntryHasFilter]
  and: [WorkCalendarEntryFilter]
  or: [WorkCalendarEntryFilter]
  not: WorkCalendarEntryFilter
}

enum WorkCalendarEntryHasFilter {
  isActive
  description
  definition
  hierarchyScope
  startDateTime
  finishDateTime
  entryType
  properties
  workCalendar
}

input WorkCalendarEntryOrder {
  asc: WorkCalendarEntryOrderable
  desc: WorkCalendarEntryOrderable
  then: WorkCalendarEntryOrder
}

enum WorkCalendarEntryOrderable {
  description
  startDateTime
  finishDateTime
}

input WorkCalendarEntryPatch {
  isActive: Boolean
  description: String
  definition: WorkCalendarDefinitionEntryRef
  hierarchyScope: EquipmentRef
  startDateTime: DateTime
  finishDateTime: DateTime
  entryType: WorkCalendarEntryType
  properties: [PropertyRef]
  workCalendar: WorkCalendarRef
}

input WorkCalendarEntryRef {
  id: ID
  isActive: Boolean
  description: String
  definition: WorkCalendarDefinitionEntryRef
  hierarchyScope: EquipmentRef
  startDateTime: DateTime
  finishDateTime: DateTime
  entryType: WorkCalendarEntryType
  properties: [PropertyRef]
  workCalendar: WorkCalendarRef
}

enum WorkCalendarEntryType {
  PlannedBusyTime
  PlannedDowntime
  PlannedShutdown
}

input WorkCalendarEntryType_hash {
  eq: WorkCalendarEntryType
  in: [WorkCalendarEntryType]
}

input WorkCalendarFilter {
  id: [ID!]
  isActive: Boolean
  name: StringHashFilter
  has: [WorkCalendarHasFilter]
  and: [WorkCalendarFilter]
  or: [WorkCalendarFilter]
  not: WorkCalendarFilter
}

enum WorkCalendarHasFilter {
  isActive
  name
  description
  definition
  entries
  equipment
}

input WorkCalendarOrder {
  asc: WorkCalendarOrderable
  desc: WorkCalendarOrderable
  then: WorkCalendarOrder
}

enum WorkCalendarOrderable {
  name
  description
}

input WorkCalendarPatch {
  isActive: Boolean
  description: String
  definition: [WorkCalendarDefinitionEntryRef]
  entries: [WorkCalendarEntryRef]
  equipment: [EquipmentRef]
}

input WorkCalendarRef {
  id: ID
  isActive: Boolean
  name: String
  description: String
  definition: [WorkCalendarDefinitionEntryRef]
  entries: [WorkCalendarEntryRef]
  equipment: [EquipmentRef]
}

type WorkDirective
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  version: String @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
  parent(filter: WorkDirectiveFilter): WorkDirective @join__field(graph: CORE)
  children(filter: WorkDirectiveFilter, order: WorkDirectiveOrder, first: Int, offset: Int): [WorkDirective] @join__field(graph: CORE)
  workType: WorkType @join__field(graph: CORE)
  workDefinitionType: String @join__field(graph: CORE)
  duration: Float @join__field(graph: CORE)
  durationUoM(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: CORE)
  materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @join__field(graph: CORE)
  equipmentSpecifications(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification] @join__field(graph: CORE)
  personnelSpecifications(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification] @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @join__field(graph: CORE)
  jobResponses(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse] @join__field(graph: CORE)
  workMaster(filter: WorkMasterFilter): WorkMaster @join__field(graph: CORE)
  childrenAggregate(filter: WorkDirectiveFilter): WorkDirectiveAggregateResult @join__field(graph: CORE)
  materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult @join__field(graph: CORE)
  equipmentSpecificationsAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult @join__field(graph: CORE)
  personnelSpecificationsAggregate(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult @join__field(graph: CORE)
  jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult @join__field(graph: CORE)
  jobResponsesAggregate(filter: JobResponseFilter): JobResponseAggregateResult @join__field(graph: CORE)
}

type WorkDirectiveAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  versionMin: String
  versionMax: String
  descriptionMin: String
  descriptionMax: String
  workDefinitionTypeMin: String
  workDefinitionTypeMax: String
  durationMin: Float
  durationMax: Float
  durationSum: Float
  durationAvg: Float
}

input WorkDirectiveFilter {
  id: [ID!]
  name: StringHashFilter
  description: StringHashFilter
  workType: WorkType_hash
  workDefinitionType: StringHashFilter
  isActive: Boolean
  has: [WorkDirectiveHasFilter]
  and: [WorkDirectiveFilter]
  or: [WorkDirectiveFilter]
  not: WorkDirectiveFilter
}

enum WorkDirectiveHasFilter {
  name
  version
  description
  parent
  children
  workType
  workDefinitionType
  duration
  durationUoM
  materialSpecifications
  equipmentSpecifications
  personnelSpecifications
  isActive
  jobOrders
  jobResponses
  workMaster
}

input WorkDirectiveOrder {
  asc: WorkDirectiveOrderable
  desc: WorkDirectiveOrderable
  then: WorkDirectiveOrder
}

enum WorkDirectiveOrderable {
  name
  version
  description
  workDefinitionType
  duration
}

input WorkDirectivePatch {
  version: String
  description: String
  parent: WorkDirectiveRef
  children: [WorkDirectiveRef]
  workType: WorkType
  workDefinitionType: String
  duration: Float
  durationUoM: UnitOfMeasureRef
  materialSpecifications: [MaterialSpecificationRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  isActive: Boolean
  jobOrders: [JobOrderRef]
  jobResponses: [JobResponseRef]
  workMaster: WorkMasterRef
}

input WorkDirectiveRef {
  id: ID
  name: String
  version: String
  description: String
  parent: WorkDirectiveRef
  children: [WorkDirectiveRef]
  workType: WorkType
  workDefinitionType: String
  duration: Float
  durationUoM: UnitOfMeasureRef
  materialSpecifications: [MaterialSpecificationRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  isActive: Boolean
  jobOrders: [JobOrderRef]
  jobResponses: [JobResponseRef]
  workMaster: WorkMasterRef
}

type WorkflowConnection
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  access(filter: ACLFilter, first: Int, offset: Int): [ACL] @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  createdDateTime: DateTime @join__field(graph: CORE)
  createdBy(filter: UserFilter): User @join__field(graph: CORE)
  modifiedDateTime: DateTime @join__field(graph: CORE)
  modifiedBy(filter: UserFilter): User @join__field(graph: CORE)
  connectionType(filter: WorkflowConnectionTypeFilter): WorkflowConnectionType! @join__field(graph: CORE)
  workflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification! @join__field(graph: CORE)
  from(filter: WorkflowNodeFilter): WorkflowNode! @join__field(graph: CORE)
  to(filter: WorkflowNodeFilter): WorkflowNode! @join__field(graph: CORE)
  condition: String @join__field(graph: CORE)
  properties(filter: WorkflowPropertyFilter, order: WorkflowPropertyOrder, first: Int, offset: Int): [WorkflowProperty] @join__field(graph: CORE)
  accessAggregate(filter: ACLFilter): ACLAggregateResult @join__field(graph: CORE)
  propertiesAggregate(filter: WorkflowPropertyFilter): WorkflowPropertyAggregateResult @join__field(graph: CORE)
}

type WorkflowConnectionAggregateResult {
  count: Int
  createdDateTimeMin: DateTime
  createdDateTimeMax: DateTime
  modifiedDateTimeMin: DateTime
  modifiedDateTimeMax: DateTime
  conditionMin: String
  conditionMax: String
}

input WorkflowConnectionFilter {
  id: [ID!]
  isActive: Boolean
  has: [WorkflowConnectionHasFilter]
  and: [WorkflowConnectionFilter]
  or: [WorkflowConnectionFilter]
  not: WorkflowConnectionFilter
}

enum WorkflowConnectionHasFilter {
  access
  isActive
  createdDateTime
  createdBy
  modifiedDateTime
  modifiedBy
  connectionType
  workflowSpecification
  from
  to
  condition
  properties
}

input WorkflowConnectionOrder {
  asc: WorkflowConnectionOrderable
  desc: WorkflowConnectionOrderable
  then: WorkflowConnectionOrder
}

enum WorkflowConnectionOrderable {
  createdDateTime
  modifiedDateTime
  condition
}

input WorkflowConnectionPatch {
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  connectionType: WorkflowConnectionTypeRef
  workflowSpecification: WorkflowSpecificationRef
  from: WorkflowNodeRef
  to: WorkflowNodeRef
  condition: String
  properties: [WorkflowPropertyRef]
}

input WorkflowConnectionRef {
  id: ID
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  connectionType: WorkflowConnectionTypeRef
  workflowSpecification: WorkflowSpecificationRef
  from: WorkflowNodeRef
  to: WorkflowNodeRef
  condition: String
  properties: [WorkflowPropertyRef]
}

type WorkflowConnectionType
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  access(filter: ACLFilter, first: Int, offset: Int): [ACL] @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  createdDateTime: DateTime @join__field(graph: CORE)
  createdBy(filter: UserFilter): User @join__field(graph: CORE)
  modifiedDateTime: DateTime @join__field(graph: CORE)
  modifiedBy(filter: UserFilter): User @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  description: String! @join__field(graph: CORE)
  connections(filter: WorkflowConnectionFilter, order: WorkflowConnectionOrder, first: Int, offset: Int): [WorkflowConnection] @join__field(graph: CORE)
  properties(filter: WorkflowPropertyFilter, order: WorkflowPropertyOrder, first: Int, offset: Int): [WorkflowProperty] @join__field(graph: CORE)
  accessAggregate(filter: ACLFilter): ACLAggregateResult @join__field(graph: CORE)
  connectionsAggregate(filter: WorkflowConnectionFilter): WorkflowConnectionAggregateResult @join__field(graph: CORE)
  propertiesAggregate(filter: WorkflowPropertyFilter): WorkflowPropertyAggregateResult @join__field(graph: CORE)
}

type WorkflowConnectionTypeAggregateResult {
  count: Int
  createdDateTimeMin: DateTime
  createdDateTimeMax: DateTime
  modifiedDateTimeMin: DateTime
  modifiedDateTimeMax: DateTime
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
}

input WorkflowConnectionTypeFilter {
  id: [ID!]
  isActive: Boolean
  has: [WorkflowConnectionTypeHasFilter]
  and: [WorkflowConnectionTypeFilter]
  or: [WorkflowConnectionTypeFilter]
  not: WorkflowConnectionTypeFilter
}

enum WorkflowConnectionTypeHasFilter {
  access
  isActive
  createdDateTime
  createdBy
  modifiedDateTime
  modifiedBy
  name
  description
  connections
  properties
}

input WorkflowConnectionTypeOrder {
  asc: WorkflowConnectionTypeOrderable
  desc: WorkflowConnectionTypeOrderable
  then: WorkflowConnectionTypeOrder
}

enum WorkflowConnectionTypeOrderable {
  createdDateTime
  modifiedDateTime
  name
  description
}

input WorkflowConnectionTypePatch {
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  name: String
  description: String
  connections: [WorkflowConnectionRef]
  properties: [WorkflowPropertyRef]
}

input WorkflowConnectionTypeRef {
  id: ID
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  name: String
  description: String
  connections: [WorkflowConnectionRef]
  properties: [WorkflowPropertyRef]
}

type WorkflowInstance
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  createdDateTime: DateTime @join__field(graph: CORE)
  createdBy(filter: UserFilter): User @join__field(graph: CORE)
  modifiedDateTime: DateTime @join__field(graph: CORE)
  modifiedBy(filter: UserFilter): User @join__field(graph: CORE)
  status: WorkflowNodeStatus @join__field(graph: CORE)
  workflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification @join__field(graph: CORE)
  equipment(filter: EquipmentFilter): Equipment @join__field(graph: CORE)
  parent(filter: WorkflowInstanceFilter): WorkflowInstance @join__field(graph: CORE)
  children(filter: WorkflowInstanceFilter, order: WorkflowInstanceOrder, first: Int, offset: Int): [WorkflowInstance] @join__field(graph: CORE)
  nodeInstances(filter: WorkflowNodeInstanceFilter, order: WorkflowNodeInstanceOrder, first: Int, offset: Int): [WorkflowNodeInstance] @join__field(graph: CORE)
  propertyInstances(filter: WorkflowPropertyInstanceFilter, order: WorkflowPropertyInstanceOrder, first: Int, offset: Int): [WorkflowPropertyInstance] @join__field(graph: CORE)
  properties(filter: WorkflowInstancePropertyFilter, order: WorkflowInstancePropertyOrder, first: Int, offset: Int): [WorkflowInstanceProperty] @join__field(graph: CORE)
  orderLines(filter: OrderLineFilter, order: OrderLineOrder, first: Int, offset: Int): [OrderLine] @join__field(graph: CORE)
  childrenAggregate(filter: WorkflowInstanceFilter): WorkflowInstanceAggregateResult @join__field(graph: CORE)
  nodeInstancesAggregate(filter: WorkflowNodeInstanceFilter): WorkflowNodeInstanceAggregateResult @join__field(graph: CORE)
  propertyInstancesAggregate(filter: WorkflowPropertyInstanceFilter): WorkflowPropertyInstanceAggregateResult @join__field(graph: CORE)
  propertiesAggregate(filter: WorkflowInstancePropertyFilter): WorkflowInstancePropertyAggregateResult @join__field(graph: CORE)
  orderLinesAggregate(filter: OrderLineFilter): OrderLineAggregateResult @join__field(graph: CORE)
}

type WorkflowInstanceAggregateResult {
  count: Int
  createdDateTimeMin: DateTime
  createdDateTimeMax: DateTime
  modifiedDateTimeMin: DateTime
  modifiedDateTimeMax: DateTime
}

input WorkflowInstanceFilter {
  id: [ID!]
  status: WorkflowNodeStatus_hash
  has: [WorkflowInstanceHasFilter]
  and: [WorkflowInstanceFilter]
  or: [WorkflowInstanceFilter]
  not: WorkflowInstanceFilter
}

enum WorkflowInstanceHasFilter {
  createdDateTime
  createdBy
  modifiedDateTime
  modifiedBy
  status
  workflowSpecification
  equipment
  parent
  children
  nodeInstances
  propertyInstances
  properties
  orderLines
}

input WorkflowInstanceOrder {
  asc: WorkflowInstanceOrderable
  desc: WorkflowInstanceOrderable
  then: WorkflowInstanceOrder
}

enum WorkflowInstanceOrderable {
  createdDateTime
  modifiedDateTime
}

input WorkflowInstancePatch {
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  status: WorkflowNodeStatus
  workflowSpecification: WorkflowSpecificationRef
  equipment: EquipmentRef
  parent: WorkflowInstanceRef
  children: [WorkflowInstanceRef]
  nodeInstances: [WorkflowNodeInstanceRef]
  propertyInstances: [WorkflowPropertyInstanceRef]
  properties: [WorkflowInstancePropertyRef]
  orderLines: [OrderLineRef]
}

type WorkflowInstanceProperty
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  key: String! @join__field(graph: CORE)
  workflowInstance(filter: WorkflowInstanceFilter): WorkflowInstance @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  values(filter: WorkflowPropertyValueFilter, order: WorkflowPropertyValueOrder, first: Int, offset: Int): [WorkflowPropertyValue] @join__field(graph: CORE)
  valuesAggregate(filter: WorkflowPropertyValueFilter): WorkflowPropertyValueAggregateResult @join__field(graph: CORE)
}

type WorkflowInstancePropertyAggregateResult {
  count: Int
  keyMin: String
  keyMax: String
  nameMin: String
  nameMax: String
}

input WorkflowInstancePropertyFilter {
  id: [ID!]
  key: StringHashFilter
  has: [WorkflowInstancePropertyHasFilter]
  and: [WorkflowInstancePropertyFilter]
  or: [WorkflowInstancePropertyFilter]
  not: WorkflowInstancePropertyFilter
}

enum WorkflowInstancePropertyHasFilter {
  key
  workflowInstance
  name
  values
}

input WorkflowInstancePropertyOrder {
  asc: WorkflowInstancePropertyOrderable
  desc: WorkflowInstancePropertyOrderable
  then: WorkflowInstancePropertyOrder
}

enum WorkflowInstancePropertyOrderable {
  key
  name
}

input WorkflowInstancePropertyPatch {
  workflowInstance: WorkflowInstanceRef
  name: String
  values: [WorkflowPropertyValueRef]
}

input WorkflowInstancePropertyRef {
  id: ID
  key: String
  workflowInstance: WorkflowInstanceRef
  name: String
  values: [WorkflowPropertyValueRef]
}

input WorkflowInstanceRef {
  id: ID
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  status: WorkflowNodeStatus
  workflowSpecification: WorkflowSpecificationRef
  equipment: EquipmentRef
  parent: WorkflowInstanceRef
  children: [WorkflowInstanceRef]
  nodeInstances: [WorkflowNodeInstanceRef]
  propertyInstances: [WorkflowPropertyInstanceRef]
  properties: [WorkflowInstancePropertyRef]
  orderLines: [OrderLineRef]
}

type WorkflowNode
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  access(filter: ACLFilter, first: Int, offset: Int): [ACL] @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  createdDateTime: DateTime @join__field(graph: CORE)
  createdBy(filter: UserFilter): User @join__field(graph: CORE)
  modifiedDateTime: DateTime @join__field(graph: CORE)
  modifiedBy(filter: UserFilter): User @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  description: String! @join__field(graph: CORE)
  uiComponent: String @join__field(graph: CORE)
  form(filter: FormFilter): Form @join__field(graph: CORE)
  role(filter: RoleFilter): Role @join__field(graph: CORE)
  nodeType(filter: WorkflowNodeTypeFilter): WorkflowNodeType! @join__field(graph: CORE)
  inflows(filter: WorkflowConnectionFilter, order: WorkflowConnectionOrder, first: Int, offset: Int): [WorkflowConnection] @join__field(graph: CORE)
  outflows(filter: WorkflowConnectionFilter, order: WorkflowConnectionOrder, first: Int, offset: Int): [WorkflowConnection] @join__field(graph: CORE)
  workflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification! @join__field(graph: CORE)
  properties(filter: WorkflowPropertyFilter, order: WorkflowPropertyOrder, first: Int, offset: Int): [WorkflowProperty] @join__field(graph: CORE)
  nodeInstances(filter: WorkflowNodeInstanceFilter, order: WorkflowNodeInstanceOrder, first: Int, offset: Int): [WorkflowNodeInstance] @join__field(graph: CORE)
  positionX: Int @join__field(graph: CORE)
  positionY: Int @join__field(graph: CORE)
  width: Int @join__field(graph: CORE)
  height: Int @join__field(graph: CORE)
  accessAggregate(filter: ACLFilter): ACLAggregateResult @join__field(graph: CORE)
  inflowsAggregate(filter: WorkflowConnectionFilter): WorkflowConnectionAggregateResult @join__field(graph: CORE)
  outflowsAggregate(filter: WorkflowConnectionFilter): WorkflowConnectionAggregateResult @join__field(graph: CORE)
  propertiesAggregate(filter: WorkflowPropertyFilter): WorkflowPropertyAggregateResult @join__field(graph: CORE)
  nodeInstancesAggregate(filter: WorkflowNodeInstanceFilter): WorkflowNodeInstanceAggregateResult @join__field(graph: CORE)
}

type WorkflowNodeAggregateResult {
  count: Int
  createdDateTimeMin: DateTime
  createdDateTimeMax: DateTime
  modifiedDateTimeMin: DateTime
  modifiedDateTimeMax: DateTime
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
  uiComponentMin: String
  uiComponentMax: String
  positionXMin: Int
  positionXMax: Int
  positionXSum: Int
  positionXAvg: Float
  positionYMin: Int
  positionYMax: Int
  positionYSum: Int
  positionYAvg: Float
  widthMin: Int
  widthMax: Int
  widthSum: Int
  widthAvg: Float
  heightMin: Int
  heightMax: Int
  heightSum: Int
  heightAvg: Float
}

enum WorkflowNodeClass {
  EVENT_START
  EVENT_END
  EVENT_INTERMEDIATE
  GATEWAY
  TASK_USER
  TASK_SYSTEM
  SUBPROCESS
}

type WorkflowNodeEvent
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  access(filter: ACLFilter, first: Int, offset: Int): [ACL] @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  createdDateTime: DateTime @join__field(graph: CORE)
  createdBy(filter: UserFilter): User @join__field(graph: CORE)
  modifiedDateTime: DateTime @join__field(graph: CORE)
  modifiedBy(filter: UserFilter): User @join__field(graph: CORE)
  nodeInstance(filter: WorkflowNodeInstanceFilter): WorkflowNodeInstance @join__field(graph: CORE)
  previous(filter: WorkflowNodeEventFilter): WorkflowNodeEvent @join__field(graph: CORE)
  next(filter: WorkflowNodeEventFilter): WorkflowNodeEvent @join__field(graph: CORE)
  status: WorkflowNodeStatus @join__field(graph: CORE)
  isProcessed: Boolean @join__field(graph: CORE)
  value: String @join__field(graph: CORE)
  accessAggregate(filter: ACLFilter): ACLAggregateResult @join__field(graph: CORE)
}

type WorkflowNodeEventAggregateResult {
  count: Int
  createdDateTimeMin: DateTime
  createdDateTimeMax: DateTime
  modifiedDateTimeMin: DateTime
  modifiedDateTimeMax: DateTime
  valueMin: String
  valueMax: String
}

input WorkflowNodeEventFilter {
  id: [ID!]
  isActive: Boolean
  status: WorkflowNodeStatus_hash
  isProcessed: Boolean
  has: [WorkflowNodeEventHasFilter]
  and: [WorkflowNodeEventFilter]
  or: [WorkflowNodeEventFilter]
  not: WorkflowNodeEventFilter
}

enum WorkflowNodeEventHasFilter {
  access
  isActive
  createdDateTime
  createdBy
  modifiedDateTime
  modifiedBy
  nodeInstance
  previous
  next
  status
  isProcessed
  value
}

input WorkflowNodeEventOrder {
  asc: WorkflowNodeEventOrderable
  desc: WorkflowNodeEventOrderable
  then: WorkflowNodeEventOrder
}

enum WorkflowNodeEventOrderable {
  createdDateTime
  modifiedDateTime
  value
}

input WorkflowNodeEventPatch {
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  nodeInstance: WorkflowNodeInstanceRef
  previous: WorkflowNodeEventRef
  next: WorkflowNodeEventRef
  status: WorkflowNodeStatus
  isProcessed: Boolean
  value: String
}

input WorkflowNodeEventRef {
  id: ID
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  nodeInstance: WorkflowNodeInstanceRef
  previous: WorkflowNodeEventRef
  next: WorkflowNodeEventRef
  status: WorkflowNodeStatus
  isProcessed: Boolean
  value: String
}

input WorkflowNodeFilter {
  id: [ID!]
  isActive: Boolean
  has: [WorkflowNodeHasFilter]
  and: [WorkflowNodeFilter]
  or: [WorkflowNodeFilter]
  not: WorkflowNodeFilter
}

enum WorkflowNodeHasFilter {
  access
  isActive
  createdDateTime
  createdBy
  modifiedDateTime
  modifiedBy
  name
  description
  uiComponent
  form
  role
  nodeType
  inflows
  outflows
  workflowSpecification
  properties
  nodeInstances
  positionX
  positionY
  width
  height
}

type WorkflowNodeInstance
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  access(filter: ACLFilter, first: Int, offset: Int): [ACL] @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  createdDateTime: DateTime @join__field(graph: CORE)
  createdBy(filter: UserFilter): User @join__field(graph: CORE)
  modifiedDateTime: DateTime @join__field(graph: CORE)
  modifiedBy(filter: UserFilter): User @join__field(graph: CORE)
  status: WorkflowNodeStatus @join__field(graph: CORE)
  assignedUser(filter: UserFilter): User @join__field(graph: CORE)
  workflowInstance(filter: WorkflowInstanceFilter): WorkflowInstance! @join__field(graph: CORE)
  node(filter: WorkflowNodeFilter): WorkflowNode! @join__field(graph: CORE)
  events(filter: WorkflowNodeEventFilter, order: WorkflowNodeEventOrder, first: Int, offset: Int): [WorkflowNodeEvent] @join__field(graph: CORE)
  accessAggregate(filter: ACLFilter): ACLAggregateResult @join__field(graph: CORE)
  eventsAggregate(filter: WorkflowNodeEventFilter): WorkflowNodeEventAggregateResult @join__field(graph: CORE)
}

type WorkflowNodeInstanceAggregateResult {
  count: Int
  createdDateTimeMin: DateTime
  createdDateTimeMax: DateTime
  modifiedDateTimeMin: DateTime
  modifiedDateTimeMax: DateTime
}

input WorkflowNodeInstanceFilter {
  id: [ID!]
  isActive: Boolean
  status: WorkflowNodeStatus_hash
  has: [WorkflowNodeInstanceHasFilter]
  and: [WorkflowNodeInstanceFilter]
  or: [WorkflowNodeInstanceFilter]
  not: WorkflowNodeInstanceFilter
}

enum WorkflowNodeInstanceHasFilter {
  access
  isActive
  createdDateTime
  createdBy
  modifiedDateTime
  modifiedBy
  status
  assignedUser
  workflowInstance
  node
  events
}

input WorkflowNodeInstanceOrder {
  asc: WorkflowNodeInstanceOrderable
  desc: WorkflowNodeInstanceOrderable
  then: WorkflowNodeInstanceOrder
}

enum WorkflowNodeInstanceOrderable {
  createdDateTime
  modifiedDateTime
}

input WorkflowNodeInstancePatch {
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  status: WorkflowNodeStatus
  assignedUser: UserRef
  workflowInstance: WorkflowInstanceRef
  node: WorkflowNodeRef
  events: [WorkflowNodeEventRef]
}

input WorkflowNodeInstanceRef {
  id: ID
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  status: WorkflowNodeStatus
  assignedUser: UserRef
  workflowInstance: WorkflowInstanceRef
  node: WorkflowNodeRef
  events: [WorkflowNodeEventRef]
}

input WorkflowNodeOrder {
  asc: WorkflowNodeOrderable
  desc: WorkflowNodeOrderable
  then: WorkflowNodeOrder
}

enum WorkflowNodeOrderable {
  createdDateTime
  modifiedDateTime
  name
  description
  uiComponent
  positionX
  positionY
  width
  height
}

input WorkflowNodePatch {
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  name: String
  description: String
  uiComponent: String
  form: FormRef
  role: RoleRef
  nodeType: WorkflowNodeTypeRef
  inflows: [WorkflowConnectionRef]
  outflows: [WorkflowConnectionRef]
  workflowSpecification: WorkflowSpecificationRef
  properties: [WorkflowPropertyRef]
  nodeInstances: [WorkflowNodeInstanceRef]
  positionX: Int
  positionY: Int
  width: Int
  height: Int
}

input WorkflowNodeRef {
  id: ID
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  name: String
  description: String
  uiComponent: String
  form: FormRef
  role: RoleRef
  nodeType: WorkflowNodeTypeRef
  inflows: [WorkflowConnectionRef]
  outflows: [WorkflowConnectionRef]
  workflowSpecification: WorkflowSpecificationRef
  properties: [WorkflowPropertyRef]
  nodeInstances: [WorkflowNodeInstanceRef]
  positionX: Int
  positionY: Int
  width: Int
  height: Int
}

enum WorkflowNodeStatus {
  CREATED
  CLAIMED
  STARTED
  PAUSED
  COMPLETED
}

input WorkflowNodeStatus_hash {
  eq: WorkflowNodeStatus
  in: [WorkflowNodeStatus]
}

type WorkflowNodeType
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  access(filter: ACLFilter, first: Int, offset: Int): [ACL] @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  createdDateTime: DateTime @join__field(graph: CORE)
  createdBy(filter: UserFilter): User @join__field(graph: CORE)
  modifiedDateTime: DateTime @join__field(graph: CORE)
  modifiedBy(filter: UserFilter): User @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  description: String! @join__field(graph: CORE)
  nodeClass: WorkflowNodeClass! @join__field(graph: CORE)
  nodes(filter: WorkflowNodeFilter, order: WorkflowNodeOrder, first: Int, offset: Int): [WorkflowNode] @join__field(graph: CORE)
  properties(filter: WorkflowPropertyFilter, order: WorkflowPropertyOrder, first: Int, offset: Int): [WorkflowProperty] @join__field(graph: CORE)
  accessAggregate(filter: ACLFilter): ACLAggregateResult @join__field(graph: CORE)
  nodesAggregate(filter: WorkflowNodeFilter): WorkflowNodeAggregateResult @join__field(graph: CORE)
  propertiesAggregate(filter: WorkflowPropertyFilter): WorkflowPropertyAggregateResult @join__field(graph: CORE)
}

type WorkflowNodeTypeAggregateResult {
  count: Int
  createdDateTimeMin: DateTime
  createdDateTimeMax: DateTime
  modifiedDateTimeMin: DateTime
  modifiedDateTimeMax: DateTime
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
}

input WorkflowNodeTypeFilter {
  id: [ID!]
  isActive: Boolean
  has: [WorkflowNodeTypeHasFilter]
  and: [WorkflowNodeTypeFilter]
  or: [WorkflowNodeTypeFilter]
  not: WorkflowNodeTypeFilter
}

enum WorkflowNodeTypeHasFilter {
  access
  isActive
  createdDateTime
  createdBy
  modifiedDateTime
  modifiedBy
  name
  description
  nodeClass
  nodes
  properties
}

input WorkflowNodeTypeOrder {
  asc: WorkflowNodeTypeOrderable
  desc: WorkflowNodeTypeOrderable
  then: WorkflowNodeTypeOrder
}

enum WorkflowNodeTypeOrderable {
  createdDateTime
  modifiedDateTime
  name
  description
}

input WorkflowNodeTypePatch {
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  name: String
  description: String
  nodeClass: WorkflowNodeClass
  nodes: [WorkflowNodeRef]
  properties: [WorkflowPropertyRef]
}

input WorkflowNodeTypeRef {
  id: ID
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  name: String
  description: String
  nodeClass: WorkflowNodeClass
  nodes: [WorkflowNodeRef]
  properties: [WorkflowPropertyRef]
}

type WorkflowProperty
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  access(filter: ACLFilter, first: Int, offset: Int): [ACL] @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  createdDateTime: DateTime @join__field(graph: CORE)
  createdBy(filter: UserFilter): User @join__field(graph: CORE)
  modifiedDateTime: DateTime @join__field(graph: CORE)
  modifiedBy(filter: UserFilter): User @join__field(graph: CORE)
  propertyType: WorkflowPropertyType! @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  description: String! @join__field(graph: CORE)
  definedBy(filter: WorkflowPropertyFilter): WorkflowProperty @join__field(graph: CORE)
  dataType: DataType @join__field(graph: CORE)
  unitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: CORE)
  value: String @join__field(graph: CORE)
  nodeType(filter: WorkflowNodeTypeFilter): WorkflowNodeType @join__field(graph: CORE)
  node(filter: WorkflowNodeFilter): WorkflowNode @join__field(graph: CORE)
  connectionType(filter: WorkflowConnectionTypeFilter): WorkflowConnectionType @join__field(graph: CORE)
  connection(filter: WorkflowConnectionFilter): WorkflowConnection @join__field(graph: CORE)
  instances(filter: WorkflowPropertyInstanceFilter, order: WorkflowPropertyInstanceOrder, first: Int, offset: Int): [WorkflowPropertyInstance] @join__field(graph: CORE)
  accessAggregate(filter: ACLFilter): ACLAggregateResult @join__field(graph: CORE)
  instancesAggregate(filter: WorkflowPropertyInstanceFilter): WorkflowPropertyInstanceAggregateResult @join__field(graph: CORE)
}

type WorkflowPropertyAggregateResult {
  count: Int
  createdDateTimeMin: DateTime
  createdDateTimeMax: DateTime
  modifiedDateTimeMin: DateTime
  modifiedDateTimeMax: DateTime
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
  valueMin: String
  valueMax: String
}

input WorkflowPropertyFilter {
  id: [ID!]
  isActive: Boolean
  name: StringHashFilter
  description: StringHashFilter
  has: [WorkflowPropertyHasFilter]
  and: [WorkflowPropertyFilter]
  or: [WorkflowPropertyFilter]
  not: WorkflowPropertyFilter
}

enum WorkflowPropertyHasFilter {
  access
  isActive
  createdDateTime
  createdBy
  modifiedDateTime
  modifiedBy
  propertyType
  name
  description
  definedBy
  dataType
  unitOfMeasure
  value
  nodeType
  node
  connectionType
  connection
  instances
}

type WorkflowPropertyInstance
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  access(filter: ACLFilter, first: Int, offset: Int): [ACL] @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  createdDateTime: DateTime @join__field(graph: CORE)
  createdBy(filter: UserFilter): User @join__field(graph: CORE)
  modifiedDateTime: DateTime @join__field(graph: CORE)
  modifiedBy(filter: UserFilter): User @join__field(graph: CORE)
  workflowInstance(filter: WorkflowInstanceFilter): WorkflowInstance @join__field(graph: CORE)
  workflowProperty(filter: WorkflowPropertyFilter): WorkflowProperty @join__field(graph: CORE)
  values(filter: WorkflowPropertyValueFilter, order: WorkflowPropertyValueOrder, first: Int, offset: Int): [WorkflowPropertyValue] @join__field(graph: CORE)
  accessAggregate(filter: ACLFilter): ACLAggregateResult @join__field(graph: CORE)
  valuesAggregate(filter: WorkflowPropertyValueFilter): WorkflowPropertyValueAggregateResult @join__field(graph: CORE)
}

type WorkflowPropertyInstanceAggregateResult {
  count: Int
  createdDateTimeMin: DateTime
  createdDateTimeMax: DateTime
  modifiedDateTimeMin: DateTime
  modifiedDateTimeMax: DateTime
}

input WorkflowPropertyInstanceFilter {
  id: [ID!]
  isActive: Boolean
  has: [WorkflowPropertyInstanceHasFilter]
  and: [WorkflowPropertyInstanceFilter]
  or: [WorkflowPropertyInstanceFilter]
  not: WorkflowPropertyInstanceFilter
}

enum WorkflowPropertyInstanceHasFilter {
  access
  isActive
  createdDateTime
  createdBy
  modifiedDateTime
  modifiedBy
  workflowInstance
  workflowProperty
  values
}

input WorkflowPropertyInstanceOrder {
  asc: WorkflowPropertyInstanceOrderable
  desc: WorkflowPropertyInstanceOrderable
  then: WorkflowPropertyInstanceOrder
}

enum WorkflowPropertyInstanceOrderable {
  createdDateTime
  modifiedDateTime
}

input WorkflowPropertyInstancePatch {
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  workflowInstance: WorkflowInstanceRef
  workflowProperty: WorkflowPropertyRef
  values: [WorkflowPropertyValueRef]
}

input WorkflowPropertyInstanceRef {
  id: ID
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  workflowInstance: WorkflowInstanceRef
  workflowProperty: WorkflowPropertyRef
  values: [WorkflowPropertyValueRef]
}

input WorkflowPropertyOrder {
  asc: WorkflowPropertyOrderable
  desc: WorkflowPropertyOrderable
  then: WorkflowPropertyOrder
}

enum WorkflowPropertyOrderable {
  createdDateTime
  modifiedDateTime
  name
  description
  value
}

input WorkflowPropertyPatch {
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  propertyType: WorkflowPropertyType
  name: String
  description: String
  definedBy: WorkflowPropertyRef
  dataType: DataType
  unitOfMeasure: UnitOfMeasureRef
  value: String
  nodeType: WorkflowNodeTypeRef
  node: WorkflowNodeRef
  connectionType: WorkflowConnectionTypeRef
  connection: WorkflowConnectionRef
  instances: [WorkflowPropertyInstanceRef]
}

input WorkflowPropertyRef {
  id: ID
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  propertyType: WorkflowPropertyType
  name: String
  description: String
  definedBy: WorkflowPropertyRef
  dataType: DataType
  unitOfMeasure: UnitOfMeasureRef
  value: String
  nodeType: WorkflowNodeTypeRef
  node: WorkflowNodeRef
  connectionType: WorkflowConnectionTypeRef
  connection: WorkflowConnectionRef
  instances: [WorkflowPropertyInstanceRef]
}

enum WorkflowPropertyType {
  STATIC
  CONFIG
  VARIABLE
}

type WorkflowPropertyValue
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  createdDateTime: DateTime @join__field(graph: CORE)
  createdBy(filter: UserFilter): User @join__field(graph: CORE)
  modifiedDateTime: DateTime @join__field(graph: CORE)
  modifiedBy(filter: UserFilter): User @join__field(graph: CORE)
  propertyInstance(filter: WorkflowPropertyInstanceFilter): WorkflowPropertyInstance! @join__field(graph: CORE)
  value: String @join__field(graph: CORE)
  previous(filter: WorkflowPropertyValueFilter): WorkflowPropertyValue @join__field(graph: CORE)
  next(filter: WorkflowPropertyValueFilter): WorkflowPropertyValue @join__field(graph: CORE)
}

type WorkflowPropertyValueAggregateResult {
  count: Int
  createdDateTimeMin: DateTime
  createdDateTimeMax: DateTime
  modifiedDateTimeMin: DateTime
  modifiedDateTimeMax: DateTime
  valueMin: String
  valueMax: String
}

input WorkflowPropertyValueFilter {
  id: [ID!]
  has: [WorkflowPropertyValueHasFilter]
  and: [WorkflowPropertyValueFilter]
  or: [WorkflowPropertyValueFilter]
  not: WorkflowPropertyValueFilter
}

enum WorkflowPropertyValueHasFilter {
  createdDateTime
  createdBy
  modifiedDateTime
  modifiedBy
  propertyInstance
  value
  previous
  next
}

input WorkflowPropertyValueOrder {
  asc: WorkflowPropertyValueOrderable
  desc: WorkflowPropertyValueOrderable
  then: WorkflowPropertyValueOrder
}

enum WorkflowPropertyValueOrderable {
  createdDateTime
  modifiedDateTime
  value
}

input WorkflowPropertyValuePatch {
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  propertyInstance: WorkflowPropertyInstanceRef
  value: String
  previous: WorkflowPropertyValueRef
  next: WorkflowPropertyValueRef
}

input WorkflowPropertyValueRef {
  id: ID
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  propertyInstance: WorkflowPropertyInstanceRef
  value: String
  previous: WorkflowPropertyValueRef
  next: WorkflowPropertyValueRef
}

type WorkflowSpecification
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  access(filter: ACLFilter, first: Int, offset: Int): [ACL] @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  createdDateTime: DateTime @join__field(graph: CORE)
  createdBy(filter: UserFilter): User @join__field(graph: CORE)
  modifiedDateTime: DateTime @join__field(graph: CORE)
  modifiedBy(filter: UserFilter): User @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  description: String! @join__field(graph: CORE)
  nodes(filter: WorkflowNodeFilter, order: WorkflowNodeOrder, first: Int, offset: Int): [WorkflowNode] @join__field(graph: CORE)
  connections(filter: WorkflowConnectionFilter, order: WorkflowConnectionOrder, first: Int, offset: Int): [WorkflowConnection] @join__field(graph: CORE)
  instances(filter: WorkflowInstanceFilter, order: WorkflowInstanceOrder, first: Int, offset: Int): [WorkflowInstance] @join__field(graph: CORE)
  accessAggregate(filter: ACLFilter): ACLAggregateResult @join__field(graph: CORE)
  nodesAggregate(filter: WorkflowNodeFilter): WorkflowNodeAggregateResult @join__field(graph: CORE)
  connectionsAggregate(filter: WorkflowConnectionFilter): WorkflowConnectionAggregateResult @join__field(graph: CORE)
  instancesAggregate(filter: WorkflowInstanceFilter): WorkflowInstanceAggregateResult @join__field(graph: CORE)
}

type WorkflowSpecificationAggregateResult {
  count: Int
  createdDateTimeMin: DateTime
  createdDateTimeMax: DateTime
  modifiedDateTimeMin: DateTime
  modifiedDateTimeMax: DateTime
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
}

input WorkflowSpecificationFilter {
  id: [ID!]
  isActive: Boolean
  has: [WorkflowSpecificationHasFilter]
  and: [WorkflowSpecificationFilter]
  or: [WorkflowSpecificationFilter]
  not: WorkflowSpecificationFilter
}

enum WorkflowSpecificationHasFilter {
  access
  isActive
  createdDateTime
  createdBy
  modifiedDateTime
  modifiedBy
  name
  description
  nodes
  connections
  instances
}

input WorkflowSpecificationOrder {
  asc: WorkflowSpecificationOrderable
  desc: WorkflowSpecificationOrderable
  then: WorkflowSpecificationOrder
}

enum WorkflowSpecificationOrderable {
  createdDateTime
  modifiedDateTime
  name
  description
}

input WorkflowSpecificationPatch {
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  name: String
  description: String
  nodes: [WorkflowNodeRef]
  connections: [WorkflowConnectionRef]
  instances: [WorkflowInstanceRef]
}

input WorkflowSpecificationRef {
  id: ID
  access: [ACLRef]
  isActive: Boolean
  createdDateTime: DateTime
  createdBy: UserRef
  modifiedDateTime: DateTime
  modifiedBy: UserRef
  name: String
  description: String
  nodes: [WorkflowNodeRef]
  connections: [WorkflowConnectionRef]
  instances: [WorkflowInstanceRef]
}

type WorkMaster
  @join__owner(graph: CORE)
  @join__type(graph: CORE, key: "id")
{
  id: ID! @join__field(graph: CORE)
  isActive: Boolean @join__field(graph: CORE)
  name: String! @join__field(graph: CORE)
  version: String @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
  parent(filter: WorkMasterFilter): WorkMaster @join__field(graph: CORE)
  children(filter: WorkMasterFilter, order: WorkMasterOrder, first: Int, offset: Int): [WorkMaster] @join__field(graph: CORE)
  workType: WorkType @join__field(graph: CORE)
  workDefinitionType: String @join__field(graph: CORE)
  materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @join__field(graph: CORE)
  equipmentSpecifications(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification] @join__field(graph: CORE)
  personnelSpecifications(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification] @join__field(graph: CORE)
  duration: Float @join__field(graph: CORE)
  durationUoM(filter: UnitOfMeasureFilter): UnitOfMeasure @join__field(graph: CORE)
  jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @join__field(graph: CORE)
  workDirectives(filter: WorkDirectiveFilter, order: WorkDirectiveOrder, first: Int, offset: Int): [WorkDirective] @join__field(graph: CORE)
  childrenAggregate(filter: WorkMasterFilter): WorkMasterAggregateResult @join__field(graph: CORE)
  materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult @join__field(graph: CORE)
  equipmentSpecificationsAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult @join__field(graph: CORE)
  personnelSpecificationsAggregate(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult @join__field(graph: CORE)
  jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult @join__field(graph: CORE)
  workDirectivesAggregate(filter: WorkDirectiveFilter): WorkDirectiveAggregateResult @join__field(graph: CORE)
}

type WorkMasterAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  versionMin: String
  versionMax: String
  descriptionMin: String
  descriptionMax: String
  workDefinitionTypeMin: String
  workDefinitionTypeMax: String
  durationMin: Float
  durationMax: Float
  durationSum: Float
  durationAvg: Float
}

input WorkMasterFilter {
  id: [ID!]
  isActive: Boolean
  name: StringHashFilter
  description: StringHashFilter
  workType: WorkType_hash
  workDefinitionType: StringHashFilter
  has: [WorkMasterHasFilter]
  and: [WorkMasterFilter]
  or: [WorkMasterFilter]
  not: WorkMasterFilter
}

enum WorkMasterHasFilter {
  isActive
  name
  version
  description
  parent
  children
  workType
  workDefinitionType
  materialSpecifications
  equipmentSpecifications
  personnelSpecifications
  duration
  durationUoM
  jobOrders
  workDirectives
}

input WorkMasterOrder {
  asc: WorkMasterOrderable
  desc: WorkMasterOrderable
  then: WorkMasterOrder
}

enum WorkMasterOrderable {
  name
  version
  description
  workDefinitionType
  duration
}

input WorkMasterPatch {
  isActive: Boolean
  version: String
  description: String
  parent: WorkMasterRef
  children: [WorkMasterRef]
  workType: WorkType
  workDefinitionType: String
  materialSpecifications: [MaterialSpecificationRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  duration: Float
  durationUoM: UnitOfMeasureRef
  jobOrders: [JobOrderRef]
  workDirectives: [WorkDirectiveRef]
}

input WorkMasterRef {
  id: ID
  isActive: Boolean
  name: String
  version: String
  description: String
  parent: WorkMasterRef
  children: [WorkMasterRef]
  workType: WorkType
  workDefinitionType: String
  materialSpecifications: [MaterialSpecificationRef]
  equipmentSpecifications: [EquipmentSpecificationRef]
  personnelSpecifications: [PersonnelSpecificationRef]
  duration: Float
  durationUoM: UnitOfMeasureRef
  jobOrders: [JobOrderRef]
  workDirectives: [WorkDirectiveRef]
}

"""
An identification of the resources and workflow required to perform a specified unit of work
shall be defined as a work definition. The work definition may apply to production, maintenance, quality and inventory
activities.
"""
enum WorkType {
  Production
  Maintenance
  Quality
  Inventory
  Mixed
}

input WorkType_hash {
  eq: WorkType
  in: [WorkType]
}
